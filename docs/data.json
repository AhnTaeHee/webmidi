{
    "project": {
        "name": "WebMidi",
        "version": "1.0.0-beta.1",
        "description": "Tame the Web MIDI API. Send and receive MIDI messages with ease. Control instruments with user-friendly functions (playNote, sendPitchBend, etc.). React to MIDI input with simple event listeners (noteon, pitchbend, controlchange, etc.).",
        "url": ""
    },
    "files": {
        "src/webmidi.js": {
            "name": "src/webmidi.js",
            "modules": {},
            "classes": {
                "WebMidi": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "WebMidi": {
            "name": "WebMidi",
            "shortname": "WebMidi",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/webmidi.js",
            "line": 5,
            "description": "The `WebMidi` object makes it easier to work with the Web MIDI API. Basically, it\nsimplifies two things: sending and receiving MIDI messages.\n\nTo send MIDI messages, you simply need to call the desired method (`playNote()`,\n`sendPitchBend()`, `stopNote()`, etc.) with the appropriate parameters and all the\nnative MIDI communication will be handled for you. The only additional thing that\nneeds to be done is enable `WebMidi`. Here is an example:\n\n     WebMidi.enable(function() {\n       WebMidi.playNote(2, \"C3\");\n     });\n\nThe code above, calls the `WebMidi.enable()` method. Upon success, this method\nexecutes the callback function specified as a parameter. In this case, the callback\ncalls the `playnote()` function to play a 3rd octave C (note number 60) on channel 2.\n\nReceiving messages is just as easy. You simply have to set a callback function to be\ntriggered when a specific MIDI message is received. For example, to listen for pitch\nbend events on any input MIDI channels:\n\n     WebMidi.addListener('pitchbend', function(e) {\n       console.log(\"Pitch value: \" + e.value);\n     });\n\nAs you can see, this library makes it much easier to use the Web MIDI API. No need to\nmanually craft or decode binary MIDI messages anymore!",
            "static": 1,
            "todo": [
                "Add removeAllEventListeners()",
                "on() and once() functions",
                "Add a 'filter' parameter to addListener. This would allow to listen for a\n       specific controller on a controlchange event or a specific note on a event\n       message.",
                "Add more examples in method documentation (playNote namely).",
                "Add specific events for channel mode messages ?",
                "Yuidoc does not allow multiple exceptions (@throws) for a single method ?!",
                "Should the sendsysex method allow Uint8Array param ?",
                "Define textual versions of channel mode messages"
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/webmidi.js",
            "line": 51,
            "description": "[read-only] Indicates whether the browser supports the Web MIDI API or not.",
            "itemtype": "property",
            "name": "supported",
            "type": "Boolean",
            "static": 1,
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 65,
            "description": "[read-only] Indicates whether the interface to the host's MIDI subsystem is\ncurrently active.",
            "itemtype": "property",
            "name": "connected",
            "type": "Boolean",
            "static": 1,
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 80,
            "description": "[read-only] An array of all currently available MIDI input devices.",
            "itemtype": "property",
            "name": "inputs",
            "type": "{MIDIInput[]}",
            "static": 1,
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 101,
            "description": "[read-only] An array of all currently available MIDI output devices.",
            "itemtype": "property",
            "name": "outputs",
            "type": "{MIDIOutput[]}",
            "static": 1,
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 122,
            "description": "[read-only] Current MIDI performance time in milliseconds. This can be used to\nqueue events in the future.",
            "itemtype": "property",
            "name": "time",
            "type": "DOMHighResTimeStamp",
            "static": 1,
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 183,
            "itemtype": "method",
            "name": "_initializeUserHandlers",
            "access": "private",
            "tagname": "",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 205,
            "itemtype": "method",
            "name": "_onInterfaceStateChange",
            "access": "private",
            "tagname": "",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 211,
            "description": "Event emitted when the interface's state changes. Typically, this happens when a\nMIDI device is being plugged or unplugged. This event cannot be listened on a\nsingle specific MIDI device, it is intended to be interface-wide. If a device is\nspecified, it will be silently ignored.",
            "itemtype": "event",
            "name": "statechange",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "todo": [
                "complete documentation"
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 229,
            "itemtype": "method",
            "name": "_parseChannelEvent",
            "access": "private",
            "tagname": "",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 258,
            "description": "Event emitted when a note off MIDI message has been received on a specific device and\nchannel.",
            "itemtype": "event",
            "name": "noteoff",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in milliseconds since\n                                   start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred (in milliseconds\n                                   since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "channel",
                            "description": "The channel where the event occurred (between 1 and 16).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "note",
                            "description": "",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "number",
                                    "description": "The MIDI note number.",
                                    "type": "Uint"
                                },
                                {
                                    "name": "name",
                                    "description": "The usual note name (C, C#, D, D#, etc.).",
                                    "type": "String"
                                },
                                {
                                    "name": "octave",
                                    "description": "The octave (between -2 and 8).",
                                    "type": "Uint"
                                }
                            ]
                        },
                        {
                            "name": "velocity",
                            "description": "The release velocity (between 0 and 1).",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 289,
            "description": "Event emitted when a note on MIDI message has been received on a specific device and\nchannel.",
            "itemtype": "event",
            "name": "noteon",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in milliseconds since\n                                   start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred (in milliseconds\n                                   since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "channel",
                            "description": "The channel where the event occurred (between 1 and 16).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "note",
                            "description": "",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "number",
                                    "description": "The MIDI note number.",
                                    "type": "Uint"
                                },
                                {
                                    "name": "name",
                                    "description": "The usual note name (C, C#, D, D#, etc.).",
                                    "type": "String"
                                },
                                {
                                    "name": "octave",
                                    "description": "The octave (between -2 and 8).",
                                    "type": "Uint"
                                }
                            ]
                        },
                        {
                            "name": "velocity",
                            "description": "The attack velocity (between 0 and 1).",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 321,
            "description": "Event emitted when a key-specific aftertouch MIDI message has been received on a specific\ndevice and channel.",
            "itemtype": "event",
            "name": "keyaftertouch",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in milliseconds since\n                                   start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred (in milliseconds\n                                   since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "channel",
                            "description": "The channel where the event occurred (between 1 and 16).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "note",
                            "description": "",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "number",
                                    "description": "The MIDI note number.",
                                    "type": "Uint"
                                },
                                {
                                    "name": "name",
                                    "description": "The usual note name (C, C#, D, D#, etc.).",
                                    "type": "String"
                                },
                                {
                                    "name": "octave",
                                    "description": "The octave (between -2 and 8).",
                                    "type": "Uint"
                                }
                            ]
                        },
                        {
                            "name": "value",
                            "description": "The aftertouch amount (between 0 and 1).",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 356,
            "description": "Event emitted when a control change MIDI message has been received on a specific device and\nchannel.",
            "itemtype": "event",
            "name": "controlchange",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in milliseconds since\n                                   start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred (in milliseconds\n                                   since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "channel",
                            "description": "The channel where the event occurred (between 1 and 16).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "controller",
                            "description": "",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "number",
                                    "description": "The number of the controller.",
                                    "type": "Uint"
                                },
                                {
                                    "name": "name",
                                    "description": "The number of the controller.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "value",
                            "description": "The value received (between 0 and 127).",
                            "type": "Uint"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 389,
            "description": "Event emitted when a channel mode MIDI message has been received on a specific device and\nchannel.",
            "itemtype": "event",
            "name": "channelmode",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in milliseconds since\n                                   start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred (in milliseconds\n                                   since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "channel",
                            "description": "The channel where the event occurred (between 1 and 16).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "controller",
                            "description": "",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "number",
                                    "description": "The number of the controller.",
                                    "type": "Uint"
                                },
                                {
                                    "name": "name",
                                    "description": "The number of the controller.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "value",
                            "description": "The value received (between 0 and 127).",
                            "type": "Uint"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 419,
            "description": "Event emitted when a program change MIDI message has been received on a specific device and\nchannel.",
            "itemtype": "event",
            "name": "programchange",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in milliseconds since\n                                   start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred (in milliseconds\n                                   since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "channel",
                            "description": "The channel where the event occurred (between 1 and 16).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "value",
                            "description": "The value received (between 0 and 127).",
                            "type": "Uint"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 442,
            "description": "Event emitted when a channel-wide aftertouch MIDI message has been received on a specific\ndevice and channel.",
            "itemtype": "event",
            "name": "channelaftertouch",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in milliseconds since\n                                   start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred (in milliseconds\n                                   since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "channel",
                            "description": "The channel where the event occurred (between 1 and 16).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "value",
                            "description": "The aftertouch value received (between 0 and 1).",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 465,
            "description": "Event emitted when a pitch bend MIDI message has been received on a specific device and\nchannel.",
            "itemtype": "event",
            "name": "pitchbend",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in milliseconds since\n                                   start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred (in milliseconds\n                                   since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "channel",
                            "description": "The channel where the event occurred (between 1 and 16).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "value",
                            "description": "The pitch bend value received (between -1 and\n                                   1).",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 501,
            "itemtype": "method",
            "name": "_parseSystemEvent",
            "access": "private",
            "tagname": "",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 519,
            "description": "Event emitted when a system exclusive MIDI message has been received.",
            "itemtype": "event",
            "name": "sysex",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in\n                                   milliseconds since start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred\n                                   (in milliseconds since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 538,
            "description": "Event emitted when a system MIDI time code quarter frame message has been received.",
            "itemtype": "event",
            "name": "timecode",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in\n                                   milliseconds since start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred\n                                   (in milliseconds since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 558,
            "description": "Event emitted when a system song position pointer MIDI message has been received.",
            "itemtype": "event",
            "name": "songposition",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in\n                                   milliseconds since start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred\n                                   (in milliseconds since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 578,
            "description": "Event emitted when a system song select MIDI message has been received.",
            "itemtype": "event",
            "name": "songselect",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in\n                                   milliseconds since start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred\n                                   (in milliseconds since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        },
                        {
                            "name": "song",
                            "description": "Song (or sequence) number to select.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 599,
            "description": "Event emitted when a system tune request MIDI message has been received.",
            "itemtype": "event",
            "name": "tuningrequest",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in\n                                   milliseconds since start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred\n                                   (in milliseconds since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 618,
            "description": "Event emitted when a system timing clock MIDI message has been received.",
            "itemtype": "event",
            "name": "clock",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in\n                                   milliseconds since start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred\n                                   (in milliseconds since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 637,
            "description": "Event emitted when a system start MIDI message has been received.",
            "itemtype": "event",
            "name": "start",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in\n                                   milliseconds since start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred\n                                   (in milliseconds since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 656,
            "description": "Event emitted when a system continue MIDI message has been received.",
            "itemtype": "event",
            "name": "continue",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in\n                                   milliseconds since start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred\n                                   (in milliseconds since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 675,
            "description": "Event emitted when a system stop MIDI message has been received.",
            "itemtype": "event",
            "name": "stop",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in\n                                   milliseconds since start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred\n                                   (in milliseconds since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 694,
            "description": "Event emitted when a system active sensing MIDI message has been received.",
            "itemtype": "event",
            "name": "activesensing",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in\n                                   milliseconds since start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred\n                                   (in milliseconds since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 713,
            "description": "Event emitted when a system reset MIDI message has been received.",
            "itemtype": "event",
            "name": "reset",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in\n                                   milliseconds since start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred\n                                   (in milliseconds since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 732,
            "description": "Event emitted when an unknown system MIDI message has been received. It could be,\nfor example, one of the undefined/reserved messages.",
            "itemtype": "event",
            "name": "unknownsystemmessage",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The MIDI input device that triggered the event.",
                            "type": "MIDIInput"
                        },
                        {
                            "name": "data",
                            "description": "The raw MIDI message as an array of 8 bit\n                                   values.",
                            "type": "Uint8Array"
                        },
                        {
                            "name": "receivedTime",
                            "description": "The time when the event occurred (in\n                                   milliseconds since start).",
                            "type": "Number"
                        },
                        {
                            "name": "timeStamp",
                            "description": "The timestamp when the event occurred\n                                   (in milliseconds since the epoch).",
                            "type": "Uint"
                        },
                        {
                            "name": "type",
                            "description": "The type of event that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 761,
            "itemtype": "method",
            "name": "_onMidiMessage",
            "access": "private",
            "tagname": "",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 775,
            "description": "Checks if the Web MIDI API is available and then tries to connect to the host's MIDI\nsubsystem. If the operation succeeds, the `successHandler` callback is executed.\nIf not, the `errorHandler` callback is executed and passed a string describing the\nerror.",
            "itemtype": "method",
            "name": "enable",
            "static": 1,
            "params": [
                {
                    "name": "successHandler",
                    "description": "A function to execute upon success.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorHandler",
                    "description": "A function to execute upon error. This function\n                                   will be passed a string describing the error.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "sysex",
                    "description": "Whether to enable sysex or not. When this\n                                   parameter is set to true, the browser may prompt\n                                   the user for authorization.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 826,
            "description": "Adds an event listener that will trigger a function callback when the specified event\nhappens. By default, the listener is system-wide (it will listen on all MIDI\nchannels of all MIDI devices). To listen to a specific device or channel, you can use the\n`filter` parameter.\n\nWebMidi must be enabled before adding event listeners.\n\nHere is a list of events that are dispatched by the `WebMidi` object and that can be\nlistened to.\n\nMIDI interface event:\n\n   * {{#crossLink \"WebMidi/statechange:event\"}}statechange{{/crossLink}}\n\nDevice and channel-specific MIDI events:\n\n   * {{#crossLink \"WebMidi/noteoff:event\"}}noteoff{{/crossLink}}\n   * {{#crossLink \"WebMidi/noteon:event\"}}noteon{{/crossLink}}\n   * {{#crossLink \"WebMidi/keyaftertouch:event\"}}keyaftertouch{{/crossLink}}\n   * {{#crossLink \"WebMidi/controlchange:event\"}}controlchange{{/crossLink}}\n   * {{#crossLink \"WebMidi/channelmode:event\"}}channelmode{{/crossLink}}\n   * {{#crossLink \"WebMidi/programchange:event\"}}programchange{{/crossLink}}\n   * {{#crossLink \"WebMidi/channelaftertouch:event\"}}channelaftertouch{{/crossLink}}\n   * {{#crossLink \"WebMidi/pitchbend:event\"}}pitchbend{{/crossLink}}\n\nSystem-wide MIDI events:\n\n   * {{#crossLink \"WebMidi/sysex:event\"}}sysex{{/crossLink}}\n   * {{#crossLink \"WebMidi/timecode:event\"}}timecode{{/crossLink}}\n   * {{#crossLink \"WebMidi/songposition:event\"}}songposition{{/crossLink}}\n   * {{#crossLink \"WebMidi/songselect:event\"}}songselect{{/crossLink}}\n   * {{#crossLink \"WebMidi/tuningrequest:event\"}}tuningrequest{{/crossLink}}\n   * {{#crossLink \"WebMidi/clock:event\"}}clock{{/crossLink}}\n   * {{#crossLink \"WebMidi/start:event\"}}start{{/crossLink}}\n   * {{#crossLink \"WebMidi/continue:event\"}}continue{{/crossLink}}\n   * {{#crossLink \"WebMidi/stop:event\"}}stop{{/crossLink}}\n   * {{#crossLink \"WebMidi/activesensing:event\"}}activesensing{{/crossLink}}\n   * {{#crossLink \"WebMidi/reset:event\"}}reset{{/crossLink}}\n   * {{#crossLink \"WebMidi/unknownsystemmessage:event\"}}unknownsystemmessage{{/crossLink}}\n\nFor system-wide events, the `filters` parameter (if any) will be silently ignored.",
            "itemtype": "method",
            "name": "addListener",
            "static": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "A callback function to execute when the\n                                                 specified event is detected. This function\n                                                 will receive an event parameter object.\n                                                 For details on this object's properties,\n                                                 check out the documentation for the various\n                                                 events (links above).",
                    "type": "Function"
                },
                {
                    "name": "filters",
                    "description": "",
                    "optional": true,
                    "props": [
                        {
                            "name": "device",
                            "description": "The id of the MIDI device to listen on. The\n                                                 device id can be retrieved in the\n                                                 `WebMidi.inputs` array. It is also possible\n                                                 to listen on several devices at once by\n                                                 passing in an array of ids. If set to\n                                                 'all' (default) all devices will trigger the\n                                                 callback function.",
                            "type": "String|Array",
                            "optional": true,
                            "optdefault": "\"all\""
                        },
                        {
                            "name": "channel",
                            "description": "The MIDI channel to listen on (between 1 and\n                                                 16). You can also specify an array of channels\n                                                 to listen on. If set to 'all', all channels\n                                                 will trigger the callback function.",
                            "type": "Uint|Array|String",
                            "optional": true,
                            "optdefault": "\"all\""
                        }
                    ]
                }
            ],
            "throws": {
                "description": "The 'listener' parameter must be a function.",
                "type": "TypeError"
            },
            "return": {
                "description": "Returns the `WebMidi` object so methods\n                                                 can be chained.",
                "type": "WebMidi"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 995,
            "description": "Returns a MIDIOutput or MIDIInput device matching the specified id and device type.",
            "itemtype": "method",
            "name": "getDeviceById",
            "static": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the device. Ids can be retrieved by looking at\n                                        the `WebMidi.inputs` or `WebMidi.outputs` arrays.",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "One of 'input' or 'output' to indicate whether your are\n                                        looking for an input or an output device.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "input"
                }
            ],
            "return": {
                "description": "A MIDIOutput or MIDIInput device matching the specified\n                                        id. If no matching device can be found, the method\n                                        returns `false`.",
                "type": "MIDIOutput|MIDIInput|False"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1022,
            "description": "Return the index of a device in the `WebMidi.outputs` or `WebMidi.inputs` arrays. The device\nmust be specified by using its id.",
            "itemtype": "method",
            "name": "getDeviceIndexById",
            "static": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the device such as it is presented in the\n                               `WebMidi.inputs` or `WebMidi.outputs` arrays.",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "One of 'input' or 'output' to indicate whether your are looking\n                               for the index of an input or output device.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "input"
                }
            ],
            "return": {
                "description": "If no matching device can be found, the method returns `false`.",
                "type": "Uint|False"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1047,
            "description": "Checks if the specified event type is already defined to trigger the listener function on the\nspecified device and channel. If the special value \"all\" is used for the device/channel, the\nfunction will return `true` only if all devices/channels have the listener defined.\n\nFor system-wide events (`onstatechange`, `sysex`, `start`, etc.), the `filters` parameter is\nsilently ignored.",
            "itemtype": "method",
            "name": "hasListener",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The callback function to check for.",
                    "type": "Function"
                },
                {
                    "name": "filters",
                    "description": "{Object}",
                    "optional": true,
                    "props": [
                        {
                            "name": "device",
                            "description": "The id of the MIDI device to check on (as\n                                                   reported by `WebMidi.inputs`) or the special\n                                                   value \"all\".",
                            "type": "String|Array",
                            "optional": true,
                            "optdefault": "\"all\""
                        },
                        {
                            "name": "channel",
                            "description": "The MIDI channel to check on. It can be a\n                                                   uint (between 1 and 16) or the special value\n                                                   \"all\".",
                            "type": "Uint|Array|String",
                            "optional": true,
                            "optdefault": "all"
                        }
                    ]
                }
            ],
            "throws": {
                "description": "The 'listener' parameter must be a function.",
                "type": "TypeError"
            },
            "return": {
                "description": "Boolean value indicating whether or not the\n                                                   channel(s) already have this listener\n                                                   defined.",
                "type": "Boolean"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1139,
            "description": "Removes the specified listener from all requested devices and channel(s). If the special value\n\"all\" is used for the device or the channel parameter, the function will remove the listener\nfrom all devices/channels.\n\nFor system-wide events (`onstatechange`, `sysex`, `start`, etc.), the `filters` parameter is\nsilently ignored.",
            "itemtype": "method",
            "name": "removeListener",
            "static": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The callback function to check for.",
                    "type": "Function"
                },
                {
                    "name": "filters",
                    "description": "{Object}",
                    "optional": true,
                    "props": [
                        {
                            "name": "device",
                            "description": "The id of the device(s) to check on or the special\n                                             value \"all\".",
                            "type": "String",
                            "optional": true,
                            "optdefault": "all"
                        },
                        {
                            "name": "channel",
                            "description": "The MIDI channel(s) to check on. It can be a uint\n                                             (between 1 and 16) or the special value \"all\".",
                            "type": "Uint|String",
                            "optional": true,
                            "optdefault": "all"
                        }
                    ]
                }
            ],
            "throws": {
                "description": "WebMidi must be enabled before removing event\n                                             listeners.",
                "type": "Error"
            },
            "return": {
                "description": "The `WebMidi` object for easy method chaining.",
                "type": "WebMidi"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1229,
            "description": "Sends a MIDI message to the specified device(s) at the specified timestamp. The `device`\nparameter must be the id of an available device as reported by `WebMidi.outputs`. It can also\nbe an array of such devices or the value \"all\". By using \"all\", the message will be sent to all\ncurrently available output devices.\n\nUnless, you are familiar with the details of the MIDI message format, you should not use this\nmethod directly. Instead, use one of the simpler helper methods: `playNote()`, `stopNote()`,\n`sendControlChange()`, `sendSystemMessage()`, etc.\n\nDetails on the format of MIDI messages are available in the\n<a href=\"http://www.midi.org/techspecs/midimessages.php\">summary of MIDI messages</a> of the\nMIDI Manufacturers Association.",
            "itemtype": "method",
            "name": "send",
            "static": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "status",
                    "description": "The MIDI status byte of the message (128-255).",
                    "type": "Uint"
                },
                {
                    "name": "data",
                    "description": "An array of data bytes for the message. The number\n                                             of data bytes varies depending on the status byte.",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "[]"
                },
                {
                    "name": "device",
                    "description": "The id of the device the message should be sent\n                                             to. You can view the device ids by looking at\n                                             `WebMidi.outputs`. If you leave out this parameter\n                                             the message will be sent to all devices.",
                    "type": "String|Array",
                    "optional": true,
                    "optdefault": "\"all\""
                },
                {
                    "name": "timestamp",
                    "description": "The timestamp at which to send the message. You\n                                             can use `WebMidi.time` to retrieve the current\n                                             timestamp. To send immediately, leave blank or use\n                                             0.",
                    "type": "DOMHighResTimeStamp",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "throws": {
                "description": "The status byte must be an integer between 128\n                                             (0x80) and 255 (0xFF).",
                "type": "RangeError"
            },
            "return": {
                "description": "Returns the `WebMidi` object so methods can be\n                                             chained.",
                "type": "WebMidi"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1412,
            "description": "Sends a MIDI `note off` message to the specified device(s) and channel(s) for a single note or\nmultiple simultaneous notes (chord). You can delay the execution of the `note off` command by\nusing the `delay` parameter (milliseconds).",
            "itemtype": "method",
            "name": "stopNote",
            "static": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "note",
                    "description": "The note or an array of notes to stop. The notes can be\n                                     specified in one of two ways. The first way is by using\n                                     the MIDI note number (an integer between 0 and 127). The\n                                     second way is by using the note name followed by the\n                                     octave (C3, G#4, F-1). The octave range should be between\n                                     -2 and 8. The lowest note is C-2 (MIDI note number 0) and\n                                     the highest note is G8 (MIDI note number 127).",
                    "type": "Array|uint|String"
                },
                {
                    "name": "velocity",
                    "description": "The velocity at which to play the note (between 0 and 1).\n                                     An invalid velocity value will silently trigger the\n                                     default.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.5"
                },
                {
                    "name": "device",
                    "description": "The device id or an array of device ids. You can view\n                                     available devices in the `WebMidi.outputs` array. The\n                                     special value \"all\" can also be used.",
                    "type": "String|Array",
                    "optional": true,
                    "optdefault": "\"all"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\n                                           array of channel numbers. If the special value \"all\"\n                                           is used, the message will be sent to all 16\n                                           channels.",
                    "type": "Uint|Array|String",
                    "optional": true,
                    "optdefault": "\"all"
                },
                {
                    "name": "time",
                    "description": "This value can be one of two things. If\n                                     the value is a string starting with the + sign and\n                                     followed by a number, the request will be delayed by the\n                                     specified number (in milliseconds). Otherwise, the value\n                                     is considered a timestamp and the request will be\n                                     scheduled at that timestamp. The DOMHighResTimeStamp value\n                                     is relative to the navigation start of the document. To\n                                     retrieve the current time, you can use `WebMidi.time`. If\n                                     `time` is not present or is set to a time in the past,\n                                     the request is to be sent as soon as possible.",
                    "type": "DOMHighResTimeStamp|String",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "WebMidi must be enabled before stopping notes.",
                "type": "Error"
            },
            "return": {
                "description": "Returns the `WebMidi` object so methods can be chained.",
                "type": "WebMidi"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1482,
            "description": "Requests the playback of a single note or multiple notes on the specified device(s) and\nchannel(s). You can delay the execution of the `note on` command by using the `delay` parameter\n(milliseconds).\n\nIf no duration is specified, the note will play until a matching `note off` is sent. If a\nduration is specified, a `note off` will be automatically executed after said duration.\n\nPlease note that if you do use a duration, the release velocity will always be 64. If you want\nto tailor the release velocity, you need to use separate `playNote()` and `stopNote()` calls.",
            "itemtype": "method",
            "name": "playNote",
            "static": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "note",
                    "description": "The note to play or an array of notes to play. The notes\n                                     can be specified in one of two ways. The first way is by\n                                     using the MIDI note number (an integer between 0 and 127).\n                                     The second way is by using the note name followed by the\n                                     octave (C3, G#4, F-1). The octave range should be between\n                                     -2 and 8. The lowest possible note is C-2 and the highest\n                                     is G8.",
                    "type": "Array|uint|String"
                },
                {
                    "name": "velocity",
                    "description": "The velocity at which to play the note (between 0 and 1).\n                                     An invalid velocity value will silently trigger the\n                                     default.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.5"
                },
                {
                    "name": "duration",
                    "description": "The number of milliseconds to wait before sending a\n                                     matching note off event. If left undefined, only a\n                                     `note on` message is sent.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "undefined"
                },
                {
                    "name": "device",
                    "description": "The device's id. You can view available devices in the\n                                     `WebMidi.outputs` array.",
                    "type": "String|Array",
                    "optional": true,
                    "optdefault": "\"all"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\n                                           array of channel numbers. If the special value \"all\"\n                                           is used, the message will be sent to all 16\n                                           channels.",
                    "type": "Uint|Array|String",
                    "optional": true,
                    "optdefault": "\"all"
                },
                {
                    "name": "time",
                    "description": "This value can be one of two things. If\n                                     the value is a string starting with the + sign and\n                                     followed by a number, the request will be delayed by the\n                                     specified number (in milliseconds). Otherwise, the value\n                                     is considered a timestamp and the request will be\n                                     scheduled at that timestamp. The DOMHighResTimeStamp value\n                                     is relative to the navigation start of the document. To\n                                     retrieve the current time, you can use `WebMidi.time`. If\n                                     `time` is not present or is set to a time in the past,\n                                     the request is to be sent as soon as possible.",
                    "type": "DOMHighResTimeStamp|String",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "WebMidi must be enabled before playing notes.",
                "type": "Error"
            },
            "return": {
                "description": "Returns the `WebMidi` object so methods can be chained.",
                "type": "WebMidi"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1580,
            "description": "Sends a MIDI `key aftertouch` message to the specified device(s) and channel(s). This is a\nkey-specific aftertouch. For a channel-wide aftertouch message, use\n{{#crossLink \"WebMidi/sendChannelAftertouch:method\"}}sendChannelAftertouch(){{/crossLink}}.",
            "itemtype": "method",
            "name": "sendKeyAftertouch",
            "static": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "note",
                    "description": "The note for which you are sending an aftertouch value. The\n                                 notes can be specified in one of two ways. The first way is by\n                                 using the MIDI note number (an integer between 0 and 127). The\n                                 second way is by using the note name followed by the\n                                 octave (C3, G#4, F-1). The octave range should be between\n                                 -2 and 8. The lowest note is C-2 (MIDI note number 0) and\n                                 the highest note is G8 (MIDI note number 127).",
                    "type": "Array|uint|String"
                },
                {
                    "name": "pressure",
                    "description": "The pressure level to send (between 0 and 1).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.5"
                },
                {
                    "name": "device",
                    "description": "The device id or an array of device ids. You can view\n                                     available devices in the `WebMidi.outputs` array. The\n                                     special value \"all\" can also be used.",
                    "type": "String|Array",
                    "optional": true,
                    "optdefault": "\"all"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\n                                           array of channel numbers. If the special value \"all\"\n                                           is used, the message will be sent to all 16\n                                           channels.",
                    "type": "Uint|Array|String",
                    "optional": true,
                    "optdefault": "\"all"
                },
                {
                    "name": "time",
                    "description": "This value can be one of two things. If\n                                     the value is a string starting with the + sign and\n                                     followed by a number, the request will be delayed by the\n                                     specified number (in milliseconds). Otherwise, the value\n                                     is considered a timestamp and the request will be\n                                     scheduled at that timestamp. The DOMHighResTimeStamp value\n                                     is relative to the navigation start of the document. To\n                                     retrieve the current time, you can use `WebMidi.time`. If\n                                     `time` is not present or is set to a time in the past,\n                                     the request is to be sent as soon as possible.",
                    "type": "DOMHighResTimeStamp|String",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "The channel must be between 1 and 16.",
                "type": "RangeError"
            },
            "return": {
                "description": "Returns the `WebMidi` object so methods can be chained.",
                "type": "WebMidi"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1649,
            "description": "Sends a MIDI `control change` message to the specified device(s) and channel(s).",
            "itemtype": "method",
            "name": "sendControlChange",
            "static": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "controller",
                    "description": "The MIDI controller number (0-119)",
                    "type": "Uint"
                },
                {
                    "name": "value",
                    "description": "The value to send (0-127).",
                    "type": "Uint",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "device",
                    "description": "The device id or an array of device ids. You can view\n                                     available devices in the `WebMidi.outputs` array. The\n                                     special value \"all\" can also be used.",
                    "type": "String|Array",
                    "optional": true,
                    "optdefault": "\"all"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\n                                           array of channel numbers. If the special value \"all\"\n                                           is used, the message will be sent to all 16\n                                           channels.",
                    "type": "Uint|Array|String",
                    "optional": true,
                    "optdefault": "\"all"
                },
                {
                    "name": "time",
                    "description": "This value can be one of two things. If\n                                     the value is a string starting with the + sign and\n                                     followed by a number, the request will be delayed by the\n                                     specified number (in milliseconds). Otherwise, the value\n                                     is considered a timestamp and the request will be\n                                     scheduled at that timestamp. The DOMHighResTimeStamp value\n                                     is relative to the navigation start of the document. To\n                                     retrieve the current time, you can use `WebMidi.time`. If\n                                     `time` is not present or is set to a time in the past,\n                                     the request is to be sent as soon as possible.",
                    "type": "DOMHighResTimeStamp|String",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Value must be between 0 and 127.",
                "type": "RangeError"
            },
            "return": {
                "description": "Returns the `WebMidi` object so methods can be chained.",
                "type": "WebMidi"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1711,
            "description": "Sends a MIDI `channel mode` message to the specified device(s) and channel(s).",
            "itemtype": "method",
            "name": "sendChannelMode",
            "static": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "command",
                    "description": "The MIDI channel mode command (120-127).",
                    "type": "Uint"
                },
                {
                    "name": "value",
                    "description": "The value to send (0-127)",
                    "type": "Uint"
                },
                {
                    "name": "device",
                    "description": "The device id or an array of device ids. You can view\n                                     available devices in the `WebMidi.outputs` array. The\n                                     special value \"all\" can also be used.",
                    "type": "String|Array",
                    "optional": true,
                    "optdefault": "\"all"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\n                                           array of channel numbers. If the special value \"all\"\n                                           is used, the message will be sent to all 16\n                                           channels.",
                    "type": "Uint|Array|String",
                    "optional": true,
                    "optdefault": "\"all"
                },
                {
                    "name": "time",
                    "description": "This value can be one of two things. If\n                                     the value is a string starting with the + sign and\n                                     followed by a number, the request will be delayed by the\n                                     specified number (in milliseconds). Otherwise, the value\n                                     is considered a timestamp and the request will be\n                                     scheduled at that timestamp. The DOMHighResTimeStamp value\n                                     is relative to the navigation start of the document. To\n                                     retrieve the current time, you can use `WebMidi.time`. If\n                                     `time` is not present or is set to a time in the past,\n                                     the request is to be sent as soon as possible.",
                    "type": "DOMHighResTimeStamp|String",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Value must be between 0 and 127.",
                "type": "RangeError"
            },
            "return": {
                "description": "Returns the `WebMidi` object so methods can be chained.",
                "type": "WebMidi"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1777,
            "description": "Sends a MIDI `program change` message to the specified device(s) and channel(s).",
            "itemtype": "method",
            "name": "sendProgramChange",
            "static": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "program",
                    "description": "The MIDI patch (program) number (0-127)",
                    "type": "Uint"
                },
                {
                    "name": "device",
                    "description": "The device id or an array of device ids. You can view\n                                     available devices in the `WebMidi.outputs` array. The\n                                     special value \"all\" can also be used.",
                    "type": "String|Array",
                    "optional": true,
                    "optdefault": "\"all"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\n                                           array of channel numbers. If the special value \"all\"\n                                           is used, the message will be sent to all 16\n                                           channels.",
                    "type": "Uint|Array|String",
                    "optional": true,
                    "optdefault": "\"all"
                },
                {
                    "name": "time",
                    "description": "This value can be one of two things. If\n                                     the value is a string starting with the + sign and\n                                     followed by a number, the request will be delayed by the\n                                     specified number (in milliseconds). Otherwise, the value\n                                     is considered a timestamp and the request will be\n                                     scheduled at that timestamp. The DOMHighResTimeStamp value\n                                     is relative to the navigation start of the document. To\n                                     retrieve the current time, you can use `WebMidi.time`. If\n                                     `time` is not present or is set to a time in the past,\n                                     the request is to be sent as soon as possible.",
                    "type": "DOMHighResTimeStamp|String",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Program numbers must be between 0 and 127.",
                "type": "RangeError"
            },
            "return": {
                "description": "Returns the `WebMidi` object so methods can be chained.",
                "type": "WebMidi"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1833,
            "description": "Sends a MIDI `channel aftertouch` message to the specified device(s) and channel(s). For\nkey-specific aftertouch, you should instead use `sendKeyAftertouch()`.",
            "itemtype": "method",
            "name": "sendChannelAftertouch",
            "static": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "pressure",
                    "description": "The pressure level (between 0 and 1). An invalid pressure\n                                     value will silently trigger the default behaviour.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.5"
                },
                {
                    "name": "device",
                    "description": "The device id or an array of device ids. You can view\n                                     available devices in the `WebMidi.outputs` array. The\n                                     special value \"all\" can also be used.",
                    "type": "String|Array",
                    "optional": true,
                    "optdefault": "\"all"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\n                                           array of channel numbers. If the special value \"all\"\n                                           is used, the message will be sent to all 16\n                                           channels.",
                    "type": "Uint|Array|String",
                    "optional": true,
                    "optdefault": "\"all"
                },
                {
                    "name": "time",
                    "description": "This value can be one of two things. If\n                                     the value is a string starting with the + sign and\n                                     followed by a number, the request will be delayed by the\n                                     specified number (in milliseconds). Otherwise, the value\n                                     is considered a timestamp and the request will be\n                                     scheduled at that timestamp. The DOMHighResTimeStamp value\n                                     is relative to the navigation start of the document. To\n                                     retrieve the current time, you can use `WebMidi.time`. If\n                                     `time` is not present or is set to a time in the past,\n                                     the request is to be sent as soon as possible.",
                    "type": "DOMHighResTimeStamp|String",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "WebMidi must be enabled before sending messages.",
                "type": "Error"
            },
            "return": {
                "description": "Returns the `WebMidi` object so methods can be chained.",
                "type": "WebMidi"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1889,
            "description": "Sends a MIDI `pitch bend` message to the specified device(s) and channel(s).",
            "itemtype": "method",
            "name": "sendPitchBend",
            "static": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "bend",
                    "description": "The intensity level of the bend (between -1 and 1). A\n                                       value of zero means no bend.",
                    "type": "Number"
                },
                {
                    "name": "device",
                    "description": "The device id or an array of device ids. You can view\n                                       available devices in the `WebMidi.outputs` array. The\n                                       special value \"all\" can also be used.",
                    "type": "String|Array",
                    "optional": true,
                    "optdefault": "\"all"
                },
                {
                    "name": "channel",
                    "description": "The MIDI channel number (between 1 and 16) or an\n                                           array of channel numbers. If the special value \"all\"\n                                           is used, the message will be sent to all 16\n                                           channels.",
                    "type": "Uint|Array|String",
                    "optional": true,
                    "optdefault": "\"all"
                },
                {
                    "name": "time",
                    "description": "This value can be one of two things. If\n                                     the value is a string starting with the + sign and\n                                     followed by a number, the request will be delayed by the\n                                     specified number (in milliseconds). Otherwise, the value\n                                     is considered a timestamp and the request will be\n                                     scheduled at that timestamp. The DOMHighResTimeStamp value\n                                     is relative to the navigation start of the document. To\n                                     retrieve the current time, you can use `WebMidi.time`. If\n                                     `time` is not present or is set to a time in the past,\n                                     the request is to be sent as soon as possible.",
                    "type": "DOMHighResTimeStamp|String",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "throws": {
                "description": "Pitch bend value must be between -1 and 1.",
                "type": "RangeError"
            },
            "return": {
                "description": "Returns the `WebMidi` object so methods can be chained.",
                "type": "WebMidi"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1949,
            "description": "Returns a valid MIDI note number given the specified input. The input can be an integer\nrepresented as a string, a note name (C3, F#4, D-2, G8, etc.), a float or an int between 0 and\n127.",
            "params": [
                {
                    "name": "input",
                    "description": "A integer, float or string to extract the note number from."
                }
            ],
            "throws": {
                "description": "Invalid note number.",
                "type": "Error"
            },
            "return": {
                "description": "A valid MIDI note number (0-127).",
                "type": "Uint"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 1978,
            "description": "Returns a MIDI note number matching the note name passed in the form of a string parameter. The\nnote name must include the octave number which should be between -2 and 8: C5, G4, D#-1, F0,\netc.\n\nThe lowest note is C-2 (MIDI note number 0) and the highest note is G8 (MIDI note number 127).",
            "itemtype": "method",
            "name": "noteNameToNumber",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the note in the form of a letter, followed by an optional #\n                       symbol, followed by the octave number (between -2 and 8).",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The MIDI note number (between 0 and 127)",
                "type": "Uint"
            },
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 2009,
            "description": "Converts an input value (which can be an int, an array or the value \"all\" to an array of valid\nMIDI note numbers.",
            "itemtype": "method",
            "name": "_convertNoteToArray",
            "params": [
                {
                    "name": "channel",
                    "description": "",
                    "type": "Uint|Array",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 2032,
            "description": "Converts an input value (which can be an int, an array or the value \"all\" to an array of valid\nMIDI channels. If \"undefined\" is provided as the channel, an array of all channels will be\nreturned.",
            "itemtype": "method",
            "name": "_convertChannelToArray",
            "params": [
                {
                    "name": "channel",
                    "description": "",
                    "type": "Uint|Array",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebMidi"
        },
        {
            "file": "src/webmidi.js",
            "line": 2062,
            "itemtype": "method",
            "name": "_parseTimeParameter",
            "params": [
                {
                    "name": "time",
                    "description": "",
                    "type": "Number|String",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebMidi"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:995"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:1022"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/webmidi.js:1949"
        },
        {
            "message": "Missing item type\nReturns a valid MIDI note number given the specified input. The input can be an integer\nrepresented as a string, a note name (C3, F#4, D-2, G8, etc.), a float or an int between 0 and\n127.",
            "line": " src/webmidi.js:1949"
        }
    ]
}