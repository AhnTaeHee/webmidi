{"version":3,"file":"webmidi.p5.min.js","sources":["../node_modules/djipevents/dist/djipevents.esm.min.js","../src/InputChannel.js","../src/Input.js","../src/OutputChannel.js","../src/Output.js","../src/Note.js","../src/WebMidi.js"],"sourcesContent":["class e{constructor(e=!1){this.eventMap={},this.eventsSuspended=1==e}addListener(n,r,i={}){if(\"string\"==typeof n&&n.length<1||n instanceof String&&n.length<1||\"string\"!=typeof n&&!(n instanceof String)&&n!==e.ANY_EVENT)throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");if(\"function\"!=typeof r)throw new TypeError(\"The callback must be a function.\");const s=new t(n,this,r,i);return this.eventMap[n]||(this.eventMap[n]=[]),i.prepend?this.eventMap[n].unshift(s):this.eventMap[n].push(s),s}addOneTimeListener(e,t,n={}){n.remaining=1,this.addListener(e,t,n)}static get ANY_EVENT(){return Symbol.for(\"Any event\")}hasListener(n,r){if(void 0===n)return!!(this.eventMap[e.ANY_EVENT]&&this.eventMap[e.ANY_EVENT].length>0)||Object.entries(this.eventMap).some(([,e])=>e.length>0);if(this.eventMap[n]&&this.eventMap[n].length>0){if(r instanceof t){return this.eventMap[n].filter(e=>e===r).length>0}if(\"function\"==typeof r){return this.eventMap[n].filter(e=>e.callback===r).length>0}return null==r}return!1}get eventNames(){return Object.keys(this.eventMap)}getListeners(e){return this.eventMap[e]||[]}suspendEvent(e){this.getListeners(e).forEach(e=>{e.suspended=!0})}unsuspendEvent(e){this.getListeners(e).forEach(e=>{e.suspended=!1})}getListenerCount(e){return this.getListeners(e).length}emit(t,...n){if(\"string\"!=typeof t&&!(t instanceof String))throw new TypeError(\"The 'event' parameter must be a string.\");if(this.eventsSuspended)return;let r=[],i=this.eventMap[e.ANY_EVENT]||[];return this.eventMap[t]&&(i=i.concat(this.eventMap[t])),i.forEach(e=>{if(e.suspended)return;let t=[...n];Array.isArray(e.arguments)&&(t=t.concat(e.arguments)),e.remaining>0&&(r.push(e.callback.apply(e.context,t)),e.count++),--e.remaining<1&&e.remove()}),r}removeListener(e,t,n={}){if(void 0===e)return void(this.eventMap={});if(!this.eventMap[e])return;let r=this.eventMap[e].filter(e=>t&&e.callback!==t||n.remaining&&n.remaining!==e.remaining||n.context&&n.context!==e.context);r.length?this.eventMap[e]=r:delete this.eventMap[e]}async waitFor(e,t={}){return t.duration=parseInt(t.duration),(isNaN(t.duration)||t.duration<=0)&&(t.duration=1/0),new Promise((n,r)=>{let i,s=this.addListener(e,()=>{clearTimeout(i),n()},{remaining:1});t.duration!==1/0&&(i=setTimeout(()=>{s.remove(),r(\"The duration expired before the event was emitted.\")},t.duration))})}get eventCount(){return Object.keys(this.eventMap).length}}class t{constructor(t,n,r,i={}){if(\"string\"!=typeof t&&!(t instanceof String)&&t!==e.ANY_EVENT)throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");if(!n)throw new ReferenceError(\"The 'target' parameter is mandatory.\");if(\"function\"!=typeof r)throw new TypeError(\"The 'callback' must be a function.\");void 0===i.arguments||Array.isArray(i.arguments)||(i.arguments=[i.arguments]),(i=Object.assign({context:n,remaining:1/0,arguments:void 0,duration:1/0},i)).duration!==1/0&&setTimeout(()=>this.remove(),i.duration),this.event=t,this.target=n,this.callback=r,this.context=i.context,this.remaining=parseInt(i.remaining)>=1?parseInt(i.remaining):1/0,this.count=0,this.arguments=i.arguments,this.suspended=!1}remove(){this.target.removeListener(this.event,this.callback,{context:this.context,remaining:this.remaining})}}export{e as EventEmitter,t as Listener};\n//# sourceMappingURL=djipevents.esm.min.js.map\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {WebMidi} from \"./WebMidi.js\";\n\n/**\n * The `InputChannel` class represents a single input channel (1-16) from an input device. This\n * object is derived from the host's MIDI subsystem and cannot be instantiated directly.\n *\n * All 16 `InputChannel` objects can be found inside the input's [channels]{@link Input#channels}\n * property.\n *\n * The `InputChannel` class extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [addListener()](https://djipco.github.io/djipevents/EventEmitter.html#addListener),\n * [removeListener()](https://djipco.github.io/djipevents/EventEmitter.html#removeListener),\n * [hasListener()](https://djipco.github.io/djipevents/EventEmitter.html#hasListener) and several\n * others.\n *\n * @param {Input} input The `Input` this channel belongs to\n * @param {number} number The channel's number (1-16)\n *\n * @fires InputChannel#midimessage\n * @fires InputChannel#noteoff\n * @fires InputChannel#noteon\n * @fires InputChannel#keyaftertouch\n * @fires InputChannel#controlchange\n * @fires InputChannel#channelmode\n * @fires InputChannel#programchange\n * @fires InputChannel#channelaftertouch\n * @fires InputChannel#pitchbend\n *\n * @since 3.0.0\n */\nexport class InputChannel extends EventEmitter {\n\n  constructor(input, number) {\n\n    super();\n\n    /**\n     * The {@link Input} this channel belongs to\n     * @type {Input}\n     */\n    this.input = input;\n\n    /**\n     * This channel's number (1-16)\n     * @type {number}\n     */\n    this.number = number;\n\n    /**\n     * An array of the current NRPNs being constructed for this channel\n     *\n     * @private\n     *\n     * @type {string[]}\n     */\n    this._nrpnBuffer = [];\n\n    // Enable NRPN events by default\n    this.nrpnEventsEnabled = true;\n\n  }\n\n  destroy() {\n    this.input = null;\n    this.removeListener();\n  }\n\n  /**\n   * @param e Event\n   * @protected\n   */\n  _parseEvent(e) {\n\n    // Extract data bytes (unless it's a sysex message)\n    let dataBytes = null;\n    if (e.data[0] !== WebMidi.MIDI_SYSTEM_MESSAGES.sysex) dataBytes = e.data.slice(1);\n\n    /**\n     * Event emitted when a MIDI message is received on the `InputChannel`\n     *\n     * @event InputChannel#midimessage\n     * @type {Object}\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n     * @property {number} event.statusByte The message's status byte.\n     * @property {?number[]} event.dataBytes The message's data bytes as an array of 0, 1 or 2\n     * integers. This will be null for `sysex` messages.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"midimessage\"`\n     */\n    let midiMessageEvent = {\n      target: this,\n      statusByte: e.data[0],\n      dataBytes: dataBytes,\n      data: e.data,\n      timestamp: e.timeStamp,\n      type: \"midimessage\"\n    };\n\n    this.emit(\"midimessage\", midiMessageEvent);\n\n    // Parse the event to see if its part of an NRPN sequence\n    this._parseEventForNrpnMessage(e);\n\n    // Parse the inbound event for regular messages\n    this._parseEventForStandardMessages(e);\n\n  }\n\n  _parseEventForStandardMessages(e) {\n\n    let command = e.data[0] >> 4;\n    let data1, data2;\n\n    if (e.data.length > 1) {\n      data1 = e.data[1];\n      data2 = e.data.length > 2 ? e.data[2] : undefined;\n    }\n\n    // Returned event\n    let event = {\n      target: this,\n      data: e.data,\n      timestamp: e.timeStamp\n    };\n\n    if (\n      command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.noteoff ||\n      (command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.noteon && data2 === 0)\n    ) {\n\n      /**\n       * Event emitted when a **note off** MIDI message has been received.\n       *\n       * @event InputChannel#noteoff\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"noteoff\"`\n       * @property {Object} note\n       * @property {Object} note.number The MIDI note number.\n       * @property {Object} note.name The usual note name (C, C#, D, D#, etc.).\n       * @property {Object} note.octave The octave (between -2 and 8).\n       * @property {number} release The release velocity expressed as a float between 0 and 1.\n       * @property {number} rawRelease The release velocity expressed as an integer (between 0 and\n       * 127).\n       */\n      event.type = \"noteoff\";\n      event.note = {\n        number: data1,\n        name: WebMidi.NOTES[data1 % 12],\n        octave: WebMidi.getOctave(data1)\n      };\n      event.release = data2 / 127;\n      event.rawRelease = data2;\n\n    } else if (command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.noteon) {\n\n      /**\n       * Event emitted when a **note on** MIDI message has been received.\n       *\n       * @event InputChannel#noteon\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"noteon\"`\n       * @property {Object} note\n       * @property {Object} note.number The MIDI note number.\n       * @property {Object} note.name The usual note name (C, C#, D, D#, etc.).\n       * @property {Object} note.octave The octave (between -2 and 8).\n       * @property {number} attack The attack velocity expressed as a float between 0 and 1.\n       * @property {number} rawAttack The attack velocity expressed as an integer (between 0 and\n       * 127).\n       */\n      event.type = \"noteon\";\n      event.note = {\n        number: data1,\n        name: WebMidi.NOTES[data1 % 12],\n        octave: WebMidi.getOctave(data1)\n      };\n      event.attack = data2 / 127;\n      event.rawVAttack = data2;\n\n    } else if (command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.keyaftertouch) {\n\n      /**\n       * Event emitted when a key-specific aftertouch MIDI message has been received.\n       *\n       * @event InputChannel#keyaftertouch\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"keyaftertouch\"`\n       * @property {Object} note\n       * @property {Object} note.number The MIDI note number.\n       * @property {Object} note.name The usual note name (C, C#, D, D#, etc.).\n       * @property {Object} note.octave The octave (between -2 and 8).\n       * @property {number} value The aftertouch amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The aftertouch amount expressed as an integer (between 0 and\n       * 127).\n       */\n      event.type = \"keyaftertouch\";\n      event.note = {\n        number: data1,\n        name: WebMidi.NOTES[data1 % 12],\n        octave: WebMidi.getOctave(data1)\n      };\n      event.value = data2 / 127;\n      event.rawValue = data2;\n\n    } else if (\n      command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.controlchange &&\n      data1 >= 0 && data1 <= 119\n    ) {\n\n      /**\n       * Event emitted when a control change MIDI message has been received.\n       *\n       * @event InputChannel#controlchange\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"controlchange\"`\n       * @property {Object} controller\n       * @property {Object} controller.number The number of the controller.\n       * @property {Object} controller.name The usual name or function of the controller.\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      event.type = \"controlchange\";\n      event.controller = {\n        number: data1,\n        name: this.getCcNameByNumber(data1)\n      };\n      event.value = data2 / 127;\n      event.rawValue = data2;\n\n    } else if (\n      command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.channelmode &&\n      data1 >= 120 && data1 <= 127\n    ) {\n\n      /**\n       * Event emitted when a channel mode MIDI message has been received.\n       *\n       * @event InputChannel#channelmode\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"channelmode\"`\n       * @property {Object} controller\n       * @property {Object} controller.number The number of the controller.\n       * @property {Object} controller.name The usual name or function of the controller.\n       * @property {number} value The value expressed as a float between 0 and 1.\n       */\n      event.type = \"channelmode\";\n      event.controller = {\n        number: data1,\n        name: this.getChannelModeByNumber(data1)\n      };\n      event.value = data2;\n\n    } else if (command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.programchange) {\n\n      /**\n       * Event emitted when a program change MIDI message has been received.\n       *\n       * @event InputChannel#programchange\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"programchange\"`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       */\n\n      /**\n       * @param {uint} event.value The value received (between 0 and 127).\n       */\n      event.type = \"programchange\";\n      event.value = data1;\n\n    } else if (command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.channelaftertouch) {\n\n      /**\n       * Event emitted when a control change MIDI message has been received.\n       *\n       * @event InputChannel#channelaftertouch\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"channelaftertouch\"`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      event.type = \"channelaftertouch\";\n      event.value = data1 / 127;\n      event.rawValue = data1;\n\n    } else if (command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.pitchbend) {\n\n      /**\n       * Event emitted when a pitch bend MIDI message has been received.\n       *\n       * @event InputChannel#pitchbend\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"pitchbend\"`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 16383).\n       */\n      event.type = \"pitchbend\";\n      event.value = ((data2 << 7) + data1 - 8192) / 8192;\n      event.rawValue = (data2 << 7) + data1;\n\n    } else {\n      event.type = \"unknownmessage\";\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Returns the channel mode name matching the specified number. If no match is found, the function\n   * returns `false`.\n   *\n   * @param {number} number An integer representing the channel mode message.\n   * @returns {string|false} The name of the matching channel mode or `false` if not match could be\n   * found.\n   *\n   * @since 2.0.0\n   */\n  getChannelModeByNumber(number) {\n\n    number = Math.floor(number);\n\n    if ( !(number >= 120 && status <= 127) ) return false;\n\n    for (let cm in WebMidi.MIDI_CHANNEL_MODE_MESSAGES) {\n\n      if (\n        WebMidi.MIDI_CHANNEL_MODE_MESSAGES.hasOwnProperty(cm) &&\n        number === WebMidi.MIDI_CHANNEL_MODE_MESSAGES[cm]\n      ) {\n        return cm;\n      }\n\n    }\n\n  }\n\n  /**\n   * Parses channel events and constructs NRPN message parts in valid sequences.\n   * Keeps a separate NRPN buffer for each channel.\n   * Emits an event after it receives the final CC parts msb 127 lsb 127.\n   * If a message is incomplete and other messages are received before\n   * the final 127 bytes, the incomplete message is cleared.\n   * @param e Event\n   * @private\n   */\n  _parseEventForNrpnMessage(e) {\n\n    if (!this.nrpnEventsEnabled) return;\n\n    // Extract basic data\n    let command = e.data[0] >> 4;\n    let channel = (e.data[0] & 0xf) + 1;\n    let data1;\n    let data2;\n\n    if (e.data.length > 1) {\n      data1 = e.data[1];\n      data2 = e.data.length > 2 ? e.data[2] : undefined;\n    }\n\n    // Message not valid for NRPN\n    if (\n      !(\n        command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.controlchange &&\n        (\n          (\n            data1 >= WebMidi.MIDI_NRPN_MESSAGES.increment &&\n            data1 <= WebMidi.MIDI_NRPN_MESSAGES.parammsb\n          ) ||\n          data1 === WebMidi.MIDI_NRPN_MESSAGES.entrymsb ||\n          data1 === WebMidi.MIDI_NRPN_MESSAGES.entrylsb\n        )\n      )\n    ) {\n      return;\n    }\n\n    // set up a CC event to parse as NRPN part\n    let ccEvent = {\n      target: this,\n      type: \"controlchange\",\n      data: e.data,\n      timestamp: e.timeStamp,\n      channel: channel,\n      controller: {\n        number: data1,\n        name: this.getCcNameByNumber(data1)\n      },\n      value: data2\n    };\n\n    if (\n      // if we get a starting MSB (CC99 - 0-126) vs an end MSB (CC99 - 127), destroy incomplete NRPN\n      // and begin building again\n      ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.parammsb &&\n      ccEvent.value != WebMidi.MIDI_NRPN_MESSAGES.nullactiveparameter\n    ) {\n      this._nrpnBuffer = [];\n      this._nrpnBuffer[0] = ccEvent;\n    } else if(\n      // add the param LSB\n      this._nrpnBuffer.length === 1 &&\n      ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.paramlsb\n    ) {\n      this._nrpnBuffer.push(ccEvent);\n\n    } else if(\n      // add data inc/dec or value MSB for 14bit\n      this._nrpnBuffer.length === 2 &&\n      (ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.increment ||\n        ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.decrement ||\n        ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.entrymsb)\n    ) {\n      this._nrpnBuffer.push(ccEvent);\n    } else if(\n      // if we have a value MSB, only add an LSB to pair with that\n      this._nrpnBuffer.length === 3 &&\n      this._nrpnBuffer[2].number === WebMidi.MIDI_NRPN_MESSAGES.entrymsb &&\n      ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.entrylsb\n    ) {\n      this._nrpnBuffer.push(ccEvent);\n\n    } else if(\n      // add an end MSB (CC99 - 127)\n      this._nrpnBuffer.length >= 3 &&\n      this._nrpnBuffer.length <= 4 &&\n      ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.parammsb &&\n      ccEvent.value === WebMidi.MIDI_NRPN_MESSAGES.nullactiveparameter\n    ) {\n      this._nrpnBuffer.push(ccEvent);\n    } else if(\n      // add an end LSB (CC99 - 127)\n      this._nrpnBuffer.length >= 4 &&\n      this._nrpnBuffer.length <= 5 &&\n      ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.paramlsb &&\n      ccEvent.value === WebMidi.MIDI_NRPN_MESSAGES.nullactiveparameter\n    ) {\n      this._nrpnBuffer.push(ccEvent);\n      // now we have a full inc or dec NRPN message, lets create that event!\n\n      let rawData = [];\n\n      this._nrpnBuffer.forEach(ev => rawData.push(ev.data));\n\n      let nrpnNumber = (this._nrpnBuffer[0].value<<7) | (this._nrpnBuffer[1].value);\n      let nrpnValue = this._nrpnBuffer[2].value;\n      if (this._nrpnBuffer.length === 6) {\n        nrpnValue = (this._nrpnBuffer[2].value<<7) | (this._nrpnBuffer[3].value);\n      }\n\n      let nrpnControllerType = \"\";\n\n      switch (this._nrpnBuffer[2].controller.number) {\n      case WebMidi.MIDI_NRPN_MESSAGES.entrymsb:\n        nrpnControllerType = InputChannel.NRPN_TYPES[0];\n        break;\n      case WebMidi.MIDI_NRPN_MESSAGES.increment:\n        nrpnControllerType = InputChannel.NRPN_TYPES[1];\n        break;\n      case WebMidi.MIDI_NRPN_MESSAGES.decrement:\n        nrpnControllerType = InputChannel.NRPN_TYPES[2];\n        break;\n      default:\n        throw new Error(\"The NPRN type was unidentifiable.\");\n      }\n\n      // now we are done building an NRPN, so clear the NRPN buffer\n      this._nrpnBuffer = [];\n\n      /**\n       * Event emitted when a valid NRPN message sequence has been received.\n       *\n       * @event InputChannel#nrpn\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"nrpn\"`\n       * @property {Object} controller\n       * @property {Object} controller.number The number of the NRPN.\n       * @property {Object} controller.name The usual name or function of the controller.\n       * @property {number} value The aftertouch amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The aftertouch amount expressed as an integer (between 0 and\n       * 65535).\n       */\n      let nrpnEvent = {\n        timestamp: ccEvent.timestamp,\n        channel: ccEvent.channel,\n        type: \"nrpn\",\n        data: rawData,\n        controller: {\n          number: nrpnNumber,\n          type: nrpnControllerType,\n          name: \"Non-Registered Parameter \" + nrpnNumber\n        },\n        value: nrpnValue / 65535,\n        rawValue: nrpnValue\n      };\n\n      this.emit(nrpnEvent.type, nrpnEvent);\n\n    } else {\n      // something didn't match, clear the incomplete NRPN message buffer\n      this._nrpnBuffer = [];\n    }\n  }\n\n  /**\n   * Indicates whether events for **Non-Registered Parameter Number** should be dispatched. NRPNs\n   * are composed of a sequence of specific **control change** messages. When a valid sequence of\n   * such control change messages is received, an `nrpn` event will fire. If an invalid or out of\n   * order control change message is received, it will fall through the collector logic and all\n   * buffered control change messages will be discarded as incomplete.\n   *\n   * @type Boolean\n   */\n  get nrpnEventsEnabled() {\n    return this._nrpnEventsEnabled;\n  }\n  set nrpnEventsEnabled(enabled) {\n    this._nrpnEventsEnabled = !!enabled;\n  }\n\n  /**\n   * Array of valid **non-registered parameter number** (NRPNs) types.\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  static get NRPN_TYPES() {\n    return [\"entry\", \"increment\", \"decrement\"];\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {WebMidi} from \"./WebMidi.js\";\nimport {InputChannel} from \"./InputChannel.js\";\n\n/**\n * The `Input` class represents a MIDI input port. This object is derived from the host's MIDI\n * subsystem and cannot be instantiated directly.\n *\n * You can find a list of all available `Input` objects in the {@link WebMidi#inputs} array.\n *\n * The `Input` class extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [getListeners()](https://djipco.github.io/djipevents/EventEmitter.html#getListeners),\n * [emit()](https://djipco.github.io/djipevents/EventEmitter.html#emit),\n * [suspendEvent()](https://djipco.github.io/djipevents/EventEmitter.html#suspendEvent) and several\n * others.\n *\n * The `addListener()`, `addOneTimeListener()`, `hasListener()` and `removeListener()` methods are\n * being overridden in this class to include a `channel` parameter which makes it possible to\n * add/remove listeners from several channels at once. Note that, when adding events to channels, it\n * is the {@link InputChannel} instance that gets a listener added and not the `Input` instance.\n *\n * Also note that several events are input-wide and not tied to a channel. Examples of these are\n * `\"opened\"`, `\"midimessage\"`, `\"sysex\"`, etc. In such cases, simply pass `undefined` as the\n * `channel` parameter.\n *\n * @param {MIDIInput} midiInput `MIDIInput` object as provided by the MIDI subsystem (Web MIDI API).\n *\n * @fires Input#opened\n * @fires Input#disconnected\n * @fires Input#closed\n * @fires Input#midimessage\n * @fires Input#sysex\n * @fires Input#timecode\n * @fires Input#songposition\n * @fires Input#songselect\n * @fires Input#tunerequest\n * @fires Input#clock\n * @fires Input#start\n * @fires Input#continue\n * @fires Input#stop\n * @fires Input#activesensing\n * @fires Input#reset\n * @fires Input#midimessage\n * @fires Input#unknownmidimessage\n */\nexport class Input extends EventEmitter {\n\n  constructor(midiInput) {\n\n    super();\n\n    /**\n     * Reference to the actual MIDIInput object\n     * @private\n     */\n    this._midiInput = midiInput;\n\n    /**\n     * Array containing the 16 {@link InputChannel} objects available for this `Input`. The\n     * channels are numbered 1 through 16.\n     *\n     * @type {InputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new InputChannel(this, i);\n\n    // Setup listeners\n    this._midiInput.onstatechange = this._onStateChange.bind(this);\n    this._midiInput.onmidimessage = this._onMidiMessage.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Input` by remove all listeners, emptying the `channels` array and unlinking the\n   * MIDI subsystem.\n   *\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    this._midiInput.onstatechange = null;\n    await this.close();\n    this._midiInput = null;\n  }\n\n  /**\n   * Executed when a `\"statechange\"` event occurs.\n   *\n   * @param e\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: WebMidi.time,\n      target: this\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the {@link Input} has been opened by calling the {@link Input#open}\n       * method.\n       *\n       * @event Input#opened\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"opened\"`\n       * @property {Input} target The object that triggered the event\n       */\n      event.type = \"opened\";\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the {@link Input} has been closed by calling the {@link Input#close}\n       * method.\n       *\n       * @event Input#closed\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"closed\"`\n       * @property {Input} target The object that triggered the event\n       */\n      event.type = \"closed\";\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the {@link Input} becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Input#disconnected\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"disconnected\"`\n       * @property {Object} target Object with properties describing the {@link Input} that\n       * triggered the event. This is not the actual `Input` as it is no longer available.\n       * @property {string} target.connection `\"closed\"`\n       * @property {string} target.id ID of the input\n       * @property {string} target.manufacturer Manufacturer of the device that provided the input\n       * @property {string} target.name Name of the device that provided the input\n       * @property {string} target.state `\"disconnected\"`\n       * @property {string} target.type `\"input\"`\n       */\n      event.type = \"disconnected\";\n      event.target = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") {\n      // I don't see the need to forward that...\n    } else {\n      console.warn(\"This statechange event was not caught: \", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Executed when a `\"midimessage\"` event is received\n   * @param e\n   * @private\n   */\n  _onMidiMessage(e) {\n\n    // Extract data bytes (unless it's a sysex message)\n    let dataBytes = null;\n    if (e.data[0] !== WebMidi.MIDI_SYSTEM_MESSAGES.sysex) dataBytes = e.data.slice(1);\n\n    /**\n     * Event emitted when a MIDI message is received on the `Input`\n     *\n     * @event Input#midimessage\n     * @type {Object}\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"midimessage\"`\n     * @property {number} event.statusByte The message's status byte.\n     * @property {?number[]} event.dataBytes The message's data bytes as an array of 0, 1 or 2\n     * integers. This will be null for `sysex` messages.\n     *\n     * @since 2.1\n     */\n    let event = {\n      target: this,\n      data: e.data,\n      statusByte: e.data[0],\n      dataBytes: dataBytes,\n      timestamp: e.timeStamp,\n      type: \"midimessage\"\n    };\n\n    this.emit(\"midimessage\", event);\n\n    // Messages are forwarded to InputChannel if they are targeted at a channel or parsed locally\n    // for system messages.\n    if (e.data[0] < 240) {          // channel-specific message\n      let channel = (e.data[0] & 0xf) + 1;\n      this.channels[channel]._parseEvent(e);\n    } else if (e.data[0] <= 255) {  // system message\n      this._parseEvent(e);\n    }\n\n  }\n\n  /**\n   * @private\n   */\n  _parseEvent(e) {\n\n    let command = e.data[0];\n\n    // Returned event\n    var event = {\n      target: this,\n      data: e.data,\n      timestamp: e.timeStamp\n    };\n\n    if (command === WebMidi.MIDI_SYSTEM_MESSAGES.sysex) {\n\n      /**\n       * Event emitted when a **system exclusive** message has been received. You should note that,\n       * to receive `sysex` events, you must call the `WebMidi.enable()` method with the `sysex`\n       * option set to `true`:\n       *\n       * ```js\n       * WebMidi.enable({sysex: true})\n       *  .then(() => console.log(\"WebMidi has been enabled with sysex support.\"))\n       *  .catch(err => console.log(\"WebMidi could not be enabled.\"))\n       * ```\n       *\n       * @event InputChannel#sysex\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"sysex\"`\n       */\n      event.type = \"sysex\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.timecode) {\n\n      /**\n       * Event emitted when a **time code quarter frame** message has been received.\n       *\n       * @event InputChannel#timecode\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"sysextimecode\"`\n       */\n      event.type = \"timecode\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.songposition) {\n\n      /**\n       * Event emitted when a **song position** message has been received.\n       *\n       * @event InputChannel#songposition\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"songposition\"`\n       */\n      event.type = \"songposition\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.songselect) {\n\n      /**\n       * Event emitted when a **song select** message has been received.\n       *\n       * @event InputChannel#songselect\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"songselect\"`\n       * @property {string} song Song (or sequence) number to select (1-128)\n       */\n      event.type = \"songselect\";\n      event.song = e.data[1] + 1;\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.tunerequest) {\n\n      /**\n       * Event emitted when a **tune request** message has been received.\n       *\n       * @event InputChannel#tunerequest\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"tunerequest\"`\n       */\n      event.type = \"tunerequest\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.clock) {\n\n      /**\n       * Event emitted when a **timing clock** message has been received.\n       *\n       * @event InputChannel#clock\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"clock\"`\n       */\n      event.type = \"clock\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.start) {\n\n      /**\n       * Event emitted when a **start** message has been received.\n       *\n       * @event InputChannel#start\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"start\"`\n       */\n      event.type = \"start\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.continue) {\n\n      /**\n       * Event emitted when a **continue** message has been received.\n       *\n       * @event InputChannel#continue\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"continue\"`\n       */\n      event.type = \"continue\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.stop) {\n\n      /**\n       * Event emitted when a **stop** message has been received.\n       *\n       * @event InputChannel#stop\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"stop\"`\n       */\n      event.type = \"stop\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.activesensing) {\n\n      /**\n       * Event emitted when an **active sensing** message has been received.\n       *\n       * @event InputChannel#activesensing\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"activesensing\"`\n       */\n      event.type = \"activesensing\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.reset) {\n\n      /**\n       * Event emitted when a **reset** message has been received.\n       *\n       * @event InputChannel#reset\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"reset\"`\n       */\n      event.type = \"reset\";\n\n    } else {\n\n      /**\n       * Event emitted when an unknown MIDI message has been received. It could be, for example, one\n       * of the undefined/reserved messages.\n       *\n       * @event InputChannel#unknownmidimessage\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"unknownmidimessage\"`\n       */\n      event.type = \"unknownmidimessage\";\n\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Opens the input for usage.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input`\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when assigning a listener to the\n    // `onmidimessage` property of the `MIDIInput`. We do it explicitly so that 'connected' events\n    // are dispatched immediately and that we are ready to listen.\n    try {\n      await this._midiInput.open();\n      return Promise.resolve(this);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n  }\n\n  /**\n   * Closes the input. When an input is closed, it cannot be used to listen to MIDI messages until\n   * the input is opened again by calling [Input.open()]{@link Input#open}.\n   *\n   * @returns {Promise<void|*>}\n   */\n  async close() {\n\n    // We close the port. This triggers a statechange event which, in turn, will emit the 'closed'\n    // event.\n    if (this._midiInput) {\n      return this._midiInput.close();\n    } else {\n      return Promise.resolve();\n    }\n\n  }\n\n  /**\n   * Returns the name of a control change message matching the specified number. If no match is\n   * found, the function returns `false`.\n   *\n   * @param {number} number An integer representing the control change message\n   * @returns {string|false} The matching control change name or `false` if not match was found\n   *\n   * @since 2.0.0\n   */\n  getCcNameByNumber(number) {\n\n    number = Math.floor(number);\n\n    if ( !(number >= 0 && number <= 119) ) return false;\n\n    for (let cc in WebMidi.MIDI_CONTROL_CHANGE_MESSAGES) {\n\n      if (\n        WebMidi.MIDI_CONTROL_CHANGE_MESSAGES.hasOwnProperty(cc) &&\n        number === WebMidi.MIDI_CONTROL_CHANGE_MESSAGES[cc]\n      ) {\n        return cc;\n      }\n\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Adds an event listener that will trigger a function callback when the specified event happens.\n   * The events that are listened to can be channel-specific or input-wide.\n   *\n   * This method overrides the one in\n   * [djipevents.EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html#addListener)\n   * by adding a `channel` parameter that makes it possible to add a listener to one or several\n   * channels at once. Invalid channels will be silently ignored.\n   *\n   * If you want to add a listener to a single channel, use\n   * [InputChannel.addListener()]{@link InputChannel#addListener()} instead.\n   *\n   * Here is a list of events that are directly dispatched by `Input` objects and that can be\n   * listened to:\n   *\n   *    * [sysex]{@link Input#event:sysex}\n   *    * [timecode]{@link Input#event:timecode}\n   *    * [songposition]{@link Input#event:songposition}\n   *    * [songselect]{@link Input#event:songselect}\n   *    * [tunerequest]{@link Input#event:tunerequest}\n   *    * [clock]{@link Input#event:clock}\n   *    * [start]{@link Input#event:start}\n   *    * [continue]{@link Input#event:continue}\n   *    * [stop]{@link Input#event:stop}\n   *    * [activesensing]{@link Input#event:activesensing}\n   *    * [reset]{@link Input#event:reset}\n   *    * [midimessage]{@link Input#event:midimessage}\n   *    * [unknownmidimessage]{@link Input#event:unknownmidimessage}\n   *\n   *  For these input-wide events, the `channel` parameter will be silently ignored. You can simply\n   *  use `undefined` in that case.\n   *\n   * If you want to view all incoming MIDI traffic, you can listen to the `midimessage` event. This\n   * event is dispatched for every single message that is received on that `Input`.\n   *\n   * By using the `channel` property, you can also add listeners to all channels in the `channel`\n   * parameter. These are the events dispatched by individual {@link InputChannel} objects:\n   *\n   *    * [noteoff]{@link InputChannel#event:noteoff}\n   *    * [noteon]{@link InputChannel#event:noteon}\n   *    * [keyaftertouch]{@link InputChannel#event:keyaftertouch}\n   *    * [controlchange]{@link InputChannel#event:controlchange}\n   *    * [nrpn]{@link InputChannel#event:nrpn}\n   *    * [channelmode]{@link InputChannel#event:channelmode}\n   *    * [programchange]{@link InputChannel#event:programchange}\n   *    * [channelaftertouch]{@link InputChannel#event:channelaftertouch}\n   *    * [pitchbend]{@link InputChannel#event:pitchbend}\n   *    * [midimessage]{@link InputChannel#event:midimessage}\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param channel {number|number[]|undefined} An integer between 1 and 16 or an array of such\n   * integers representing the channel(s) to listen on. This parameter will be ignored for\n   * input-wide events (just set it to `undefined` in such cases).\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object\"s properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {Object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.remaining=Infinity] The number of times after which the callback\n   * should automatically be removed.\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [**arguments**]{@link Listener#arguments}\n   * property of the [**Listener**]{@link Listener} object and can be retrieved or modified as\n   * desired.\n   *\n   * @throws {TypeError} The callback must be a function.\n   * @throws {TypeError} The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\n   *\n   * @return {Listener[]} An array of all `Listener` objects that were created.\n   */\n  addListener(event, channel, listener, options) {\n\n    let listeners = [];\n\n    if (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES[event] === undefined) {\n      listeners.push(super.addListener(event, listener, options));\n    } else {\n      WebMidi.sanitizeChannels(channel).forEach(ch => {\n        listeners.push(this.channels[ch].addListener(event, listener, options));\n      });\n    }\n\n    return listeners;\n\n  }\n\n  /**\n   * Adds a one-time event listener that will trigger a function callback when the specified event\n   * happens. The events that are dispatched can be channel-specific or input-wide.\n   *\n   * This method overrides the one in `djipevents.EventEmitter` by adding a `channel` parameter that\n   * makes it possible to add a single listener to one or several channels at once. If you want to\n   * add a listener to a single channel, use\n   * [InputChannel.addListener()]{@link InputChannel#addListener()} instead.\n   *\n   * Here is a list of events that are dispatched by `Input` objects and that can be listened to.\n   *\n   * Channel-specific MIDI events:\n   *\n   *    * [noteoff]{@link InputChannel#event:noteoff}\n   *    * [noteon]{@link InputChannel#event:noteon}\n   *    * [keyaftertouch]{@link InputChannel#event:keyaftertouch}\n   *    * [controlchange]{@link InputChannel#event:controlchange}\n   *    * [nrpn]{@link InputChannel#event:nrpn}\n   *    * [channelmode]{@link InputChannel#event:channelmode}\n   *    * [programchange]{@link InputChannel#event:programchange}\n   *    * [channelaftertouch]{@link InputChannel#event:channelaftertouch}\n   *    * [pitchbend]{@link InputChannel#event:pitchbend}\n   *    * [midimessage]{@link InputChannel#event:midimessage}\n   *\n   * Input-level MIDI events:\n   *\n   *    * [sysex]{@link Input#event:sysex}\n   *    * [timecode]{@link Input#event:timecode}\n   *    * [songposition]{@link Input#event:songposition}\n   *    * [songselect]{@link Input#event:songselect}\n   *    * [tunerequest]{@link Input#event:tunerequest}\n   *    * [clock]{@link Input#event:clock}\n   *    * [start]{@link Input#event:start}\n   *    * [continue]{@link Input#event:continue}\n   *    * [stop]{@link Input#event:stop}\n   *    * [activesensing]{@link Input#event:activesensing}\n   *    * [reset]{@link Input#event:reset}\n   *    * [midimessage]{@link Input#event:midimessage}\n   *    * [unknownmidimessage]{@link Input#event:unknownmidimessage}\n   *\n   * For input-wide events, the `channel` parameter will be silently ignored. You can simply use\n   * `undefined` in that case.\n   *\n   * If you want to view all incoming MIDI traffic, you can listen to the input-level `midimessage`\n   * event. This event is dispatched for every single message that is received on that input.\n   *\n   * @param type {string} The type of the event.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object\"s properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {Object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [**arguments**]{@link Listener#arguments}\n   * property of the [**Listener**]{@link Listener} object and can be retrieved or modified as\n   * desired.\n   *\n   * @throws {RangeError} The \"channel\" parameter is invalid.\n   * @throws {TypeError} The \"listener\" parameter must be a function.\n   * @throws {TypeError} The specified event type is not supported.\n   *\n   * @return {Listener[]} An array of all `Listener` objects that were created.\n   *\n   * @since 3.0.0\n   */\n  addOneTimeListener(type, channel, listener, options = {}) {\n    options.remaining = 1;\n    return this.addListener(type, channel, listener, options);\n  }\n\n  /**\n   * This is an alias to the [Input.addListener()]{@link Input#addListener} method.\n   * @since 2.0.0\n   * @deprecated since v3.0\n   * @private\n   */\n  on(type, channel, listener, options) {\n    return this.addListener(type, channel, listener, options);\n  }\n\n  /**\n   * Checks if the specified event type is already defined to trigger the listener function on the\n   * specified channel(s). If more than one channel is specified, the function will return `true`\n   * only if all channels have the listener defined.\n   *\n   * For input-level events (`sysex`, `start`, etc.), the `channel` parameter is silently ignored.\n   * We suggest you use `undefined` in such cases.\n   *\n   * This method overrides the one in\n   * [djipevents.EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html#hasListener)\n   * by adding a `channel` parameter that makes it possible to check for the listener on one or\n   * several channels at once. Invalid channels will be silently ignored.\n   *\n   * @param type {string} The type of the event.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param listener {function} The callback function to check for.\n   *\n   * @throws {TypeError} The \"listener\" parameter must be a function.\n   *\n   * @returns {Boolean} Boolean value indicating whether or not the channel(s) already have this\n   * listener defined.\n   */\n  hasListener(type, channel, listener) {\n\n    if (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES[type] !== undefined) {\n\n      return WebMidi.sanitizeChannels(channel).every(ch => {\n        return this.channels[ch].hasListener(type, listener);\n      });\n\n    } else {\n      return super.hasListener(type, listener);\n    }\n\n  }\n\n  /**\n   * Removes the specified listener from the specified channel(s). If the `listener` parameter is\n   * left undefined, all listeners for the specified `type` will be removed from all channels. If\n   * the `channel` is also omitted, all listeners of the specified type will be removed from all\n   * channels. If no parameters are defined, all listeners attached to any channel of the `Input`\n   * will be removed.\n   *\n   * For input-level events (`sysex`, `start`, etc.), the `channel` parameter is silently ignored.\n   * You can use `undefined` in such cases.\n   *\n   * This method overrides the one in\n   * [djipevents.EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html#removeListener)\n   * by adding a `channel` parameter that makes it possible to remove a listener from one or several\n   * channels at once. Invalid channels will be silently ignored.\n   *\n   * @param [type] {String} The type of the event.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param [listener] {Function} The callback function to check for.\n   *\n   * @param {Object} [options={}]\n   * @param {*} [options.context] Only remove the listeners that have this exact context.\n   * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n   * remaining times to be executed.\n   *\n   * @throws {TypeError} The specified event type is not supported.\n   * @throws {TypeError} The \"listener\" parameter must be a function..\n   */\n  removeListener(type, channel, listener, options) {\n\n    if (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES[type] !== undefined) {\n      WebMidi.sanitizeChannels(channel).forEach(ch => {\n        this.channels[ch].removeListener(type, listener, options);\n      });\n    } else if (type != undefined) {\n      return super.removeListener(type, listener, options);\n    } else if (type == undefined) {\n      return super.removeListener();\n    }\n\n  }\n\n  /**\n   * Name of the MIDI input\n   *\n   * @property name\n   * @type String\n   */\n  get name() {\n    return this._midiInput.name;\n  }\n\n  /**\n   * ID string of the MIDI port. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiInput.id;\n  }\n\n  /**\n   * Input port's connection state: `\"pending\"`, `\"open\"` or `\"closed\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiInput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this input port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiInput.manufacturer;\n  }\n\n  /**\n   * State of the input port: `\"connected\"` or `\"disconnected\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiInput.state;\n  }\n\n  /**\n   * Type of the input port (`\"input\"`)\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiInput.type;\n  }\n\n  /**\n   * @type {boolean}\n   * @private\n   * @deprecated since v3.0.0 (moved to 'InputChannel' class)\n   */\n  get nrpnEventsEnabled() {\n    console.warn(\"The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class.\");\n    return false;\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {WebMidi} from \"./WebMidi.js\";\n\n/**\n * The `OutputChannel` class represents a single output channel (1-16) from an output device. This\n * object is derived from the host's MIDI subsystem and cannot be instantiated directly.\n *\n * All 16 `OutputChannel` objects can be found inside the output's [channels]{@link Output#channels}\n * property.\n *\n * The `OutputChannel` class extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [addListener()](https://djipco.github.io/djipevents/EventEmitter.html#addListener),\n * [removeListener()](https://djipco.github.io/djipevents/EventEmitter.html#removeListener),\n * [hasListener()](https://djipco.github.io/djipevents/EventEmitter.html#hasListener) and several\n * others.\n *\n * @param {Output} output The output this channel belongs to\n * @param {number} number The channel's number (1-16)\n *\n * @since 3.0.0\n */\nexport class OutputChannel extends EventEmitter {\n\n  constructor(output, number) {\n\n    super();\n\n    /**\n     * The {@link Output} this channel belongs to\n     * @type {Output}\n     */\n    this.output = output;\n\n    /**\n     * The channel's number (1-16)\n     * @type {number}\n     */\n    this.number = number;\n\n  }\n\n  destroy() {\n    this.output = null;\n    this.removeListener();\n  }\n\n  /**\n   * Sends a MIDI message at the scheduled timestamp. It is usually not necessary to use this method\n   * directly as you can use one of the simpler helper methods such as `playNote()`, `stopNote()`,\n   * `sendControlChange()`, etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param status {Number} The MIDI status byte of the message (128-255). This is a combination of\n   * the command and the channel.\n   *\n   * @param [data=[]] {Array} An array of unsigned integers for the message. The number of data\n   * bytes varies depending on the status byte. It is perfectly legal to send no data for some\n   * message types (use `undefined` or an empty array in this case). Each byte must be between 0 and\n   * 255.\n   *\n   * @param [timestamp=0] {number} The timestamp (DOMHighResTimeStamp) at which to send the message.\n   * You can use [WebMidi.time]{@link WebMidi#time} to retrieve the current timestamp. To send\n   * immediately, leave blank or use 0.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 0 is greater\n   * than 0xFF.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 2 is greater\n   * than 0xFF.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Running status is not allowed at\n   * index 2.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Message is incomplete.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Reserved status is not allowed at\n   * index 0.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': System exclusive message is not\n   * allowed at index 0.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Unexpected end of system\n   * exclusive message at index 0.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Unexpected status byte at index\n   * 1.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Unexpected status byte at index\n   * 2.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  send(status, data = [], timestamp) {\n    this.output.send(status, data, timestamp);\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message at the scheduled time. This is a key-specific\n   * aftertouch. For a channel-wide aftertouch message, use\n   * [setChannelAftertouch()]{@link Output#setChannelAftertouch}.\n   *\n   * @param note {number|string|Array}  The note for which you are sending an aftertouch value. The\n   * notes can be specified in one of two ways. The first way is by using the MIDI note number (an\n   * integer between 0 and 127). The second way is by using the note name followed by the octave\n   * (C3, G#4, F-1, Db7). The octave range should be between -1 and 9. The lowest note is C-1 (MIDI\n   * note number 0) and the highest note is G9 (MIDI note number 127). It is also possible to use\n   * an array of note names and/or numbers.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `useRawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.useRawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setKeyAftertouch(note, pressure, options = {}) {\n\n    // Validation\n    pressure = parseFloat(pressure);\n    if (isNaN(pressure)) pressure = 0.5;\n    if (options.useRawValue) pressure = pressure / 127;\n    if (pressure < 0 || pressure > 1) {\n      throw new RangeError(\"Pressure value must be between 0 and 1.\");\n    }\n\n    WebMidi.getValidNoteArray(note).forEach(n => {\n\n      this.send(\n        (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.keyaftertouch << 4) + (this.number - 1),\n        [n.number, Math.round(pressure * 127)],\n        WebMidi.convertToTimestamp(options.time)\n      );\n\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **control change** message to the channel at the scheduled time. The control\n   * change message to send can be specified numerically or by using one of the following common\n   * names:\n   *\n   *  * `bankselectcoarse` (#0)\n   *  * `modulationwheelcoarse` (#1)\n   *  * `breathcontrollercoarse` (#2)\n   *  * `footcontrollercoarse` (#4)\n   *  * `portamentotimecoarse` (#5)\n   *  * `dataentrycoarse` (#6)\n   *  * `volumecoarse` (#7)\n   *  * `balancecoarse` (#8)\n   *  * `pancoarse` (#10)\n   *  * `expressioncoarse` (#11)\n   *  * `effectcontrol1coarse` (#12)\n   *  * `effectcontrol2coarse` (#13)\n   *  * `generalpurposeslider1` (#16)\n   *  * `generalpurposeslider2` (#17)\n   *  * `generalpurposeslider3` (#18)\n   *  * `generalpurposeslider4` (#19)\n   *  * `bankselectfine` (#32)\n   *  * `modulationwheelfine` (#33)\n   *  * `breathcontrollerfine` (#34)\n   *  * `footcontrollerfine` (#36)\n   *  * `portamentotimefine` (#37)\n   *  * `dataentryfine` (#38)\n   *  * `volumefine` (#39)\n   *  * `balancefine` (#40)\n   *  * `panfine` (#42)\n   *  * `expressionfine` (#43)\n   *  * `effectcontrol1fine` (#44)\n   *  * `effectcontrol2fine` (#45)\n   *  * `holdpedal` (#64)\n   *  * `portamento` (#65)\n   *  * `sustenutopedal` (#66)\n   *  * `softpedal` (#67)\n   *  * `legatopedal` (#68)\n   *  * `hold2pedal` (#69)\n   *  * `soundvariation` (#70)\n   *  * `resonance` (#71)\n   *  * `soundreleasetime` (#72)\n   *  * `soundattacktime` (#73)\n   *  * `brightness` (#74)\n   *  * `soundcontrol6` (#75)\n   *  * `soundcontrol7` (#76)\n   *  * `soundcontrol8` (#77)\n   *  * `soundcontrol9` (#78)\n   *  * `soundcontrol10` (#79)\n   *  * `generalpurposebutton1` (#80)\n   *  * `generalpurposebutton2` (#81)\n   *  * `generalpurposebutton3` (#82)\n   *  * `generalpurposebutton4` (#83)\n   *  * `reverblevel` (#91)\n   *  * `tremololevel` (#92)\n   *  * `choruslevel` (#93)\n   *  * `celestelevel` (#94)\n   *  * `phaserlevel` (#95)\n   *  * `databuttonincrement` (#96)\n   *  * `databuttondecrement` (#97)\n   *  * `nonregisteredparametercoarse` (#98)\n   *  * `nonregisteredparameterfine` (#99)\n   *  * `registeredparametercoarse` (#100)\n   *  * `registeredparameterfine` (#101)\n   *\n   * Note: as you can see above, not all control change message have a matching common name. This\n   * does not mean you cannot use the others. It simply means you will need to use their number\n   * instead of their name.\n   *\n   * To view a detailed list of all available **control change** messages, please consult \"Table 3 -\n   * Control Change Messages\" from the [MIDI Messages](\n   * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\n   * specification.\n   *\n   * @param {number|string} controller The MIDI controller name or number (0-119).\n   *\n   * @param {number} [value=0] The value to send (0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 119.\n   * @throws {RangeError} Invalid controller name.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendControlChange(controller, value, options = {}) {\n\n    if (typeof controller === \"string\") {\n\n      controller = WebMidi.MIDI_CONTROL_CHANGE_MESSAGES[controller];\n      if (controller === undefined) throw new TypeError(\"Invalid controller name.\");\n\n    } else {\n\n      controller = Math.floor(controller);\n      if (!(controller >= 0 && controller <= 119)) {\n        throw new RangeError(\"Controller numbers must be between 0 and 119.\");\n      }\n\n    }\n\n    this.send(\n      (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.controlchange << 4) + (this.number - 1),\n      [controller, value],\n      WebMidi.convertToTimestamp(options.time)\n    );\n\n    return this;\n\n  };\n\n  /**\n   * Selects a MIDI non-registered parameter so it is affected by data entry, data increment and\n   * data decrement messages.\n   *\n   * @private\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes (0x63, 0x62)\n   * that identify the registered parameter.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   */\n  _selectNonRegisteredParameter(parameter, time) {\n\n    parameter[0] = Math.floor(parameter[0]);\n    if (!(parameter[0] >= 0 && parameter[0] <= 127)) {\n      throw new RangeError(\"The control63 value must be between 0 and 127.\");\n    }\n\n    parameter[1] = Math.floor(parameter[1]);\n    if (!(parameter[1] >= 0 && parameter[1] <= 127)) {\n      throw new RangeError(\"The control62 value must be between 0 and 127.\");\n    }\n\n    this.sendControlChange(0x63, parameter[0], {time: time});\n    this.sendControlChange(0x62, parameter[1], {time: time});\n\n  };\n\n  /**\n   * Deselects the currently active MIDI registered parameter so it is no longer affected by data\n   * entry, data increment and data decrement messages.\n   *\n   * Current best practice recommends doing that after each call to\n   * [_setCurrentRegisteredParameter()]{@link Output#_setCurrentRegisteredParameter}.\n   *\n   * @private\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   */\n  _deselectRegisteredParameter(time) {\n    this.sendControlChange(0x65, 0x7F, {time: time});\n    this.sendControlChange(0x64, 0x7F, {time: time});\n  };\n\n  /**\n   * Selects a MIDI registered parameter so it is affected by data entry, data increment and data\n   * decrement messages.\n   *\n   * @private\n   *\n   * @param parameter {Array} A two-position array specifying the two control bytes (0x65, 0x64)\n   * that identify the registered parameter.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   */\n  _selectRegisteredParameter(parameter, time) {\n\n    parameter[0] = Math.floor(parameter[0]);\n    if (!(parameter[0] >= 0 && parameter[0] <= 127)) {\n      throw new RangeError(\"The control65 value must be between 0 and 127\");\n    }\n\n    parameter[1] = Math.floor(parameter[1]);\n    if (!(parameter[1] >= 0 && parameter[1] <= 127)) {\n      throw new RangeError(\"The control64 value must be between 0 and 127\");\n    }\n\n    this.sendControlChange(0x65, parameter[0], {time: time});\n    this.sendControlChange(0x64, parameter[1], {time: time});\n\n  };\n\n  /**\n   * Sets the value of the currently selected MIDI registered parameter.\n   *\n   * @private\n   *\n   * @param data {number|number[]}\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   */\n  _setCurrentRegisteredParameter(data, time) {\n\n    data = [].concat(data);\n\n    // MSB\n    data[0] = parseInt(data[0]);\n    if (!isNaN(data[0]) && data[0] >= 0 && data[0] <= 127) {\n      this.sendControlChange(0x06, data[0], {time: time});\n    } else {\n      throw new RangeError(\"The msb value must be between 0 and 127.\");\n    }\n\n    if (data.length < 2) return this;\n\n    // LSB\n    data[1] = parseInt(data[1]);\n\n    if (!isNaN(data[1]) && data[1] >= 0 && data[1] <= 127) {\n      this.sendControlChange(0x26, data[1], {time: time});\n    } else {\n      throw new RangeError(\"The lsb value must be between 0 and 127.\");\n    }\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified parameter is not available.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  decrementRegisteredParameter(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) {\n      if (!WebMidi.MIDI_REGISTERED_PARAMETER[parameter]) {\n        throw new TypeError(\"The specified parameter is not available.\");\n      }\n      parameter = WebMidi.MIDI_REGISTERED_PARAMETER[parameter];\n    }\n\n    this._selectRegisteredParameter(parameter, this.number, options.time);\n    this.sendControlChange(0x61, 0, this.number, {time: options.time});\n    this._deselectRegisteredParameter(options.time);\n\n    return this;\n\n  };\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified parameter is not available.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  incrementRegisteredParameter(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) {\n      if (!WebMidi.MIDI_REGISTERED_PARAMETER[parameter]) {\n        throw new TypeError(\"The specified parameter is not available.\");\n      }\n      parameter = WebMidi.MIDI_REGISTERED_PARAMETER[parameter];\n    }\n\n    this._selectRegisteredParameter(parameter, options.time);\n    this.sendControlChange(0x60, 0, {time: options.time});\n    this._deselectRegisteredParameter(options.time);\n\n    return this;\n\n  }\n\n  /**\n   * Plays a note or an array of notes on the channel. The first parameter is the note to play. It\n   * can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes on all\n   * specified channels. If a `duration` is set in the `options` parameter or in the {@link Note}\n   * object's [duration]{@link Note#duration} property, it will also schedule a **note off** message\n   * to end the note after said duration. If no `duration` is set, the note will simply play until\n   * a matching **note off** message is sent with [stopNote()]{@link OutputChannel#stopNote} or\n   * [sendNoteOff()]{@link OutputChannel#sendNoteOff}.\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the durations and velocities defined in the {@link Note}\n   * objects have precedence over the ones specified via the method's `options` parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.duration=undefined] The number of milliseconds (integer) after which a\n   * **note off** message will be scheduled. If left undefined, only a **note on** message is sent.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity\n   * value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=0.5] The attack velocity at which to play the note (between\n   * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will\n   * silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`. This is only used with the\n   * **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number} [options.rawRelease=0.5] The velocity at which to release the note (between `0`\n   * and `127`). This has priority over the `release` property. An invalid velocity value will\n   * silently trigger the default of `0.5`. This is only used with the **note off** event triggered\n   * when `options.duration` is set.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  playNote(note, options = {}) {\n\n    // Send note on and, optionally, note off message (if duration is a positive number)\n    this.sendNoteOn(note, options);\n\n    // https://stackoverflow.com/questions/600763#answer-601877\n    if (options.duration > 0 && isFinite(String(options.duration).trim() || NaN)) {\n      this.sendNoteOff(note, options);\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified notes on the channel. The first parameter is the\n   * note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   *  The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the release velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=0.5] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOff(note, options) {\n\n    // Compatibility warning\n    if (options.rawVelocity) {\n      options.rawRelease = options.velocity;\n      console.warn(\n        \"The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.\"\n      );\n    }\n    if (options.velocity) {\n      options.release = options.velocity;\n      console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n    }\n\n    let nVelocity = 64;\n\n    options = options || {};\n\n    if (options.rawRelease) {\n      if (\n        !isNaN(options.rawRelease) &&\n        options.rawRelease >= 0\n        && options.rawRelease <= 127\n      ) {\n        nVelocity = options.rawRelease;\n      }\n    } else {\n      if (\n        !isNaN(options.release) &&\n        options.release >= 0 &&\n        options.release <= 1\n      ) {\n        nVelocity = options.release * 127;\n      }\n    }\n\n    // Send note off messages\n    let o = {rawRelease: nVelocity};\n\n    WebMidi.getValidNoteArray(note, o).forEach(n => {\n      this.send(\n        (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.noteoff << 4) + (this.number - 1),\n        [n.number, n.rawRelease],\n        WebMidi.convertToTimestamp(options.time)\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * This is an alias to the [sendNoteOff()]{@link OutputChannel#sendNoteOff} method.\n   *\n   * @see {@link OutputChannel#sendNoteOff}\n   *\n   * @param note\n   * @param options\n   * @returns {Output}\n   */\n  stopNote(note, options) {\n    return this.sendNoteOff(note, options);\n  }\n\n  /**\n   * Sends a **note on** message for the specified notes on the channel. The first parameter is the\n   * note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the attack velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter. Also, the `duration` is\n   * ignored. If you want to also send a **note off** message, use the\n   * [playNote()]{@link Output#playNote} method instead.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=0.5] The velocity at which to release the note (between `0`\n   * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOn(note, options = {}) {\n\n    // Compatibility warnings\n    if (options.rawVelocity) {\n      options.rawAttack = options.velocity;\n      options.rawRelease = options.release;\n      console.warn(\n        \"The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease' instead.\"\n      );\n    }\n    if (options.velocity) {\n      options.attack = options.velocity;\n      console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n    }\n\n    let nVelocity = 64;\n\n    if (options.rawAttack) {\n      if (\n        !isNaN(options.attack) &&\n        options.attack >= 0 &&\n        options.attack <= 127\n      ) {\n        nVelocity = options.attack;\n      }\n    } else {\n      if (\n        !isNaN(options.attack) &&\n        options.attack >= 0 &&\n        options.attack <= 1\n      ) {\n        nVelocity = options.attack * 127;\n      }\n    }\n\n    let o = {rawAttack: nVelocity};\n\n    WebMidi.getValidNoteArray(note, o).forEach(n => {\n      this.send(\n        (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.noteon << 4) + (this.number - 1),\n        [n.number, n.rawAttack],\n        WebMidi.convertToTimestamp(options.time)\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel mode** message. The channel mode message to send can be specified\n   * numerically or by using one of the following common names:\n   *\n   *   * `\"allsoundoff\"` (#120)\n   *   * `\"resetallcontrollers\"` (#121)\n   *   * `\"localcontrol\"` (#122)\n   *   * `\"allnotesoff\"` (#123)\n   *   * `\"omnimodeoff\"` (#124)\n   *   * `\"omnimodeon\"` (#125)\n   *   * `\"monomodeon\"` (#126)\n   *   * `\"polymodeon\"` (#127)\n   *\n   * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\n   * require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * To make it easier, all channel mode messages have a matching helper method:\n   *\n   *   - [turnSoundOff()]{@link Output#turnSoundOff}\n   *   - [resetAllControllers()]{@link Output#resetAllControllers}\n   *   - [setLocalControl()]{@link Output#turnSoundOff}\n   *   - [turnNotesOff()]{@link Output#turnNotesOff}\n   *   - [setOmniMode()]{@link Output#setOmniMode}\n   *   - [setPolyphonicMode()]{@link Output#setPolyphonicMode}\n   *\n   * @param command {number|string} The numerical identifier of the channel mode message (integer\n   * between 120-127) or its name as a string.\n   *\n   * @param [value] {number} The value to send (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendChannelMode(command, value, options = {}) {\n\n    if (typeof command === \"string\") {\n      command = WebMidi.MIDI_CHANNEL_MODE_MESSAGES[command];\n    } else {\n      command = parseInt(command);\n    }\n\n    if (isNaN(command) || !(command >= 120 && command <= 127)) {\n      throw new TypeError(\"Invalid channel mode message name or number.\");\n    }\n\n    value = parseInt(value) || 0;\n\n    if (value < 0 || value > 127) {\n      throw new RangeError(\"Value must be an integer between 0 and 127.\");\n    }\n\n    this.send(\n      (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.channelmode << 4) + (this.number - 1),\n      [command, value],\n      WebMidi.convertToTimestamp(options.time)\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to `\"on\"` or `\"off\"`. MIDI's OMNI mode causes the instrument to respond to\n   * messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state=true] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setOmniMode(state, options = {}) {\n\n    if (state === undefined || state) {\n      this.sendChannelMode(\"omnimodeon\", 0, options);\n    } else {\n      this.sendChannelMode(\"omnimodeoff\", 0, options);\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message. For key-specific aftertouch, you should instead\n   * use [setKeyAftertouch()]{@link Output#setKeyAftertouch}.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setChannelAftertouch(pressure, options = {}) {\n\n    // Validation\n    pressure = parseFloat(pressure);\n    if (isNaN(pressure)) pressure = 0.5;\n    if (options.rawValue) pressure = pressure / 127;\n    if (pressure < 0 || pressure > 1) {\n      throw new RangeError(\"Pitch bend value must be between 0 and 1.\");\n    }\n\n    this.send(\n      (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.channelaftertouch << 4) + (this.number - 1),\n      [Math.round(pressure * 127)],\n      WebMidi.convertToTimestamp(options.time)\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **master tuning** message. The value is decimal and must be larger than -65 semitones\n   * and smaller than 64 semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setMasterTuning(value, options = {}) {\n\n    value = parseFloat(value) || 0.0;\n\n    if (value <= -65 || value >= 64) {\n      throw new RangeError(\n        \"The value must be a decimal number larger than -65 and smaller than 64.\"\n      );\n    }\n\n    let coarse = Math.floor(value) + 64;\n    let fine = value - Math.floor(value);\n\n    // Calculate MSB and LSB for fine adjustment (14bit resolution)\n    fine = Math.round((fine + 1) / 2 * 16383);\n    let msb = (fine >> 7) & 0x7F;\n    let lsb = fine & 0x7F;\n\n    this.setRegisteredParameter(\"channelcoarsetuning\", coarse, {time: options.time});\n    this.setRegisteredParameter(\"channelfinetuning\", [msb, lsb], {time: options.time});\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to adjust the depth of the modulation wheel's range.\n   * The range can be specified with the `semitones` parameter, the `cents` parameter or by\n   * specifying both parameters at the same time.\n   *\n   * @param [semitones=0] {number} The desired adjustment value in semitones (integer between\n   * 0 and 127).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127\n   * @throws {RangeError} The lsb value must be between 0 and 127\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setModulationRange(semitones, cents, options = {}) {\n\n    this.setRegisteredParameter(\n      \"modulationrange\", [semitones, cents], {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter (NRPN) to the specified value. The NRPN is selected by passing\n   * in a two-position array specifying the values of the two control bytes. The value is specified\n   * by passing in a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\n   * would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].setNonRegisteredParameter([1, 8], 123);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was 10, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].setNonRegisteredParameter([2, 63], [0, 10]);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer's documentation.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes (0x63,\n   * 0x62) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setNonRegisteredParameter(parameter, data, options = {}) {\n\n    data = [].concat(data);\n\n    this._selectNonRegisteredParameter(parameter, this.number, options.time);\n    this._setCurrentRegisteredParameter(data, this.number, options.time);\n    this._deselectRegisteredParameter(options.time);\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message at the scheduled time.\n   *\n   * @param value {number} The intensity level of the bend (between -1.0 and 1.0). A value of zero\n   * means no bend. If the `rawValue` option is set to `true`, the intensity can be defined by using\n   * an integer between 0 and 127. In this case, a value of 64 means no bend. The range of the pitch\n   * bend can be set with [setPitchBendRange()]{@link OutputChannel#setPitchBendRange}.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between -1.0 and 1.0 (default) or as raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Pitch bend value must be between -1.0 and 1.0.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setPitchBend(value, options = {}) {\n\n    // Validation\n    value = parseFloat(value);\n    if (isNaN(value)) value = 0;\n    if (options.rawValue) value = value / 127 * 2 - 1;\n    if (value < -1 || value > 1) {\n      throw new RangeError(\"Pitch bend value must be between -1.0 and 1.0.\");\n    }\n\n    let nLevel = Math.round((value + 1) / 2 * 16383);\n    let msb = (nLevel >> 7) & 0x7F;\n    let lsb = nLevel & 0x7F;\n\n    this.send(\n      (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.pitchbend << 4) + (this.number - 1),\n      [lsb, msb],\n      WebMidi.convertToTimestamp(options.time)\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a pitch bend range message to the specified channel(s) at the scheduled time so that they\n   * adjust the range used by their pitch bend lever. The range is specified by using the\n   * `semitones` and `cents` parameters. For example, setting the `semitones` parameter to `12`\n   * means that the pitch bend range will be 12 semitones above and below the nominal pitch.\n   *\n   * @param semitones {number} The desired adjustment value in semitones (between 0 and 127). While\n   * nothing imposes that in the specification, it is very common for manufacturers to limit the\n   * range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127.\n   * @throws {RangeError} The lsb value must be between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setPitchBendRange(semitones, cents, options = {}) {\n\n    this.setRegisteredParameter(\n      \"pitchbendrange\", [semitones, cents], {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **program change** message at the scheduled time.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param [program=1] {number} The MIDI patch (program) number (1-128)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   */\n  setProgram(program, options = {}) {\n\n    program = parseFloat(program) - 1;\n\n    this.send(\n      (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.programchange << 4) + (this.number - 1),\n      [program],\n      WebMidi.convertToTimestamp(options.time)\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from 0 to 127.\n   *\n   * MIDI\n   * [registered parameters]\n   * (https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them. Here are the original registered parameters with the identifier that\n   * can be used as the first parameter of this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *\n   * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * Another set of extra parameters have been later added for 3D sound controllers. They are:\n   *\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setRegisteredParameter(parameter, data, options = {}) {\n\n    if (!Array.isArray(parameter)) {\n      if (!WebMidi.MIDI_REGISTERED_PARAMETER[parameter]) {\n        throw new Error(\"The specified parameter is not available.\");\n      }\n      parameter = WebMidi.MIDI_REGISTERED_PARAMETER[parameter];\n    }\n\n    this._selectRegisteredParameter(parameter, this.number, options.time);\n    this._setCurrentRegisteredParameter(data, this.number, options.time);\n    this._deselectRegisteredParameter(options.time);\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the bank number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning bank (1-128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 1 and 128.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setTuningBank(value, options = {}) {\n\n    value = parseInt(value);\n    if (isNaN(value) || !(value >= 1 && value <= 128)) {\n      throw new RangeError(\"The program value must be between 1 and 128.\");\n    }\n\n    this.setRegisteredParameter(\"tuningbank\", value - 1, this.number, {time: options.time});\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning program (1-128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 1 and 128.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setTuningProgram(value, options = {}) {\n\n    value = parseInt(value);\n    if (isNaN(value) || !(value >= 1 && value <= 128)) {\n      throw new RangeError(\"The program value must be between 1 and 128.\");\n    }\n\n    this.setRegisteredParameter(\"tuningprogram\", value - 1, this.number, {time: options.time});\n\n    return this;\n\n  }\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setLocalControl(state, options = {}) {\n    if (state) {\n      return this.sendChannelMode(\"localcontrol\", 127, options);\n    } else {\n      return this.sendChannelMode(\"localcontrol\", 0, options);\n    }\n  }\n\n  /**\n   * Sends an **all notes off** channel mode message. This will turn all currently playing notes\n   * off. However, this does not prevent new notes from being played.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  turnNotesOff(options = {}) {\n    return this.sendChannelMode(\"allnotesoff\", 0, options);\n  }\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  turnSoundOff(options = {}) {\n    return this.sendChannelMode(\"allsoundoff\", 0, options);\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  resetAllControllers(options = {}) {\n    return this.sendChannelMode(\"resetallcontrollers\", 0, options);\n  }\n\n  /**\n   * Sets the polyphonic mode. In `\"poly\"` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `\"mono\"` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param {string} [mode=poly] The mode to use: `\"mono\"` or `\"poly\"`.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setPolyphonicMode(mode, options = {}) {\n    if (mode === \"mono\") {\n      return this.sendChannelMode(\"monomodeon\", 0, options);\n    } else {\n      return this.sendChannelMode(\"polymodeon\", 0, options);\n    }\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {OutputChannel} from \"./OutputChannel.js\";\nimport {WebMidi} from \"./WebMidi.js\";\n\n/**\n * The `Output` class represents a MIDI output port. This object is derived from the host's MIDI\n * subsystem and cannot be instantiated directly.\n *\n * You can find a list of all available `Output` objects in the\n * [WebMidi.outputs]{@link WebMidi#outputs} array.\n *\n * The `Output` class extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [addListener()](https://djipco.github.io/djipevents/EventEmitter.html#addListener),\n * [removeListener()](https://djipco.github.io/djipevents/EventEmitter.html#removeListener),\n * [hasListener()](https://djipco.github.io/djipevents/EventEmitter.html#hasListener) and several\n * others.\n *\n * @param {MIDIOutput} midiOutput `MIDIOutput` object as provided by the MIDI subsystem\n *\n * @fires Output#opened\n * @fires Output#disconnected\n * @fires Output#closed\n */\nexport class Output extends EventEmitter {\n\n  constructor(midiOutput) {\n\n    super();\n\n    if (!midiOutput || midiOutput.type !== \"output\") {\n      throw new TypeError(\"The supplied MIDIOutput is invalid.\");\n    }\n\n    /**\n     * A reference to the `MIDIOutput` object\n     * @type {MIDIOutput}\n     * @private\n     */\n    this._midiOutput = midiOutput;\n\n    /**\n     * Array containing the 16 {@link OutputChannel} objects available for this `Output`. The\n     * channels are numbered 1 through 16.\n     *\n     * @type {OutputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new OutputChannel(this, i);\n\n    this._midiOutput.onstatechange = this._onStateChange.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Output`. All listeners are removed, all channels are destroyed and the MIDI\n   * subsystem is unlinked.\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    this._midiOutput.onstatechange = null;\n    await this.close();\n    this._midiOutput = null;\n  }\n\n  /**\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: WebMidi.time\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the {@link Output} has been opened by calling the\n       * [open()]{@link Output#open} method.\n       *\n       * @event Output#opened\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"opened\"`\n       * @property {Output} target The object that triggered the event\n       */\n      event.type = \"opened\";\n      event.target = this;\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the {@link Output} has been closed by calling the\n       * [close()]{@link Output#close} method.\n       *\n       * @event Output#closed\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"closed\"`\n       * @property {Output} target The object that triggered the event\n       */\n      event.type = \"closed\";\n      event.target = this;\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the {@link Output} becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Output#disconnected\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp0 when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"disconnected\"`\n       * @property {Object} target Object with properties describing the {@link Output} that\n       * triggered the event. This is not the actual `Output` as it is no longer available.\n       * @property {string} target.connection `\"closed\"`\n       * @property {string} target.id ID of the input\n       * @property {string} target.manufacturer Manufacturer of the device that provided the input\n       * @property {string} target.name Name of the device that provided the input\n       * @property {string} target.state `\"disconnected\"`\n       * @property {string} target.type `\"output\"`\n       */\n      event.type = \"disconnected\";\n      event.target = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") {\n      // I don't see the need to forward that...\n    } else {\n      console.warn(\"This statechange event was not caught:\", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Opens the output for usage.\n   *\n   * @returns {Promise<Output>} The promise is fulfilled with the `Output`\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when calling `send()` on the `MIDIOutput`.\n    // We do it explicitly so that 'connected' events are dispatched immediately and we are ready to\n    // send.\n    try {\n      await this._midiOutput.open();\n      return Promise.resolve(this);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n  }\n\n  /**\n   * Closes the output connection. When an output is closed, it cannot be used to send MIDI messages\n   * until the output is opened again by calling [Output.open()]{@link Output#open}. You can check\n   * the connection status by looking at the [connection]{@link Output#connection} property.\n   *\n   * @returns {Promise<void>}\n   */\n  async close() {\n\n    // We close the port. This triggers a 'statechange' event which we listen to to re-trigger the\n    // 'closed' event.\n    if (this._midiOutput) {\n      await this._midiOutput.close();\n    } else {\n      await Promise.resolve();\n    }\n\n  }\n\n  /**\n   * Sends a MIDI message on the MIDI output port, at the scheduled timestamp. It is usually not\n   * necessary to use this method directly since it is often simpler to use one of the helper\n   * methods such as `playNote()`, `stopNote()`, `sendControlChange()`, etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param status {Number} The MIDI status byte of the message (128-255).\n   *\n   * @param [data=[]] {Array} An array of unsigned integers for the message. The number of data\n   * bytes varies depending on the status byte. It is perfectly legal to send no data for some\n   * message types (use undefined or an empty array in this case). Each byte must be between 0 and\n   * 255.\n   *\n   * @param [timestamp=0] {number} The timestamp (DOMHighResTimeStamp) at which to send the message.\n   * You can use [WebMidi.time]{@link WebMidi#time} to retrieve the current timestamp. To send\n   * immediately, leave blank or use 0.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 0 is greater\n   * than 0xFF.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 2 is greater\n   * than 0xFF.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Running status is not allowed at\n   * index 2.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Message is incomplete.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Reserved status is not allowed at\n   * index 0.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': System exclusive message is not\n   * allowed at index 0.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Unexpected end of system\n   * exclusive message at index 0.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Unexpected status byte at index\n   * 1.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Unexpected status byte at index\n   * 2.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  send(status, data = [], timestamp) {\n    if (!Array.isArray(data)) data = [data];\n    this._midiOutput.send([status].concat(data), parseFloat(timestamp) || 0);\n    return this;\n  }\n\n  /**\n   * Sends a MIDI [system exclusive]{@link\n    * https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages}\n   * (*sysex*) message. The generated message will automatically be prepended with the *sysex byte*\n   * (0xF0) and terminated with the *end of sysex byte* (0xF7).\n   *\n   * To use the `sendSysex()` method, system exclusive message support must have been enabled. To\n   * do so, you must set the `sysex` option to `true` when calling `WebMidi.enable()`:\n   *\n   * ```js\n   * WebMidi.enable({sysex: true})\n   *   .then(() => console.log(\"System exclusive messages are enabled\");\n   * ```\n   *\n   * Note that, depending on browser, version and platform, it is generally necessary to serve the\n   * page over HTTPS to enable sysex support.\n   *\n   * ##### Examples\n   *\n   * If you want to send a sysex message to a Korg device connected to the first output, you would\n   * use the following code:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(0x42, [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   *\n   * The parameters can be specified using any number notation (decimal, hex, binary, etc.).\n   * Therefore, the code below is equivalent to the code above:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(66, [1, 2, 3, 4, 5]);\n   * ```\n   *\n   * The above code sends the byte values 1, 2, 3, 4 and 5 to Korg devices (hex 42 is the same as\n   * decimal 66).\n   *\n   * Some manufacturers are identified using 3 bytes. In this case, you would use a 3-position array\n   * as the first parameter. For example, to send the same sysex message to a\n   * *Native Instruments* device:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex([0x00, 0x21, 0x09], [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   * There is no limit for the length of the data array. However, it is generally suggested to keep\n   * system exclusive messages to 64Kb or less.\n   *\n   * @param manufacturer {number|number[]} An unsigned integer or an array of three unsigned\n   * integers between 0 and 127 that identify the targeted manufacturer. The *MIDI Manufacturers\n   * Association* maintains a full list of\n   * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers)\n   * .\n   *\n   * @param [data=number[]] {Array} An array of unsigned integers between 0 and 127. This is the\n   * data you wish to transfer.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {DOMException} Failed to execute 'send' on 'MIDIOutput': System exclusive message is\n   * not allowed.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index x is greater\n   * than 0xFF.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendSysex(manufacturer, data, options = {}) {\n\n    manufacturer = [].concat(manufacturer);\n\n    data = manufacturer.concat(data, WebMidi.MIDI_SYSTEM_MESSAGES.sysexend);\n    this.send(WebMidi.MIDI_SYSTEM_MESSAGES.sysex, data, WebMidi.convertToTimestamp(options.time));\n\n    return this;\n\n  };\n\n  /**\n   * Clears all messages that have been queued but not yet delivered.\n   *\n   * Warning: this method has been defined in the specification but has not been implemented yet. As\n   * soon as browsers implement it, it will work.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  clear() {\n    if (this._midiOutput.clear) {\n      this._midiOutput.clear();\n    } else {\n      console.warn(\"The 'clear()' method has not yet been implemented in your environment.\");\n    }\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **timecode quarter frame** message. Please note that no processing is being done\n   * on the data. It is up to the developer to format the data according to the\n   * [MIDI Timecode](https://en.wikipedia.org/wiki/MIDI_timecode) format.\n   *\n   * @param value {number} The quarter frame message content (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendTimecodeQuarterFrame(value, options = {}) {\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.timecode,\n      value,\n      WebMidi.convertToTimestamp(options.time)\n    );\n    return this;\n  };\n\n  /**\n   * Sends a **ong position** MIDI message. The value is expressed in MIDI beats (between 0 and\n   * 16383) which are 16th note. Position 0 is always the start of the song.\n   *\n   * @param [value=0] {number} The MIDI beat to cue to (integer between 0 and 16383).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setSongPosition(value, options = {}) {\n\n    value = Math.floor(value) || 0;\n\n    var msb = (value >> 7) & 0x7F;\n    var lsb = value & 0x7F;\n\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.songposition,\n      [msb, lsb],\n      WebMidi.convertToTimestamp(options.time)\n    );\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendSongPosition(value, options = {}) {\n    this.setSongPosition(value, options);\n    console.warn(\n      \"The sendSongPosition() method has been deprecated. Use setSongPosition() instead.\"\n    );\n    return this;\n  }\n\n  /**\n   * Sends a **song select** MIDI message.\n   *\n   * **Note**: since version 3.0, the song number is an integer between 1 and 128. In versions 1.0\n   * and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices that\n   * use a numbering scheme starting at 1.\n   *\n   * @param value {number} The number of the song to select (integer between 1 and 128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws The song number must be between 1 and 128.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setSong(value, options = {}) {\n\n    value = parseInt(value);\n    if (isNaN(value) || !(value >= 1 && value <= 128)) {\n      throw new RangeError(\"The program value must be between 1 and 128\");\n    }\n\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.songselect,\n      [value],\n      WebMidi.convertToTimestamp(options.time)\n    );\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendSongSelect(value, options = {}) {\n    this.setSong(value, options);\n    console.warn(\n      \"The sendSongSelect() method has been deprecated. Use setSong() instead.\"\n    );\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **tune request** real-time message.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendTuneRequest(options = {}) {\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.tunerequest,\n      undefined,\n      WebMidi.convertToTimestamp(options.time)\n    );\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **clock* real-time message. According to the standard, there are 24 MIDI Clocks\n   * for every quarter note.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendClock(options = {}) {\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.clock,\n      undefined,\n      WebMidi.convertToTimestamp(options.time)\n    );\n    return this;\n  };\n\n  /**\n   * Sends a **start** real-time message. A MIDI Start message starts the playback of the current\n   * song at beat 0. To start playback elsewhere in the song, use the\n   * [sendContinue()]{@link Output#sendContinue} method.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStart(options = {}) {\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.start,\n      undefined,\n      WebMidi.convertToTimestamp(options.time)\n    );\n    return this;\n  };\n\n  /**\n   * Sends a **continue** real-time message. This resumes song playback where it was previously\n   * stopped or where it was last cued with a song position message. To start playback from the\n   * start, use the [sendStart()]{@link Output#sendStart}` method.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {WebMidi} Returns the `WebMidi` object so methods can be chained.\n   */\n  sendContinue(options = {}) {\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.continue,\n      undefined,\n      WebMidi.convertToTimestamp(options.time)\n    );\n    return this;\n  };\n\n  /**\n   * Sends a **stop** real-time message. This tells the device connected to this output to stop\n   * playback immediately (or at the scheduled time).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStop(options = {}) {\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.stop,\n      undefined,\n      WebMidi.convertToTimestamp(options.time)\n    );\n    return this;\n  };\n\n  /**\n   * Sends an **active sensing** real-time message. This tells the device connected to this port\n   * that the connection is still good. Active sensing messages should be sent every 300 ms if there\n   * was no other activity on the MIDI port.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendActiveSensing(options = {}) {\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.activesensing,\n      [],\n      WebMidi.convertToTimestamp(options.time)\n    );\n    return this;\n  };\n\n  /**\n   * Sends a **reset** real-time message. This tells the device connected to this output that it\n   * should reset itself to a default state.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendReset(options = {}) {\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.reset,\n      undefined,\n      WebMidi.convertToTimestamp(options.time)\n    );\n    return this;\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendTuningRequest(options = {}) {\n    this.sendTuneRequest(options);\n    console.warn(\n      \"The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead.\"\n    );\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message to the specified channel(s) at the scheduled time. This\n   * is a key-specific aftertouch. For a channel-wide aftertouch message, use\n   * [setChannelAftertouch()]{@link Output#setChannelAftertouch}.\n   *\n   * @param note {number|string|Array}  The note for which you are sending an aftertouch value. The\n   * notes can be specified in one of two ways. The first way is by using the MIDI note number (an\n   * integer between 0 and 127). The second way is by using the note name followed by the octave\n   * (C3, G#4, F-1, Db7). The octave range should be between -1 and 9. The lowest note is C-1 (MIDI\n   * note number 0) and the highest note is G9 (MIDI note number 127). It is also possible to use\n   * an array of note names and/or numbers.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setKeyAftertouch(note, pressure, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setKeyAftertouch(note, pressure, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendKeyAftertouch(note, channel, pressure, options = {}) {\n    this.setKeyAftertouch(note, pressure, channel, options);\n    console.warn(\n      \"The sendKeyAftertouch() method has been deprecated. Use setKeyAftertouch() instead.\"\n    );\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **control change** message to the specified channel(s) at the scheduled time. The\n   * control change message to send can be specified numerically or by using one of the following\n   * common names:\n   *\n   *  * `bankselectcoarse` (#0)\n   *  * `modulationwheelcoarse` (#1)\n   *  * `breathcontrollercoarse` (#2)\n   *  * `footcontrollercoarse` (#4)\n   *  * `portamentotimecoarse` (#5)\n   *  * `dataentrycoarse` (#6)\n   *  * `volumecoarse` (#7)\n   *  * `balancecoarse` (#8)\n   *  * `pancoarse` (#10)\n   *  * `expressioncoarse` (#11)\n   *  * `effectcontrol1coarse` (#12)\n   *  * `effectcontrol2coarse` (#13)\n   *  * `generalpurposeslider1` (#16)\n   *  * `generalpurposeslider2` (#17)\n   *  * `generalpurposeslider3` (#18)\n   *  * `generalpurposeslider4` (#19)\n   *  * `bankselectfine` (#32)\n   *  * `modulationwheelfine` (#33)\n   *  * `breathcontrollerfine` (#34)\n   *  * `footcontrollerfine` (#36)\n   *  * `portamentotimefine` (#37)\n   *  * `dataentryfine` (#38)\n   *  * `volumefine` (#39)\n   *  * `balancefine` (#40)\n   *  * `panfine` (#42)\n   *  * `expressionfine` (#43)\n   *  * `effectcontrol1fine` (#44)\n   *  * `effectcontrol2fine` (#45)\n   *  * `holdpedal` (#64)\n   *  * `portamento` (#65)\n   *  * `sustenutopedal` (#66)\n   *  * `softpedal` (#67)\n   *  * `legatopedal` (#68)\n   *  * `hold2pedal` (#69)\n   *  * `soundvariation` (#70)\n   *  * `resonance` (#71)\n   *  * `soundreleasetime` (#72)\n   *  * `soundattacktime` (#73)\n   *  * `brightness` (#74)\n   *  * `soundcontrol6` (#75)\n   *  * `soundcontrol7` (#76)\n   *  * `soundcontrol8` (#77)\n   *  * `soundcontrol9` (#78)\n   *  * `soundcontrol10` (#79)\n   *  * `generalpurposebutton1` (#80)\n   *  * `generalpurposebutton2` (#81)\n   *  * `generalpurposebutton3` (#82)\n   *  * `generalpurposebutton4` (#83)\n   *  * `reverblevel` (#91)\n   *  * `tremololevel` (#92)\n   *  * `choruslevel` (#93)\n   *  * `celestelevel` (#94)\n   *  * `phaserlevel` (#95)\n   *  * `databuttonincrement` (#96)\n   *  * `databuttondecrement` (#97)\n   *  * `nonregisteredparametercoarse` (#98)\n   *  * `nonregisteredparameterfine` (#99)\n   *  * `registeredparametercoarse` (#100)\n   *  * `registeredparameterfine` (#101)\n   *\n   * Note: as you can see above, not all control change message have a matching common name. This\n   * does not mean you cannot use the others. It simply means you will need to use their number\n   * instead of their name.\n   *\n   * To view a list of all available `control change` messages, please consult \"Table 3 - Control\n   * Change Messages\" from the [MIDI Messages](\n   * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\n   * specification.\n   *\n   * @param controller {number|string} The MIDI controller name or number (0-119).\n   *\n   * @param [value=0] {number} The value to send (0-127).\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 119.\n   * @throws {RangeError} Invalid controller name.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendControlChange(controller, value, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].sendControlChange(controller, value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a pitch bend range message to the specified channel(s) at the scheduled time so that they\n   * adjust the range used by their pitch bend lever. The range is specified by using the\n   * `semitones` and `cents` parameters. For example, setting the `semitones` parameter to `12`\n   * means that the pitch bend range will be 12 semitones above and below the nominal pitch.\n   *\n   * @param semitones {number} The desired adjustment value in semitones (between 0 and 127). While\n   * nothing imposes that in the specification, it is very common for manufacturers to limit the\n   * range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0-127).\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127.\n   * @throws {RangeError} The lsb value must be between 0 and 127.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setPitchBendRange(semitones, cents, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setPitchBendRange(semitones, cents, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from 0 to 127.\n   *\n   * MIDI\n   * [registered parameters]\n   * (https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them. Here are the original registered parameters with the identifier that\n   * can be used as the first parameter of this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *\n   * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * Another set of extra parameters have been later added for 3D sound controllers. They are:\n   *\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} A single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  setRegisteredParameter(parameter, data, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setRegisteredParameter(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message to the specified channel(s). For key-specific\n   * aftertouch, you should instead use [setKeyAftertouch()]{@link Output#setKeyAftertouch}.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   * @since 3.0.0\n   */\n  setChannelAftertouch(pressure, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setChannelAftertouch(pressure, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendChannelAftertouch(pressure, channel, options = {}) {\n    this.setChannelAftertouch(pressure, channel, options);\n    console.warn(\n      \"The sendChannelAftertouch() method has been deprecated. Use setChannelAftertouch() instead.\"\n    );\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message to the specified channel(s) at the scheduled time.\n   *\n   * @param value {number} The intensity level of the bend (between -1.0 and 1.0). A value of zero\n   * means no bend. If the `rawValue` option is set to `true`, the intensity can be defined by using\n   * an integer between 0 and 127. In this case, a value of 64 means no bend.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between -1.0 and 1.0 (default) or as raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Pitch bend value must be between -1.0 and 1.0.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setPitchBend(value, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setPitchBend(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendPitchBend(bend, channel, options = {}) {\n    this.setPitchBend(bend, channel, options);\n    console.warn(\n      \"The sendPitchBend() method has been deprecated. Use setPitchBend() instead.\"\n    );\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **program change** message to the specified channel(s) at the scheduled time.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param [program=1] {number} The MIDI patch (program) number (1-128)\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setProgram(program, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setProgram(program, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendProgramChange(program, channel, options = {}) {\n\n    console.warn(\n      \"The sendProgramChange() method has been deprecated. Use setProgram() instead.\"\n    );\n\n    return this.setProgram(program, channel, options);\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to the specified channel(s) so that they adjust the\n   * depth of their modulation wheel's range. The range can be specified with the `semitones`\n   * parameter, the `cents` parameter or by specifying both parameters at the same time.\n   *\n   * @param [semitones=0] {number} The desired adjustment value in semitones (integer between\n   * 0 and 127).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127\n   * @throws {RangeError} The lsb value must be between 0 and 127\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setModulationRange(semitones, cents, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setModulationRange(semitones, cents, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a master tuning message to the specified channel(s). The value is decimal and must be\n   * larger than -65 semitones and smaller than 64 semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setMasterTuning(value, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setMasterTuning(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning program (1-128).\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 1 and 128.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setTuningProgram(value, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setTuningProgram(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the bank number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning bank (1-128).\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 1 and 128.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setTuningBank(value, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setTuningBank(value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a MIDI **channel mode** message to the specified channel(s). The channel mode message to\n   * send can be specified numerically or by using one of the following common names:\n   *\n   *   * `\"allsoundoff\"` (#120)\n   *   * `\"resetallcontrollers\"` (#121)\n   *   * `\"localcontrol\"` (#122)\n   *   * `\"allnotesoff\"` (#123)\n   *   * `\"omnimodeoff\"` (#124)\n   *   * `\"omnimodeon\"` (#125)\n   *   * `\"monomodeon\"` (#126)\n   *   * `\"polymodeon\"` (#127)\n   *\n   * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\n   * require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * To make it easier, all channel mode messages have a matching helper method:\n   *\n   *   - [turnSoundOff()]{@link OutputChannel#turnSoundOff}\n   *   - [resetAllControllers()]{@link OutputChannel#resetAllControllers}\n   *   - [setLocalControl()]{@link OutputChannel#turnSoundOff}\n   *   - [turnNotesOff()]{@link OutputChannel#turnNotesOff}\n   *   - [setOmniMode()]{@link OutputChannel#setOmniMode}\n   *   - [setPolyphonicMode()]{@link OutputChannel#setPolyphonicMode}\n   *\n   * @param command {number|string} The numerical identifier of the channel mode message (integer\n   * between 120-127) or its name as a string.\n   *\n   * @param [value] {number} The value to send (integer between 0-127).\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   */\n  sendChannelMode(command, value, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].sendChannelMode(command, value, options);\n    });\n\n    return this;\n\n  }\n\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  turnSoundOff(channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].turnSoundOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **all note soff** channel mode message. This will turn all currently playing notes\n   * off. However, this does not prevent new notes from being played.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  turnNotesOff(channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].turnNotesOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   */\n  resetAllControllers(channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].resetAllControllers(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the polyphonic mode. In `\"poly\"` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `\"mono\"` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param mode {string} The mode to use: `\"mono\"` or `\"poly\"`.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setPolyphonicMode(mode, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setPolyphonicMode(mode, options);\n    });\n\n    return this;\n\n  }\n\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setLocalControl(state, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setLocalControl(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to `\"on\"` or `\"off\"` for the specified channel(s). MIDI's OMNI mode causes the\n   * instrument to respond to messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setOmniMode(state, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setOmniMode(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter to the specified value. The NRPN is selected by passing in a\n   * two-position array specifying the values of the two control bytes. The value is specified by\n   * passing in a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\n   * would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].setNonRegisteredParameter([1, 8], 123);\n   * ```\n   *\n   * Obviously, you should select a channel so the message is not sent to all channels. For\n   * instance, to send to channel 1 of the first output port, you would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].setNonRegisteredParameter([1, 8], 123, 1);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was 10, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].setNonRegisteredParameter([2, 63], [0, 10], [1]);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer\"s documentation.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes (0x63,\n   * 0x62) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  setNonRegisteredParameter(parameter, data, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setNonRegisteredParameter(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws Error The specified parameter is not available.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  incrementRegisteredParameter(parameter, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].incrementRegisteredParameter(parameter, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter\"s name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified parameter is not available.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  decrementRegisteredParameter(parameter, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].decrementRegisteredParameter(parameter, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a **note off** message for the specified notes on the specified channel(s). The first\n   * parameter is the note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   *  The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the release velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param [channel] {number|number[]} The MIDI channel number (between `1` and `16`) or an array\n   * of channel numbers.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] Controls whether the release velocity is set using\n   * integers between `0` and `127` (`true`) or a decimal number between `0` and `1` (`false`,\n   * default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOff(note, channel, options) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].sendNoteOff(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * This is an alias to the [sendNoteOff()]{@link Output#sendNoteOff} method.\n   *\n   * @see {@link Output#sendNoteOff}\n   *\n   * @param note\n   * @param channel\n   * @param options\n   * @returns {Output}\n   */\n  stopNote(note, channel, options) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].stopNote(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Plays a note or an array of notes on the specified channel(s). The first parameter is the note\n   * to play. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes on all\n   * specified channels. If a `duration` is set in the `options` parameter or in the {@link Note}\n   * object's [duration]{@link Note#duration} property, it will also schedule a **note off** message\n   * to end the note after said duration. If no `duration` is set, the note will simply play until\n   * a matching **note off** message is sent with [stopNote()]{@link Output#stopNote} or\n   * [sendNoteOff()]{@link Output#sendNoteOff}.\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the durations and velocities defined in the {@link Note}\n   * objects have precedence over the ones specified via the method's `options` parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param [channel] {number|number[]} The MIDI channel number (between `1` and `16`) or an array\n   * of channel numbers.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.duration=undefined] The number of milliseconds (integer) after which a\n   * **note off** message will be scheduled. If left undefined, only a **note on** message is sent.\n   *\n   * @param {boolean} [options.rawValue=false] Controls whether the attack and release velocities\n   * are set using integers between `0` and `127` (`true`) or a decimal number between `0` and `1`\n   * (`false`, default).\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   * This is only used with the **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The attack velocity to use when playing the note (between\n   * `0` and `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  playNote(note, channel, options = {}) {\n\n    // Compatibility warning\n    if (options.rawVelocity) {\n      console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' instead.\");\n    }\n    if (options.velocity) {\n      console.warn(\"The 'velocity' option is deprecated. Use 'velocity' instead.\");\n    }\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].playNote(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note on** message for the specified notes on the specified channel(s). The first\n   * parameter is the note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the attack velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter. Also, the `duration` is\n   * ignored. If you want to also send a **note off** message, use the\n   * [playNote()]{@link Output#playNote} method instead.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param [channel] {number|number[]} The MIDI channel number (between `1` and `16`) or an array\n   * of channel numbers.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] Controls whether the attack velocity is set using\n   * integers between `0` and `127` (`true`) or a decimal number between `0` and `1` (`false`,\n   * default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOn(note, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].sendNoteOn(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Name of the MIDI output\n   *\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._midiOutput.name;\n  }\n\n  /**\n   * ID string of the MIDI output. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiOutput.id;\n  }\n\n  /**\n   * Output port's connection state: `\"pending\"`, `\"open\"` or `\"closed\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiOutput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this output port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiOutput.manufacturer;\n  }\n\n  /**\n   * State of the output port: `\"connected\"` or `\"disconnected\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiOutput.state;\n  }\n\n  /**\n   * Type of the output port (`\"output\"`)\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiOutput.type;\n  }\n\n}\n","import {WebMidi} from \"./WebMidi.js\";\n\n/**\n * The `Note` class represents a single note to be played. The `Note` can be played on a single\n * channel by using [OutputChannel.playNote()]{@link OutputChannel#playNote} or on multiple\n * channels at once by using [Output.playNote()]{@link Output#playNote}.\n *\n * If the note's `duration` property is set, the note will be stopped at the end of the duration. If\n * no duration is set, it will play until it is explicitly stopped using\n * [OutputChannel.stopNote()]{@link OutputChannel#stopNote} or\n * [Output.stopNote()]{@link Output#stopNote}.\n *\n * @param name {string|number} The name or note number of the note to create. If a number is used,\n * it must be an integer between 0 and 127. If a string is used, it must be the note name followed\n * by the octave (`\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`, etc.). The octave range must be between -1 and\n * 9. The lowest note is C-1 (MIDI note number 0) and the highest note is G9 (MIDI note number 127).\n *\n * @param {Object} [options={}]\n *\n * @param {number} [options.duration=Infinity] The number of milliseconds before the note should be\n * explicitly stopped.\n *\n * @param {number} [options.attack=0.5] The note's attack velocity as a decimal number between 0 and\n * 1.\n *\n * @param {number} [options.release=0.5] The note's release velocity as a decimal number between 0\n * and 1.\n *\n * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n * 127.\n *\n * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n * 127.\n *\n * @throws {Error} Invalid note name.\n *\n * @since 3.0.0\n */\nexport class Note {\n\n  constructor(name, options = {}) {\n\n    if (Number.isInteger(name)) {\n      this.number = name;\n    } else {\n      this.name = name;\n    }\n\n    this.duration = options.duration;\n    this.channels = options.channels;\n    this.attack = options.attack;\n    this.release = options.release;\n    if (options.rawAttack) this.rawAttack = options.rawAttack;\n    if (options.rawRelease) this.rawRelease = options.rawRelease;\n\n  }\n\n  /**\n   * The name of the note with the octave number (`\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`, etc.)\n   *\n   * @type {string}\n   */\n  get name() {\n    return WebMidi.NOTES[this._number % 12] + WebMidi.getOctave(this.number);\n  }\n  set name(value) {\n    value = WebMidi.guessNoteNumber(value);\n    if (value === false) throw new Error(\"Invalid note name.\");\n    this._number = value;\n  }\n\n  /**\n   * The MIDI note number as an integer between 0 and 127\n   * @type {number}\n   */\n  get number() {\n    return this._number;\n  }\n  set number(value) {\n    value = WebMidi.guessNoteNumber(value);\n    if (value === false) throw new Error(\"Invalid note number.\");\n    this._number = value;\n  }\n\n  /**\n   * The duration of the note as a positive decimal number representing the number of milliseconds\n   * that the note should play for. If the duration is set, a **note off** message is automatically\n   * scheduled to stop the note after the specified duration.\n   *\n   * @type {number}\n   */\n  get duration() {\n    return this._duration;\n  }\n  set duration(value) {\n    value = Math.max(parseFloat(value), 0);\n    this._duration = isNaN(value) ? Infinity : value;\n  }\n\n  /**\n   * An array of integers (1-16) representing the MIDI channel(s) the note should be played on.\n   *\n   * This is only necessary if you intend to use the {@link Output} object's\n   * [playNote()]{@link Output#playNote} method. If you use the {@link OutputChannel} object's\n   * [playNote()]{@link OutputChannel#playNote} method, it will be played on that channel (no matter\n   * what has been set as the channel).\n   *\n   * @type {number[]}\n   */\n  get channels() {\n    return this._channels;\n  }\n  set channels(value) {\n    this._channels = WebMidi.sanitizeChannels(value);\n  }\n\n  /**\n   * The attack velocity of the note as a decimal number between 0 and 1. By default, this is set to\n   * 64 ÷ 127 which is roughly 0.5.\n   *\n   * @type {number}\n   */\n  get attack() {\n    return this._rawAttack / 127;\n  }\n  set attack(value) {\n    value = Math.min(Math.max(parseFloat(value), 0), 1);\n    this._rawAttack = isNaN(value) ? 64 : Math.round(value * 127);\n  }\n\n  /**\n   * The raw attack velocity of the note as an integer between 0 and 127. By default, this is set to\n   * 64.\n   * @type {number}\n   */\n  get rawAttack() {\n    return this._rawAttack;\n  }\n  set rawAttack(value) {\n    value = Math.min(Math.max(parseInt(value), 0), 127);\n    this._rawAttack = isNaN(value) ? 64 : value;\n  }\n\n  /**\n   * The release velocity of the note as a decimal number between 0 and 1. By default, this is set\n   * to 64 ÷ 127 which is roughly 0.5.\n   *\n   * @type {number}\n   */\n  get release() {\n    return this._rawRelease / 127;\n  }\n  set release(value) {\n    value = Math.min(Math.max(parseFloat(value), 0), 1);\n    this._rawRelease = isNaN(value) ? 64 : Math.round(value * 127);\n  }\n\n  /**\n   * The raw release velocity of the note as an integer between 0 and 127. By default, this is set\n   * to 64.\n   * @type {number}\n   */\n  get rawRelease() {\n    return this._rawRelease;\n  }\n  set rawRelease(value) {\n    value = Math.min(Math.max(parseInt(value), 0), 127);\n    this._rawRelease = isNaN(value) ? 64 : value;\n  }\n\n  /**\n   * The octave of the note as an integer between -1 and 8.\n   * @type {number}\n   */\n  get octave() {\n    return Math.floor(Math.floor(this._number) / 12 - 1);\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {Input} from \"./Input.js\";\nimport {Output} from \"./Output.js\";\nimport {Note} from \"./Note.js\";\n\n/**\n * The `WebMidi` object makes it easier to work with the Web MIDI API. Basically, it simplifies\n * sending outgoing MIDI messages and reacting to incoming MIDI messages.\n *\n * When using the WebMidi.js library, the `WebMidi` class has already been instantiated for you.\n * If you use the **IIFE** version, you should simply use the global object called `WebMidi`. If you\n * use the **CJS** (CommonJS) or **ESM** (ES6 module) version, you get an already-instantiated\n * object. This means there is no need to instantiate a new `WebMidi` object directly.\n *\n * The `WebMidi` object extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [addListener()](https://djipco.github.io/djipevents/EventEmitter.html#addListener),\n * [removeListener()](https://djipco.github.io/djipevents/EventEmitter.html#removeListener),\n * [hasListener()](https://djipco.github.io/djipevents/EventEmitter.html#hasListener) and several\n * others.\n *\n * @fires WebMidi#connected\n * @fires WebMidi#disconnected\n * @fires WebMidi#enabled\n * @fires WebMidi#disabled\n *\n * @extends EventEmitter\n */\nclass WebMidi extends EventEmitter {\n\n  constructor() {\n\n    super();\n\n    /**\n     * The `MIDIAccess` instance used to talk to the Web MIDI API. This should not be used directly\n     * unless you know what you are doing.\n     *\n     * @type {?MIDIAccess}\n     * @readonly\n     */\n    this.interface = null;\n\n    /**\n     * Array of all {@link Input} objects\n     * @type {Input[]}\n     * @private\n     */\n    this._inputs = [];\n\n    /**\n     * Array of all {@link Output} objects\n     * @type {Output[]}\n     * @private\n     */\n    this._outputs = [];\n\n    /**\n     * Array of statechange events to process. These events must be parsed synchronously so they do\n     * not override each other.\n     *\n     * @type {string[]}\n     * @private\n     */\n    this._stateChangeQueue = [];\n\n    this._octaveOffset = 0;\n\n    // If we are inside Node.js, polyfill navigator.requestMIDIAccess() and performance.now()\n    if (this.isNode) {\n      global.navigator = require(\"jzz\");\n      global.performance = require(\"perf_hooks\").performance;\n    }\n\n  }\n\n  /**\n   * Checks if the Web MIDI API is available in the current environment and then tries to connect to\n   * the host's MIDI subsystem. This is an asynchronous operation and it causes a security prompt to\n   * be displayed to the user.\n   *\n   * To enable the use of MIDI system exclusive messages, the `sysex` option should be set to\n   * `true`. However, under some environments (e.g. Jazz-Plugin), the `sysex` option is ignored\n   * and system exclusive messages are always enabled. You can check the\n   * [sysexEnabled]{@link WebMidi#sysexEnabled} property to confirm.\n   *\n   * To enable access to software synthesizers available on the host, you would set the `software`\n   * option to `true`. However, this option is only there to future-proof the library as support for\n   * software synths has not yet been implemented in any browser (as of April 2020).\n   *\n   * There are 3 ways to execute code after `WebMidi` has been enabled:\n   *\n   * - Pass a callback function in the options\n   * - Listen to the `enabled` event\n   * - Wait for the promise to resolve\n   *\n   * In order, this is what happens towards the end of the enabling process:\n   *\n   * 1. callback is executed\n   * 2. `enabled` event is triggered\n   * 3. `connected` events from available inputs and outputs are triggered\n   * 4. promise is resolved\n   *\n   * The promise is fulfilled with an object containing two properties (`inputs` and `outputs`) that\n   * contain arrays of available inputs and outputs, respectively.\n   *\n   * **Important note**: starting with Chrome v77, a page using Web MIDI API must be hosted on a\n   * secure origin (`https://`, `localhost` or `file:///`) and the user will always be prompted to\n   * authorize the operation (no matter if the `sysex` option is `true` or not).\n   *\n   * ##### Examples\n   * ```js\n   * // Enabling WebMidi and using the promise\n   * WebMidi.enable().then(ports => {\n   *   console.log(\"WebMidi.js has been enabled!\");\n   *   console.log(\"Inputs: \", ports.inputs);\n   *   console.log(\"Outputs: \", ports.outputs);\n   * })\n   * ```\n   *\n   * ```js\n   * // Enabling WebMidi and listening to 'enabled' event\n   * WebMidi.addListener(\"enabled\", e => {\n   *   console.log(\"WebMidi.js has been enabled!\");\n   * });\n   * WebMidi.enable();\n   * ```\n   *\n   * ```js\n   * // Enabling WebMidi and using callback function\n   * WebMidi.enable({callback: e => {\n   *   console.log(\"WebMidi.js has been enabled!\");\n   * });\n   * ```\n   *\n   * @param [options] {Object}\n   * @param [options.callback] {function} A function to execute once the operation completes. This\n   * function will receive an `Error` object if enabling the Web MIDI API failed.\n   * @param [options.sysex=false] {boolean} Whether to enable MIDI system exclusive messages or not.\n   * @param [options.software=false] {boolean} Whether to request access to software synthesizers on\n   * the host system. This is part of the spec but has not yet been implemented by most browsers as\n   * of April 2020.\n   *\n   * @async\n   * @returns {Promise<Object>} The promise is fulfilled with an object containing two properties\n   * (`inputs` and `outputs`) that contain arrays of available inputs and outputs, respectively.\n   *\n   * @throws Error The Web MIDI API is not supported in your environment.\n   * @throws Error Jazz-Plugin must be installed to use WebMIDIAPIShim.\n   */\n  async enable(options = {}, sysex = false) {\n\n    if (this.enabled) return Promise.resolve();\n\n    // Backwards-compatibility. Previous syntax was: enable(callback, sysex)\n    if (typeof options === \"function\") options = {callback: options, sysex: sysex};\n    if (sysex) options.sysex = true;\n\n    // The Jazz-Plugin takes a while to be available (even after the Window's 'load' event has been\n    // fired). Therefore, we wait a little while to give it time to load.\n    if (!this.supported) {\n\n      await new Promise((resolve, reject) => {\n\n        const start = this.time;\n\n        const intervalID = setInterval(() => {\n\n          if (this.supported) {\n            clearInterval(intervalID);\n            resolve();\n          } else {\n            if (this.time > start + 1500) {\n              clearInterval(intervalID);\n              let error = new Error(\"Web MIDI API support is not available in your environment.\");\n              if (typeof options.callback === \"function\") options.callback(error);\n              reject(error);\n            }\n          }\n\n        }, 25);\n\n      });\n\n    }\n\n    // Request MIDI access\n    try {\n      this.interface = await navigator.requestMIDIAccess(\n        {sysex: options.sysex, software: options.software}\n      );\n    } catch(err) {\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    /**\n     * Event emitted once `WebMidi` has been successfully enabled.\n     *\n     * @event WebMidi#enabled\n     * @type {Object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `enabled`\n     */\n    let event = {\n      timestamp: this.time,\n      target: this,\n      type: \"enabled\"\n    };\n\n    // Trigger the 'enabled' event. We do it before emitting the 'connected' events so that they can\n    // be listened to in callbacks tied to the 'enabled' event.\n    this.emit(\"enabled\", event);\n    if (typeof options.callback === \"function\") options.callback();\n\n    // We setup the statechange listener before creating the ports so that if properly catches the\n    // the ports' `connected` events\n    this.interface.onstatechange = this._onInterfaceStateChange.bind(this);\n\n    // Update inputs and outputs (this is where `Input` and `Output` objects are created). If\n    // successful, we return a promise fulfilled with all the input/output ports that were found.\n    try {\n      let ports = await this._updateInputsAndOutputs();\n      return Promise.resolve({\n        inputs: ports[0],\n        outputs: ports[1]\n      });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n  }\n\n  /**\n   * Completely disables `WebMidi.js` by unlinking the MIDI subsystem's interface and closing all\n   * {@link Input} and {@link Output} objects that may be available. This also means that listeners\n   * added to {@link Input} objects, {@link Output} objects or to `WebMidi` itself are also\n   * destroyed.\n   *\n   * @async\n   * @returns {Promise<void>}\n   *\n   * @throws Error The Web MIDI API is not supported by your environment.\n   *\n   * @since 2.0.0\n   */\n  async disable() {\n\n    if (!this.supported) throw new Error(\"The Web MIDI API is not supported by your environment.\");\n\n    return this._destroyInputsAndOutputs().then(() => {\n\n      if (this.isNode) navigator.close();\n\n      if (this.interface) this.interface.onstatechange = undefined;\n      this.interface = null; // also resets enabled, sysexEnabled\n\n      /**\n       * Event emitted once `WebMidi` has been successfully disabled.\n       *\n       * @event WebMidi#disabled\n       * @type {Object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {WebMidi} target The object that triggered the event\n       * @property {string} type `disabled`\n       */\n      let event = {\n        timestamp: this.time,\n        target: this,\n        type: \"disabled\"\n      };\n\n      // Finally, trigger the 'disabled' event and remove all listeners\n      this.emit(\"disabled\", event);\n      this.removeListener();\n\n    });\n\n  };\n\n  /**\n   * Returns the {@link Input} object that matches the specified ID string or `false` if no matching\n   * input is found. As per the Web MIDI API specification, IDs are strings (not integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the input. IDs can be viewed by looking at the\n   * [inputs]{@link WebMidi#inputs} array. Even though they sometimes look like integers, IDs are\n   * strings.\n   *\n   * @returns {Input|false} An {@link Input} object matching the specified ID string. If no matching\n   * input can be found, the method returns `false`.\n   *\n   * @throws Error WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputById(id) {\n\n    if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n    if (!id) return false;\n\n    for (let i = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i].id === id.toString()) return this.inputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the first {@link Input} object whose name **contains** the specified string. Note that\n   * the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [inputs]{@link WebMidi#inputs} array).\n   *\n   * @returns {Input|false} The {@link Input} that was found or `false` if no input contained the\n   * specified name.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputByName(name) {\n\n    if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n    if (!name) return false;\n    name = name.toString();\n\n    for (let i = 0; i < this.inputs.length; i++) {\n      if (~this.inputs[i].name.indexOf(name)) return this.inputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the first {@link Output} object whose name **contains** the specified string. Note that\n   * the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [outputs]{@link WebMidi#outputs} array).\n   *\n   * @returns {Output|false} The {@link Output} that was found or `false` if no output matched the\n   * specified name.\n   *\n   * @throws Error WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputByName(name) {\n\n    if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n    if (!name) return false;\n    name = name.toString();\n\n    for (let i = 0; i < this.outputs.length; i++) {\n      if (~this.outputs[i].name.indexOf(name)) return this.outputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the {@link Output} object that matches the specified ID string or `false` if no\n   * matching output is found. As per the Web MIDI API specification, IDs are strings (not\n   * integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the port. IDs can be viewed by looking at the\n   * [outputs]{@link WebMidi#outputs} array.\n   *\n   * @returns {Output|false} An {@link Output} object matching the specified ID string. If no\n   * matching output can be found, the method returns `false`.\n   *\n   * @throws Error WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputById(id) {\n\n    if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n    if (!id) return false;\n\n    for (let i = 0; i < this.outputs.length; i++) {\n      if (this.outputs[i].id === id.toString()) return this.outputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns a MIDI note number matching the note name passed in the form of a string parameter. The\n   * note name must include the octave number. The name can also optionally include a sharp (#),\n   * a double sharp (##), a flat (b) or a double flat (bb) symbol. For example, these are all valid\n   * names: C5, G4, D#-1, F0, Gb7, Eb-1, Abb4, B##6, etc.\n   *\n   * When converting note names to numbers, C4 is considered to be middle C (MIDI note number 60) as\n   * per the scientific pitch notation standard.\n   *\n   * The resulting note number is offset by the [octaveOffset]{@link WebMidi#octaveOffset} value (if\n   * not zero). For example, if you pass in \"C4\" and the [octaveOffset]{@link WebMidi#octaveOffset}\n   * value is 2, the resulting MIDI note number will be 36.\n   *\n   * **Note**: since v3.x, this function returns `false` instead of throwing an error when it cannot\n   * parse the name to a number.\n   *\n   * @param name {string} The name of the note in the form of a letter, followed by an optional \"#\",\n   * \"##\", \"b\" or \"bb\" followed by the octave number.\n   *\n   * @returns {number|false} The MIDI note number (an integer between 0 and 127) or `false` if the\n   * name could not successfully be parsed to a number.\n   */\n  getNoteNumberByName(name) {\n\n    if (typeof name !== \"string\") name = \"\";\n\n    let matches = name.match(/([CDEFGAB])(#{0,2}|b{0,2})(-?\\d+)/i);\n    if(!matches) return false;\n\n    let semitones = {C: 0, D: 2, E: 4, F: 5, G: 7, A: 9, B: 11 };\n    let semitone = semitones[matches[1].toUpperCase()];\n    let octave = parseInt(matches[3]);\n    let result = ((octave + 1 - Math.floor(this.octaveOffset)) * 12) + semitone;\n\n    if (matches[2].toLowerCase().indexOf(\"b\") > -1) {\n      result -= matches[2].length;\n    } else if (matches[2].toLowerCase().indexOf(\"#\") > -1) {\n      result += matches[2].length;\n    }\n\n    if (result < 0 || result > 127) return false;\n\n    return result;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0. Use getNoteNumberByName() instead.\n   */\n  noteNameToNumber(name) {\n    console.warn(\n      \"The noteNameToNumber() method has been deprecated. Use getNoteNumberByName() instead.\"\n    );\n    return this.getNoteNumberByName(name);\n  }\n\n  /**\n   * Returns the octave number for the specified MIDI note number (0-127). By default, the value is\n   * based on middle C (note number 60) being placed on the 4th octave (C4). However, by using the\n   * [octaveOffset]{@link WebMidi#octaveOffset} property, you can offset the result as desired.\n   *\n   * **Note**: since v3.x, this method returns `false` instead of `undefined` when the value cannot\n   * be parsed to a valid octave.\n   *\n   * @param number {number} An integer representing a valid MIDI note number (between 0 and 127).\n   *\n   * @returns {number|false} The octave (as a signed integer) or `false` if the value could not be\n   * parsed to a valid octave.\n   *\n   * @since 2.0.0-rc.6\n   */\n  getOctave(number) {\n\n    number = parseInt(number);\n\n    if (!isNaN(number) && number >= 0 && number <= 127) {\n      return Math.floor(number / 12 - 1) + this.octaveOffset;\n    } else {\n      return false;\n    }\n\n  }\n\n  /**\n   * Returns a sanitized array of valid MIDI channel numbers (1-16). The parameter should be a\n   * single integer or an array of integers.\n   *\n   * For backwards-compatibility, passing `undefined` as a parameter to this method results in all\n   * channels being returned (1-16). Otherwise, parameters that cannot successfully be parsed to\n   * integers between 1 and 16 are silently ignored.\n   *\n   * @param [channel] {number|number[]} An integer or an array of integers to parse as channel\n   * numbers.\n   *\n   * @returns {Array} An array of 0 or more valid MIDI channel numbers.\n   */\n  sanitizeChannels(channel) {\n\n    let channels;\n\n    if (channel === \"all\") { // backwards-compatibility\n      channels = [\"all\"];\n    } else if (channel === \"none\") { // backwards-compatibility\n      return [];\n    } else if (!Array.isArray(channel)) {\n      channels = [channel];\n    } else {\n      channels = channel;\n    }\n\n    // In order to preserve backwards-compatibility, we let this assignment as it is.\n    if (channels.indexOf(\"all\") > -1) {\n      channels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    }\n\n    return channels\n      .map(function(ch) {\n        return parseInt(ch);\n      })\n      .filter(function(ch) {\n        return (ch >= 1 && ch <= 16);\n      });\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0. Use sanitizeChannels() instead.\n   */\n  toMIDIChannels(channel) {\n    console.warn(\n      \"The toMIDIChannels() method has been deprecated. Use sanitizeChannels() instead.\"\n    );\n    return this.sanitizeChannels(channel);\n  }\n\n  /**\n   * Returns a valid MIDI note number (0-127) given the specified input. The parameter usually is a\n   * string containing a note name (`\"C3\"`, `\"F#4\"`, `\"D-2\"`, `\"G8\"`, etc.). If an integer between 0\n   * and 127 is passed, it will simply be returned as is (for convenience). Other strings will be\n   * parsed for integer, if possible.\n   *\n   * **Note**: since v3.x, this method returns `false` instead of throwing an error when the input\n   * is invalid.\n   *\n   * @param input {string|number} A string to extract the note number from. An integer can also be\n   * used, in this case it will simply be returned as is (if between 0 and 127).\n   *\n   * @returns {number|false} A valid MIDI note number (0-127) or `false` if the input could not\n   * successfully be parsed to a note number.\n   */\n  guessNoteNumber(input) {\n\n    let output = false;\n\n    if (Number.isInteger(input) && input >= 0 && input <= 127) {        // uint\n      output = parseInt(input);\n    } else if (parseInt(input) >= 0 && parseInt(input) <= 127) {        // float or uint as string\n      output = parseInt(input);\n    } else if (typeof input === \"string\" || input instanceof String) {  // string\n      output = this.getNoteNumberByName(input);\n    }\n\n    if (output === false) return false;\n    return output;\n\n  }\n\n  /**\n   * Converts an input value, which can be an unsigned integer (0-127), a note name, a {@link Note}\n   * object or an array of the previous types, to an array of {@link Note} objects.\n   *\n   * {@link Note} objects are returned as is. For note numbers and names, a {@link Note} object is\n   * created with the options specified. Invalid elements are simply ignored.\n   *\n   * @param [notes] {number|string|Note|number[]|string[]|Note[]}\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a decimal number between 0\n   * and 1.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a decimal number between 0\n   * and 1.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127.\n   *\n   * @returns {Note[]}\n   */\n  getValidNoteArray(notes, options = {}) {\n\n    let result = [];\n    if (!Array.isArray(notes)) notes = [notes];\n\n    notes.forEach(note => {\n\n      if (note instanceof Note) {\n        result.push(note);\n      } else {\n        let number = this.guessNoteNumber(note);\n        if (number !== false) result.push(new Note(number, options));\n      }\n\n    });\n\n    return result;\n\n  }\n\n  /**\n   * Returns a valid timestamp, relative to the navigation start of the document, derived from the\n   * `time` parameter. If the parameter is a string starting with the \"+\" sign and followed by a\n   * number, the resulting timestamp will be the sum of the current timestamp plus that number. If\n   * the parameter is a positive number, it will be returned as is. Otherwise, false will be\n   * returned.\n   *\n   * @param [time] {number|string} The time string (e.g. `\"+2000\"`) or number to parse\n   * @return {number} A positive number\n   */\n  convertToTimestamp(time) {\n\n    let value = false;\n    let parsed = parseFloat(time);\n    if (isNaN(parsed)) return false;\n\n    if (typeof time === \"string\" && time.substring(0, 1) === \"+\") {\n      if (parsed >= 0) value = performance.now() + parsed;\n    } else {\n      if (parsed >= 0) value = parsed;\n    }\n\n    return value;\n\n  };\n\n  /**\n   *\n   * @return {Promise<void>}\n   * @private\n   */\n  async _destroyInputsAndOutputs() {\n\n    let promises = [];\n\n    this.inputs.forEach(input => promises.push(input.destroy()));\n    this.outputs.forEach(output => promises.push(output.destroy()));\n\n    return Promise.all(promises).then(() => {\n      this._inputs = [];\n      this._outputs = [];\n    });\n\n  }\n\n  /**\n   * @private\n   */\n  _onInterfaceStateChange(e) {\n\n    this._updateInputsAndOutputs();\n\n    /**\n     * Event emitted when an {@link Input} or {@link Output} becomes available. This event is\n     * typically fired whenever a MIDI device is plugged in. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#connected\n     * @type {Object}\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n     * (in milliseconds since the navigation start of the document).\n     * @property {string} type `connected`\n     * @property {Input|Output} target The {@link Input} or {@link Output} object that triggered the\n     * event.\n     */\n\n    /**\n     * Event emitted when an {@link Input} or {@link Output} becomes unavailable. This event is\n     * typically fired whenever a MIDI device is unplugged. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#disconnected\n     * @type {Object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {string} type `disconnected`\n     * @property {Object} target Object with properties describing the {@link Input} or {@Output}\n     * that triggered the event.\n     * @property {string} target.connection `\"closed\"`\n     * @property {string} target.id ID of the input\n     * @property {string} target.manufacturer Manufacturer of the device that provided the input\n     * @property {string} target.name Name of the device that provided the input\n     * @property {string} target.state `disconnected`\n     * @property {string} target.type `input` or `output`\n     */\n    let event = {\n      timestamp: e.timeStamp,\n      type: e.port.state\n    };\n\n    if (this.interface && e.port.state === \"connected\") {\n\n      if (e.port.type === \"output\") {\n        event.port = this.getOutputById(e.port.id); // legacy\n        event.target = event.port;\n      } else if (e.port.type === \"input\") {\n        event.port = this.getInputById(e.port.id); // legacy\n        event.target = event.port;\n      }\n\n    } else {\n\n      // It feels more logical to include a `target` property instead of a `port` property. This is\n      // the terminology used everywhere in the library.\n      event.port = {\n        connection: \"closed\",\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n\n      event.target = event.port;\n\n    }\n\n    this.emit(e.port.state, event);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputsAndOutputs() {\n\n    return Promise.all([\n      this._updateInputs(),\n      this._updateOutputs()\n    ]);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputs() {\n\n    let promises = [];\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = 0; i < this._inputs.length; i++) {\n\n      let remove = true;\n\n      let updated = this.interface.inputs.values();\n\n      for (let input = updated.next(); input && !input.done; input = updated.next()) {\n        if (this._inputs[i]._midiInput === input.value) {\n          remove = false;\n          break;\n        }\n      }\n\n      if (remove) this._inputs.splice(i, 1);\n\n    }\n\n    // Check for items to add in the existing inputs array because they just appeared in the MIDI\n    // back-end inputs list. We must check for the existence of this.interface because it might\n    // have been closed via WebMidi.disable().\n    this.interface && this.interface.inputs.forEach(nInput => {\n\n      let add = true;\n\n      for (let j = 0; j < this._inputs.length; j++) {\n        if (this._inputs[j]._midiInput === nInput) {\n          add = false;\n        }\n      }\n\n      if (add) {\n        let input = new Input(nInput);\n        this._inputs.push(input);\n        promises.push(input.open());\n      }\n\n    });\n\n    return Promise.all(promises);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateOutputs() {\n\n    let promises = [];\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = 0; i < this._outputs.length; i++) {\n\n      let remove = true;\n\n      let updated = this.interface.outputs.values();\n\n      for (let output = updated.next(); output && !output.done; output = updated.next()) {\n        if (this._outputs[i]._midiOutput === output.value) {\n          remove = false;\n          break;\n        }\n      }\n\n      if (remove) {\n        this._outputs[i].close();\n        this._outputs.splice(i, 1);\n      }\n\n    }\n\n    // Check for items to add in the existing inputs array because they just appeared in the MIDI\n    // back-end outputs list. We must check for the existence of this.interface because it might\n    // have been closed via WebMidi.disable().\n    this.interface && this.interface.outputs.forEach(nOutput => {\n\n      let add = true;\n\n      for (let j = 0; j < this._outputs.length; j++) {\n        if (this._outputs[j]._midiOutput === nOutput) {\n          add = false;\n        }\n      }\n\n      if (add) {\n        let output = new Output(nOutput);\n        this._outputs.push(output);\n        promises.push(output.open());\n      }\n\n    });\n\n    return Promise.all(promises);\n\n  };\n\n  // injectPluginMarkup(parent) {\n  //\n  //   // Silently ignore on Node.js\n  //   if (this.isNode) return;\n  //\n  //   // Default to <body> if no parent is specified\n  //   if (!(parent instanceof Element) && !(parent instanceof HTMLDocument)) {\n  //     parent = document.body;\n  //   }\n  //\n  //   // IE10 needs this:\n  //   // <meta http-equiv=\"X-UA-Compatible\" content=\"requiresActiveX=true\"/>\n  //\n  //   // Create markup and add to parent\n  //   const obj = document.createElement(\"object\");\n  //   obj.classid = \"CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90\"; // IE\n  //   if (!obj.isJazz) obj.type = \"audio/x-jazz\";                 // Standards-compliant\n  //   obj.style.visibility = \"hidden\";\n  //   obj.style.width = obj.style.height = \"0px\";\n  //   parent.appendChild(obj);\n  //\n  // }\n\n  /**\n   * Indicates whether access to the host's MIDI subsystem is active or not.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get enabled() {\n    return this.interface !== null;\n  }\n\n  /**\n   * An array of all currently available MIDI inputs.\n   *\n   * @readonly\n   * @type {Array}\n   */\n  get inputs() {\n    return this._inputs;\n  }\n\n  /**\n   * Indicates whether the current environment is Node.js or not\n   * @type {boolean}\n   */\n  get isNode() {\n\n    return (Object.prototype.toString.call(\n      typeof process !== \"undefined\" ? process : 0\n    ) === \"[object process]\");\n\n  }\n\n  /**\n   * An integer to offset the octave both in inbound and outbound messages. By default, middle C\n   * (MIDI note number 60) is placed on the 4th octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * @type {number}\n   *\n   * @since 2.1\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n    value = parseInt(value);\n    if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be a valid number.\");\n    this._octaveOffset = value;\n  }\n\n  /**\n   * An array of all currently available MIDI outputs.\n   *\n   * @readonly\n   * @type {Array}\n   */\n  get outputs() {\n    return this._outputs;\n  }\n\n  /**\n   * Indicates whether the environment provides support for the Web MIDI API or not.\n   *\n   * **Note**: in environments that do not offer built-in MIDI support, this will report `true` if\n   * the `navigator.requestMIDIAccess` function is available. For example, if you have installed\n   * WebMIDIAPIShim.js but no plugin, this property will be `true` even though actual support might\n   * not be there.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get supported() {\n    return (navigator && navigator.requestMIDIAccess) ? true : false;\n  }\n\n  /**\n   * Indicates whether MIDI system exclusive messages have been activated when WebMidi.js was\n   * enabled via the `enable()` method.\n   *\n   * @readonly\n   * @type Boolean\n   */\n  get sysexEnabled() {\n    return !!(this.interface && this.interface.sysexEnabled);\n  }\n\n  /**\n   * The elapsed time, in milliseconds, since the\n   * [time origin]\n   * (https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp#The_time_origin). Said\n   * simply, it is the number of milliseconds that passed since the page was loaded. Being a\n   * floating-point number, it has sub-millisecond accuracy. According to the\n   * [specification](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp), the\n   * time should be accurate to 5 µs (microseconds). However, due to various constraints, the\n   * browser might only be accurate to one millisecond.\n   *\n   * @type {DOMHighResTimeStamp}\n   * @readonly\n   */\n  get time() {\n    return performance.now();\n  }\n\n  /**\n   * Enum of all MIDI channel voice messages and their associated numerical value:\n   *\n   * - `noteoff`: 0x8 (8)\n   * - `noteon`: 0x9 (9)\n   * - `keyaftertouch`: 0xA (10)\n   * - `controlchange`: 0xB (11)\n   * - `channelmode`: 0xB (11)\n   * - `nrpn`: 0xB (11)\n   * - `programchange`: 0xC (12)\n   * - `channelaftertouch`: 0xD (13)\n   * - `pitchbend`: 0xE (14)\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 3.0.0\n   */\n  get MIDI_CHANNEL_VOICE_MESSAGES() {\n\n    return {\n      noteoff: 0x8,           // 8\n      noteon: 0x9,            // 9\n      keyaftertouch: 0xA,     // 10\n      controlchange: 0xB,     // 11\n      channelmode: 0xB,       // 11\n      nrpn: 0xB,              // 11\n      programchange: 0xC,     // 12\n      channelaftertouch: 0xD, // 13\n      pitchbend: 0xE          // 14\n    };\n\n  }\n\n  /**\n   * Enum of all MIDI channel voice messages and their associated numerical value. Note that it\n   * has been deprecated since v3.0. You should now use\n   * [MIDI_CHANNEL_VOICE_MESSAGES]{@link WebMidi.MIDI_CHANNEL_VOICE_MESSAGES}.\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @deprecated since version 3.0 (will be dropped in version 4.0)\n   *\n   * @since 2.0.0\n   */\n  get MIDI_CHANNEL_MESSAGES() {\n    console.warn(\n      \"MIDI_CHANNEL_MESSAGES has been deprecated. Use MIDI_CHANNEL_VOICE_MESSAGES instead.\"\n    );\n    return this.MIDI_CHANNEL_VOICE_MESSAGES;\n  }\n\n  /**\n   * Enum of all channel mode messages and their associated numerical value:\n   *\n   * - `allsoundoff`: 120\n   * - `resetallcontrollers`: 121\n   * - `localcontrol`: 122\n   * - `allnotesoff`: 123\n   * - `omnimodeoff`: 124\n   * - `omnimodeon`: 125\n   * - `monomodeon`: 126\n   * - `polymodeon`: 127\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_CHANNEL_MODE_MESSAGES() {\n\n    return {\n      allsoundoff: 120,\n      resetallcontrollers: 121,\n      localcontrol: 122,\n      allnotesoff: 123,\n      omnimodeoff: 124,\n      omnimodeon: 125,\n      monomodeon: 126,\n      polymodeon: 127\n    };\n\n  }\n\n  /**\n   * Enum of all control change messages and their associated numerical value:\n   *\n   * - `bankselectcoarse`: 0\n   * - `modulationwheelcoarse`: 1\n   * - `breathcontrollercoarse`: 2\n   * - `footcontrollercoarse`: 4\n   * - `portamentotimecoarse`: 5\n   * - `dataentrycoarse`: 6\n   * - `volumecoarse`: 7\n   * - `balancecoarse`: 8\n   * - `pancoarse`: 10\n   * - `expressioncoarse`: 11\n   * - `effectcontrol1coarse`: 12\n   * - `effectcontrol2coarse`: 13\n   * - `generalpurposeslider1`: 16\n   * - `generalpurposeslider2`: 17\n   * - `generalpurposeslider3`: 18\n   * - `generalpurposeslider4`: 19\n   * - `bankselectfine`: 32\n   * - `modulationwheelfine`: 33\n   * - `breathcontrollerfine`: 34\n   * - `footcontrollerfine`: 36\n   * - `portamentotimefine`: 37\n   * - `dataentryfine`: 38\n   * - `volumefine`: 39\n   * - `balancefine`: 40\n   * - `panfine`: 42\n   * - `expressionfine`: 43\n   * - `effectcontrol1fine`: 44\n   * - `effectcontrol2fine`: 45\n   * - `holdpedal`: 64\n   * - `portamento`: 65\n   * - `sustenutopedal`: 66\n   * - `softpedal`: 67\n   * - `legatopedal`: 68\n   * - `hold2pedal`: 69\n   * - `soundvariation`: 70\n   * - `resonance`: 71\n   * - `soundreleasetime`: 72\n   * - `soundattacktime`: 73\n   * - `brightness`: 74\n   * - `soundcontrol6`: 75\n   * - `soundcontrol7`: 76\n   * - `soundcontrol8`:`77\n   * - `soundcontrol9`: 78\n   * - `soundcontrol10`: 79\n   * - `generalpurposebutton1`: 80\n   * - `generalpurposebutton2`: 81\n   * - `generalpurposebutton3`: 82\n   * - `generalpurposebutton4`: 83\n   * - `reverblevel`: 91\n   * - `tremololevel`: 92\n   * - `choruslevel`: 93\n   * - `celestelevel`: 94\n   * - `phaserlevel`: 95\n   * - `databuttonincrement`: 96\n   * - `databuttondecrement`: 97\n   * - `nonregisteredparametercoarse`: 98\n   * - `nonregisteredparameterfine`: 99\n   * - `registeredparametercoarse`: 100\n   * - `registeredparameterfine`: 101\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_CONTROL_CHANGE_MESSAGES() {\n\n    return {\n      bankselectcoarse: 0,\n      modulationwheelcoarse: 1,\n      breathcontrollercoarse: 2,\n      footcontrollercoarse: 4,\n      portamentotimecoarse: 5,\n      dataentrycoarse: 6,\n      volumecoarse: 7,\n      balancecoarse: 8,\n      pancoarse: 10,\n      expressioncoarse: 11,\n      effectcontrol1coarse: 12,\n      effectcontrol2coarse: 13,\n      generalpurposeslider1: 16,\n      generalpurposeslider2: 17,\n      generalpurposeslider3: 18,\n      generalpurposeslider4: 19,\n      bankselectfine: 32,\n      modulationwheelfine: 33,\n      breathcontrollerfine: 34,\n      footcontrollerfine: 36,\n      portamentotimefine: 37,\n      dataentryfine: 38,\n      volumefine: 39,\n      balancefine: 40,\n      panfine: 42,\n      expressionfine: 43,\n      effectcontrol1fine: 44,\n      effectcontrol2fine: 45,\n      holdpedal: 64,\n      portamento: 65,\n      sustenutopedal: 66,\n      softpedal: 67,\n      legatopedal: 68,\n      hold2pedal: 69,\n      soundvariation: 70,\n      resonance: 71,\n      soundreleasetime: 72,\n      soundattacktime: 73,\n      brightness: 74,\n      soundcontrol6: 75,\n      soundcontrol7: 76,\n      soundcontrol8: 77,\n      soundcontrol9: 78,\n      soundcontrol10: 79,\n      generalpurposebutton1: 80,\n      generalpurposebutton2: 81,\n      generalpurposebutton3: 82,\n      generalpurposebutton4: 83,\n      reverblevel: 91,\n      tremololevel: 92,\n      choruslevel: 93,\n      celestelevel: 94,\n      phaserlevel: 95,\n      databuttonincrement: 96,\n      databuttondecrement: 97,\n      nonregisteredparametercoarse: 98,\n      nonregisteredparameterfine: 99,\n      registeredparametercoarse: 100,\n      registeredparameterfine: 101\n    };\n\n  }\n\n  /**\n   * Array of valid events triggered at the interface level.\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  get MIDI_INTERFACE_EVENTS() {\n    return [\"connected\", \"disconnected\"];\n  }\n\n  /**\n   * Enum of all control change messages that are used to create NRPN messages and their associated\n   * numerical value:\n   *\n   * - `entrymsb`: 6\n   * - `entrylsb`: 38\n   * - `increment`: 96\n   * - `decrement`: 97\n   * - `paramlsb`: 98\n   * - `parammsb`: 99\n   * - `nullactiveparameter`: 127\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_NRPN_MESSAGES() {\n\n    return {\n      entrymsb: 6,\n      entrylsb: 38,\n      increment: 96,\n      decrement: 97,\n      paramlsb: 98,\n      parammsb: 99,\n      nullactiveparameter: 127\n    };\n\n  }\n\n  /**\n   * Enum of all registered parameters and their associated pair of numerical values. MIDI\n   * registered parameters extend the original list of control change messages. Currently, there are\n   * only a limited number of them:\n   *\n   * - `pitchbendrange`: [0x00, 0x00]\n   * - `channelfinetuning`: [0x00, 0x01]\n   * - `channelcoarsetuning`: [0x00, 0x02]\n   * - `tuningprogram`: [0x00, 0x03]\n   * - `tuningbank`: [0x00, 0x04]\n   * - `modulationrange`: [0x00, 0x05]\n   * - `azimuthangle`: [0x3D, 0x00]\n   * - `elevationangle`: [0x3D, 0x01]\n   * - `gain`: [0x3D, 0x02]\n   * - `distanceratio`: [0x3D, 0x03]\n   * - `maximumdistance`: [0x3D, 0x04]\n   * - `maximumdistancegain`: [0x3D, 0x05]\n   * - `referencedistanceratio`: [0x3D, 0x06]\n   * - `panspreadangle`: [0x3D, 0x07]\n   * - `rollangle`: [0x3D, 0x08]\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_REGISTERED_PARAMETER() {\n\n    return {\n      pitchbendrange: [0x00, 0x00],\n      channelfinetuning: [0x00, 0x01],\n      channelcoarsetuning: [0x00, 0x02],\n      tuningprogram: [0x00, 0x03],\n      tuningbank: [0x00, 0x04],\n      modulationrange: [0x00, 0x05],\n      azimuthangle: [0x3D, 0x00],\n      elevationangle: [0x3D, 0x01],\n      gain: [0x3D, 0x02],\n      distanceratio: [0x3D, 0x03],\n      maximumdistance: [0x3D, 0x04],\n      maximumdistancegain: [0x3D, 0x05],\n      referencedistanceratio: [0x3D, 0x06],\n      panspreadangle: [0x3D, 0x07],\n      rollangle: [0x3D, 0x08]\n    };\n\n  }\n\n  /**\n   * Enum of all valid MIDI system messages and matching numerical values. WebMidi.js also uses\n   * two custom messages.\n   *\n   * **System common messages**\n   * - `sysex`: 0xF0 (240)\n   * - `timecode`: 0xF1 (241)\n   * - `songposition`: 0xF2 (242)\n   * - `songselect`: 0xF3 (243)\n   * - `tunerequest`: 0xF6 (246)\n   * - `sysexend`: 0xF7 (247)\n   *\n   * The `sysexend` message is never actually received. It simply ends a sysex stream.\n   *\n   * **System real-time messages**\n   *\n   * - `clock`: 0xF8 (248)\n   * - `start`: 0xFA (250)\n   * - `continue`: 0xFB (251)\n   * - `stop`: 0xFC (252)\n   * - `activesensing`: 0xFE (254)\n   * - `reset`: 0xFF (255)\n   *\n   * Values 249 and 253 are actually relayed by the Web MIDI API but they do not serve a specific\n   * purpose. The\n   * [MIDI 1.0 spec](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n   * simply states that they are undefined/reserved.\n   *\n   * **Custom WebMidi.js messages**\n   *\n   * - `midimessage`: 0\n   * - `unknownsystemmessage`: -1\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_SYSTEM_MESSAGES() {\n\n    return {\n\n      // System common messages\n      sysex: 0xF0,            // 240\n      timecode: 0xF1,         // 241\n      songposition: 0xF2,     // 242\n      songselect: 0xF3,       // 243\n      tunerequest: 0xF6,      // 246\n      tuningrequest: 0xF6,    // for backwards-compatibility (deprecated in version 3.0)\n      sysexend: 0xF7,         // 247 (never actually received - simply ends a sysex)\n\n      // System real-time messages\n      clock: 0xF8,            // 248\n      start: 0xFA,            // 250\n      continue: 0xFB,         // 251\n      stop: 0xFC,             // 252\n      activesensing: 0xFE,    // 254\n      reset: 0xFF,            // 255\n\n      // Custom WebMidi.js messages\n      midimessage: 0,\n      unknownsystemmessage: -1\n\n    };\n\n  }\n\n  /**\n   * Array of standard note names\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  get NOTES() {\n    return [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n  }\n\n}\n\n// Export singleton instance of WebMidi class. The 'constructor' is nulled so that it cannot be used\n// to instantiate a new WebMidi object or extend it. However, it is not freezed so it remains\n// extensible (properties can be added at will).\nconst wm = new WebMidi();\nwm.constructor = null;\nexport {wm as WebMidi};\n\nexport {Note} from \"./Note.js\";\n"],"names":["EventEmitter","[object Object]","eventsSuspended","this","eventMap","event","callback","options","length","String","ANY_EVENT","TypeError","listener","Listener","prepend","unshift","push","remaining","addListener","Symbol","for","undefined","Object","entries","some","value","filter","eventNames","keys","getListeners","forEach","suspended","args","results","listeners","concat","params","Array","isArray","arguments","apply","context","count","remove","duration","parseInt","isNaN","Infinity","Promise","resolve","reject","timeout","clearTimeout","setTimeout","eventCount","target","ReferenceError","assign","removeListener","InputChannel","constructor","input","number","_nrpnBuffer","nrpnEventsEnabled","destroy","_parseEvent","e","dataBytes","data","WebMidi","MIDI_SYSTEM_MESSAGES","sysex","slice","midiMessageEvent","statusByte","timestamp","timeStamp","type","emit","_parseEventForNrpnMessage","_parseEventForStandardMessages","command","data1","data2","MIDI_CHANNEL_VOICE_MESSAGES","noteoff","noteon","note","name","NOTES","octave","getOctave","release","rawRelease","attack","rawVAttack","keyaftertouch","rawValue","controlchange","controller","getCcNameByNumber","channelmode","getChannelModeByNumber","programchange","channelaftertouch","pitchbend","Math","floor","status","cm","MIDI_CHANNEL_MODE_MESSAGES","hasOwnProperty","channel","MIDI_NRPN_MESSAGES","increment","parammsb","entrymsb","entrylsb","ccEvent","nullactiveparameter","paramlsb","decrement","rawData","ev","nrpnNumber","nrpnValue","nrpnControllerType","NRPN_TYPES","Error","nrpnEvent","_nrpnEventsEnabled","enabled","Input","midiInput","_midiInput","channels","i","onstatechange","_onStateChange","bind","onmidimessage","_onMidiMessage","ch","close","time","port","connection","state","id","manufacturer","console","warn","timecode","songposition","songselect","song","tunerequest","clock","start","continue","stop","activesensing","reset","open","err","cc","MIDI_CONTROL_CHANGE_MESSAGES","sanitizeChannels","addOneTimeListener","on","hasListener","every","OutputChannel","output","send","setKeyAftertouch","pressure","parseFloat","useRawValue","RangeError","getValidNoteArray","n","round","convertToTimestamp","sendControlChange","_selectNonRegisteredParameter","parameter","_deselectRegisteredParameter","_selectRegisteredParameter","_setCurrentRegisteredParameter","decrementRegisteredParameter","MIDI_REGISTERED_PARAMETER","incrementRegisteredParameter","playNote","sendNoteOn","isFinite","trim","NaN","sendNoteOff","rawVelocity","velocity","nVelocity","o","stopNote","rawAttack","sendChannelMode","setOmniMode","setChannelAftertouch","setMasterTuning","coarse","fine","msb","lsb","setRegisteredParameter","setModulationRange","semitones","cents","setNonRegisteredParameter","setPitchBend","nLevel","setPitchBendRange","setProgram","program","setTuningBank","setTuningProgram","setLocalControl","turnNotesOff","turnSoundOff","resetAllControllers","setPolyphonicMode","mode","Output","midiOutput","_midiOutput","sendSysex","sysexend","clear","sendTimecodeQuarterFrame","setSongPosition","sendSongPosition","setSong","sendSongSelect","sendTuneRequest","sendClock","sendStart","sendContinue","sendStop","sendActiveSensing","sendReset","sendTuningRequest","sendKeyAftertouch","sendChannelAftertouch","sendPitchBend","bend","sendProgramChange","Note","Number","isInteger","_number","guessNoteNumber","_duration","max","_channels","_rawAttack","min","_rawRelease","interface","_inputs","_outputs","_stateChangeQueue","_octaveOffset","isNode","global","navigator","require","performance","enable","supported","intervalID","setInterval","clearInterval","error","requestMIDIAccess","software","_onInterfaceStateChange","ports","_updateInputsAndOutputs","inputs","outputs","disable","_destroyInputsAndOutputs","then","getInputById","toString","getInputByName","indexOf","getOutputByName","getOutputById","getNoteNumberByName","matches","match","C","D","E","F","G","A","B","semitone","toUpperCase","result","octaveOffset","toLowerCase","noteNameToNumber","map","toMIDIChannels","notes","parsed","substring","now","promises","all","_updateInputs","_updateOutputs","updated","values","next","done","splice","nInput","add","j","nOutput","prototype","call","process","sysexEnabled","nrpn","MIDI_CHANNEL_MESSAGES","allsoundoff","resetallcontrollers","localcontrol","allnotesoff","omnimodeoff","omnimodeon","monomodeon","polymodeon","bankselectcoarse","modulationwheelcoarse","breathcontrollercoarse","footcontrollercoarse","portamentotimecoarse","dataentrycoarse","volumecoarse","balancecoarse","pancoarse","expressioncoarse","effectcontrol1coarse","effectcontrol2coarse","generalpurposeslider1","generalpurposeslider2","generalpurposeslider3","generalpurposeslider4","bankselectfine","modulationwheelfine","breathcontrollerfine","footcontrollerfine","portamentotimefine","dataentryfine","volumefine","balancefine","panfine","expressionfine","effectcontrol1fine","effectcontrol2fine","holdpedal","portamento","sustenutopedal","softpedal","legatopedal","hold2pedal","soundvariation","resonance","soundreleasetime","soundattacktime","brightness","soundcontrol6","soundcontrol7","soundcontrol8","soundcontrol9","soundcontrol10","generalpurposebutton1","generalpurposebutton2","generalpurposebutton3","generalpurposebutton4","reverblevel","tremololevel","choruslevel","celestelevel","phaserlevel","databuttonincrement","databuttondecrement","nonregisteredparametercoarse","nonregisteredparameterfine","registeredparametercoarse","registeredparameterfine","MIDI_INTERFACE_EVENTS","pitchbendrange","channelfinetuning","channelcoarsetuning","tuningprogram","tuningbank","modulationrange","azimuthangle","elevationangle","gain","distanceratio","maximumdistance","maximumdistancegain","referencedistanceratio","panspreadangle","rollangle","tuningrequest","midimessage","unknownsystemmessage","wm"],"mappings":"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"}