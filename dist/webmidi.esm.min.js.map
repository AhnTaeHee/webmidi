{"version":3,"file":"webmidi.esm.min.js","sources":["../node_modules/djipevents/dist/djipevents.esm.min.js","../src/InputChannel.js","../src/Input.js","../src/OutputChannel.js","../src/Output.js","../src/Note.js","../src/WebMidi.js"],"sourcesContent":["class e{constructor(e=!1){this.eventMap={},this.eventsSuspended=1==e}addListener(n,r,i={}){if(\"string\"==typeof n&&n.length<1||n instanceof String&&n.length<1||\"string\"!=typeof n&&!(n instanceof String)&&n!==e.ANY_EVENT)throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");if(\"function\"!=typeof r)throw new TypeError(\"The callback must be a function.\");const s=new t(n,this,r,i);return this.eventMap[n]||(this.eventMap[n]=[]),i.prepend?this.eventMap[n].unshift(s):this.eventMap[n].push(s),s}addOneTimeListener(e,t,n={}){n.remaining=1,this.addListener(e,t,n)}static get ANY_EVENT(){return Symbol.for(\"Any event\")}hasListener(n,r){if(void 0===n)return!!(this.eventMap[e.ANY_EVENT]&&this.eventMap[e.ANY_EVENT].length>0)||Object.entries(this.eventMap).some(([,e])=>e.length>0);if(this.eventMap[n]&&this.eventMap[n].length>0){if(r instanceof t){return this.eventMap[n].filter(e=>e===r).length>0}if(\"function\"==typeof r){return this.eventMap[n].filter(e=>e.callback===r).length>0}return null==r}return!1}get eventNames(){return Object.keys(this.eventMap)}getListeners(e){return this.eventMap[e]||[]}suspendEvent(e){this.getListeners(e).forEach(e=>{e.suspended=!0})}unsuspendEvent(e){this.getListeners(e).forEach(e=>{e.suspended=!1})}getListenerCount(e){return this.getListeners(e).length}emit(t,...n){if(\"string\"!=typeof t&&!(t instanceof String))throw new TypeError(\"The 'event' parameter must be a string.\");if(this.eventsSuspended)return;let r=[],i=this.eventMap[e.ANY_EVENT]||[];return this.eventMap[t]&&(i=i.concat(this.eventMap[t])),i.forEach(e=>{if(e.suspended)return;let t=[...n];Array.isArray(e.arguments)&&(t=t.concat(e.arguments)),e.remaining>0&&(r.push(e.callback.apply(e.context,t)),e.count++),--e.remaining<1&&e.remove()}),r}removeListener(e,t,n={}){if(void 0===e)return void(this.eventMap={});if(!this.eventMap[e])return;let r=this.eventMap[e].filter(e=>t&&e.callback!==t||n.remaining&&n.remaining!==e.remaining||n.context&&n.context!==e.context);r.length?this.eventMap[e]=r:delete this.eventMap[e]}async waitFor(e,t={}){return t.duration=parseInt(t.duration),(isNaN(t.duration)||t.duration<=0)&&(t.duration=1/0),new Promise((n,r)=>{let i,s=this.addListener(e,()=>{clearTimeout(i),n()},{remaining:1});t.duration!==1/0&&(i=setTimeout(()=>{s.remove(),r(\"The duration expired before the event was emitted.\")},t.duration))})}get eventCount(){return Object.keys(this.eventMap).length}}class t{constructor(t,n,r,i={}){if(\"string\"!=typeof t&&!(t instanceof String)&&t!==e.ANY_EVENT)throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");if(!n)throw new ReferenceError(\"The 'target' parameter is mandatory.\");if(\"function\"!=typeof r)throw new TypeError(\"The 'callback' must be a function.\");void 0===i.arguments||Array.isArray(i.arguments)||(i.arguments=[i.arguments]),(i=Object.assign({context:n,remaining:1/0,arguments:void 0,duration:1/0},i)).duration!==1/0&&setTimeout(()=>this.remove(),i.duration),this.event=t,this.target=n,this.callback=r,this.context=i.context,this.remaining=parseInt(i.remaining)>=1?parseInt(i.remaining):1/0,this.count=0,this.arguments=i.arguments,this.suspended=!1}remove(){this.target.removeListener(this.event,this.callback,{context:this.context,remaining:this.remaining})}}export{e as EventEmitter,t as Listener};\n//# sourceMappingURL=djipevents.esm.min.js.map\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {WebMidi} from \"./WebMidi.js\";\n\n/**\n * The `InputChannel` class represents a single input channel (1-16) from an input device. This\n * object is derived from the host's MIDI subsystem and cannot be instantiated directly.\n *\n * All 16 `InputChannel` objects can be found inside the input's [channels]{@link Input#channels}\n * property.\n *\n * The `InputChannel` class extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [addListener()](https://djipco.github.io/djipevents/EventEmitter.html#addListener),\n * [removeListener()](https://djipco.github.io/djipevents/EventEmitter.html#removeListener),\n * [hasListener()](https://djipco.github.io/djipevents/EventEmitter.html#hasListener) and several\n * others.\n *\n * @param {Input} input The `Input` this channel belongs to\n * @param {number} number The channel's number (1-16)\n *\n * @fires InputChannel#midimessage\n * @fires InputChannel#noteoff\n * @fires InputChannel#noteon\n * @fires InputChannel#keyaftertouch\n * @fires InputChannel#controlchange\n * @fires InputChannel#channelmode\n * @fires InputChannel#programchange\n * @fires InputChannel#channelaftertouch\n * @fires InputChannel#pitchbend\n *\n * @since 3.0.0\n */\nexport class InputChannel extends EventEmitter {\n\n  constructor(input, number) {\n\n    super();\n\n    /**\n     * The {@link Input} this channel belongs to\n     * @type {Input}\n     */\n    this.input = input;\n\n    /**\n     * This channel's number (1-16)\n     * @type {number}\n     */\n    this.number = number;\n\n    /**\n     * An array of the current NRPNs being constructed for this channel\n     *\n     * @private\n     *\n     * @type {string[]}\n     */\n    this._nrpnBuffer = [];\n\n    // Enable NRPN events by default\n    this.nrpnEventsEnabled = true;\n\n  }\n\n  destroy() {\n    this.input = null;\n    this.removeListener();\n  }\n\n  /**\n   * @param e Event\n   * @protected\n   */\n  _parseEvent(e) {\n\n    // Extract data bytes (unless it's a sysex message)\n    let dataBytes = null;\n    if (e.data[0] !== WebMidi.MIDI_SYSTEM_MESSAGES.sysex) dataBytes = e.data.slice(1);\n\n    /**\n     * Event emitted when a MIDI message is received on the `InputChannel`\n     *\n     * @event InputChannel#midimessage\n     * @type {Object}\n     * @property {InputChannel} target The `InputChannel` that triggered the event.\n     * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n     * @property {number} event.statusByte The message's status byte.\n     * @property {?number[]} event.dataBytes The message's data bytes as an array of 0, 1 or 2\n     * integers. This will be null for `sysex` messages.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"midimessage\"`\n     */\n    let midiMessageEvent = {\n      target: this,\n      statusByte: e.data[0],\n      dataBytes: dataBytes,\n      data: e.data,\n      timestamp: e.timeStamp,\n      type: \"midimessage\"\n    };\n\n    this.emit(\"midimessage\", midiMessageEvent);\n\n    // Parse the event to see if its part of an NRPN sequence\n    this._parseEventForNrpnMessage(e);\n\n    // Parse the inbound event for regular messages\n    this._parseEventForStandardMessages(e);\n\n  }\n\n  _parseEventForStandardMessages(e) {\n\n    let command = e.data[0] >> 4;\n    let data1, data2;\n\n    if (e.data.length > 1) {\n      data1 = e.data[1];\n      data2 = e.data.length > 2 ? e.data[2] : undefined;\n    }\n\n    // Returned event\n    let event = {\n      target: this,\n      data: e.data,\n      timestamp: e.timeStamp\n    };\n\n    if (\n      command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.noteoff ||\n      (command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.noteon && data2 === 0)\n    ) {\n\n      /**\n       * Event emitted when a **note off** MIDI message has been received.\n       *\n       * @event InputChannel#noteoff\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"noteoff\"`\n       * @property {Object} note\n       * @property {Object} note.number The MIDI note number.\n       * @property {Object} note.name The usual note name (C, C#, D, D#, etc.).\n       * @property {Object} note.octave The octave (between -2 and 8).\n       * @property {number} release The release velocity expressed as a float between 0 and 1.\n       * @property {number} rawRelease The release velocity expressed as an integer (between 0 and\n       * 127).\n       */\n      event.type = \"noteoff\";\n      event.note = {\n        number: data1,\n        name: WebMidi.NOTES[data1 % 12],\n        octave: WebMidi.getOctave(data1)\n      };\n      event.release = data2 / 127;\n      event.rawRelease = data2;\n\n    } else if (command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.noteon) {\n\n      /**\n       * Event emitted when a **note on** MIDI message has been received.\n       *\n       * @event InputChannel#noteon\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"noteon\"`\n       * @property {Object} note\n       * @property {Object} note.number The MIDI note number.\n       * @property {Object} note.name The usual note name (C, C#, D, D#, etc.).\n       * @property {Object} note.octave The octave (between -2 and 8).\n       * @property {number} attack The attack velocity expressed as a float between 0 and 1.\n       * @property {number} rawAttack The attack velocity expressed as an integer (between 0 and\n       * 127).\n       */\n      event.type = \"noteon\";\n      event.note = {\n        number: data1,\n        name: WebMidi.NOTES[data1 % 12],\n        octave: WebMidi.getOctave(data1)\n      };\n      event.attack = data2 / 127;\n      event.rawVAttack = data2;\n\n    } else if (command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.keyaftertouch) {\n\n      /**\n       * Event emitted when a key-specific aftertouch MIDI message has been received.\n       *\n       * @event InputChannel#keyaftertouch\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"keyaftertouch\"`\n       * @property {Object} note\n       * @property {Object} note.number The MIDI note number.\n       * @property {Object} note.name The usual note name (C, C#, D, D#, etc.).\n       * @property {Object} note.octave The octave (between -2 and 8).\n       * @property {number} value The aftertouch amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The aftertouch amount expressed as an integer (between 0 and\n       * 127).\n       */\n      event.type = \"keyaftertouch\";\n      event.note = {\n        number: data1,\n        name: WebMidi.NOTES[data1 % 12],\n        octave: WebMidi.getOctave(data1)\n      };\n      event.value = data2 / 127;\n      event.rawValue = data2;\n\n    } else if (\n      command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.controlchange &&\n      data1 >= 0 && data1 <= 119\n    ) {\n\n      /**\n       * Event emitted when a control change MIDI message has been received.\n       *\n       * @event InputChannel#controlchange\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"controlchange\"`\n       * @property {Object} controller\n       * @property {Object} controller.number The number of the controller.\n       * @property {Object} controller.name The usual name or function of the controller.\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      event.type = \"controlchange\";\n      event.controller = {\n        number: data1,\n        name: this.getCcNameByNumber(data1)\n      };\n      event.value = data2 / 127;\n      event.rawValue = data2;\n\n    } else if (\n      command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.channelmode &&\n      data1 >= 120 && data1 <= 127\n    ) {\n\n      /**\n       * Event emitted when a channel mode MIDI message has been received.\n       *\n       * @event InputChannel#channelmode\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"channelmode\"`\n       * @property {Object} controller\n       * @property {Object} controller.number The number of the controller.\n       * @property {Object} controller.name The usual name or function of the controller.\n       * @property {number} value The value expressed as a float between 0 and 1.\n       */\n      event.type = \"channelmode\";\n      event.controller = {\n        number: data1,\n        name: this.getChannelModeByNumber(data1)\n      };\n      event.value = data2;\n\n    } else if (command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.programchange) {\n\n      /**\n       * Event emitted when a program change MIDI message has been received.\n       *\n       * @event InputChannel#programchange\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"programchange\"`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       */\n\n      /**\n       * @param {uint} event.value The value received (between 0 and 127).\n       */\n      event.type = \"programchange\";\n      event.value = data1;\n\n    } else if (command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.channelaftertouch) {\n\n      /**\n       * Event emitted when a control change MIDI message has been received.\n       *\n       * @event InputChannel#channelaftertouch\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"channelaftertouch\"`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      event.type = \"channelaftertouch\";\n      event.value = data1 / 127;\n      event.rawValue = data1;\n\n    } else if (command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.pitchbend) {\n\n      /**\n       * Event emitted when a pitch bend MIDI message has been received.\n       *\n       * @event InputChannel#pitchbend\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"pitchbend\"`\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 16383).\n       */\n      event.type = \"pitchbend\";\n      event.value = ((data2 << 7) + data1 - 8192) / 8192;\n      event.rawValue = (data2 << 7) + data1;\n\n    } else {\n      event.type = \"unknownmessage\";\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Returns the channel mode name matching the specified number. If no match is found, the function\n   * returns `false`.\n   *\n   * @param {number} number An integer representing the channel mode message.\n   * @returns {string|false} The name of the matching channel mode or `false` if not match could be\n   * found.\n   *\n   * @since 2.0.0\n   */\n  getChannelModeByNumber(number) {\n\n    number = Math.floor(number);\n\n    if ( !(number >= 120 && status <= 127) ) return false;\n\n    for (let cm in WebMidi.MIDI_CHANNEL_MODE_MESSAGES) {\n\n      if (\n        WebMidi.MIDI_CHANNEL_MODE_MESSAGES.hasOwnProperty(cm) &&\n        number === WebMidi.MIDI_CHANNEL_MODE_MESSAGES[cm]\n      ) {\n        return cm;\n      }\n\n    }\n\n  }\n\n  /**\n   * Parses channel events and constructs NRPN message parts in valid sequences.\n   * Keeps a separate NRPN buffer for each channel.\n   * Emits an event after it receives the final CC parts msb 127 lsb 127.\n   * If a message is incomplete and other messages are received before\n   * the final 127 bytes, the incomplete message is cleared.\n   * @param e Event\n   * @private\n   */\n  _parseEventForNrpnMessage(e) {\n\n    if (!this.nrpnEventsEnabled) return;\n\n    // Extract basic data\n    let command = e.data[0] >> 4;\n    let channel = (e.data[0] & 0xf) + 1;\n    let data1;\n    let data2;\n\n    if (e.data.length > 1) {\n      data1 = e.data[1];\n      data2 = e.data.length > 2 ? e.data[2] : undefined;\n    }\n\n    // Message not valid for NRPN\n    if (\n      !(\n        command === WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.controlchange &&\n        (\n          (\n            data1 >= WebMidi.MIDI_NRPN_MESSAGES.increment &&\n            data1 <= WebMidi.MIDI_NRPN_MESSAGES.parammsb\n          ) ||\n          data1 === WebMidi.MIDI_NRPN_MESSAGES.entrymsb ||\n          data1 === WebMidi.MIDI_NRPN_MESSAGES.entrylsb\n        )\n      )\n    ) {\n      return;\n    }\n\n    // set up a CC event to parse as NRPN part\n    let ccEvent = {\n      target: this,\n      type: \"controlchange\",\n      data: e.data,\n      timestamp: e.timeStamp,\n      channel: channel,\n      controller: {\n        number: data1,\n        name: this.getCcNameByNumber(data1)\n      },\n      value: data2\n    };\n\n    if (\n      // if we get a starting MSB (CC99 - 0-126) vs an end MSB (CC99 - 127), destroy incomplete NRPN\n      // and begin building again\n      ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.parammsb &&\n      ccEvent.value != WebMidi.MIDI_NRPN_MESSAGES.nullactiveparameter\n    ) {\n      this._nrpnBuffer = [];\n      this._nrpnBuffer[0] = ccEvent;\n    } else if(\n      // add the param LSB\n      this._nrpnBuffer.length === 1 &&\n      ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.paramlsb\n    ) {\n      this._nrpnBuffer.push(ccEvent);\n\n    } else if(\n      // add data inc/dec or value MSB for 14bit\n      this._nrpnBuffer.length === 2 &&\n      (ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.increment ||\n        ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.decrement ||\n        ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.entrymsb)\n    ) {\n      this._nrpnBuffer.push(ccEvent);\n    } else if(\n      // if we have a value MSB, only add an LSB to pair with that\n      this._nrpnBuffer.length === 3 &&\n      this._nrpnBuffer[2].number === WebMidi.MIDI_NRPN_MESSAGES.entrymsb &&\n      ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.entrylsb\n    ) {\n      this._nrpnBuffer.push(ccEvent);\n\n    } else if(\n      // add an end MSB (CC99 - 127)\n      this._nrpnBuffer.length >= 3 &&\n      this._nrpnBuffer.length <= 4 &&\n      ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.parammsb &&\n      ccEvent.value === WebMidi.MIDI_NRPN_MESSAGES.nullactiveparameter\n    ) {\n      this._nrpnBuffer.push(ccEvent);\n    } else if(\n      // add an end LSB (CC99 - 127)\n      this._nrpnBuffer.length >= 4 &&\n      this._nrpnBuffer.length <= 5 &&\n      ccEvent.controller.number === WebMidi.MIDI_NRPN_MESSAGES.paramlsb &&\n      ccEvent.value === WebMidi.MIDI_NRPN_MESSAGES.nullactiveparameter\n    ) {\n      this._nrpnBuffer.push(ccEvent);\n      // now we have a full inc or dec NRPN message, lets create that event!\n\n      let rawData = [];\n\n      this._nrpnBuffer.forEach(ev => rawData.push(ev.data));\n\n      let nrpnNumber = (this._nrpnBuffer[0].value<<7) | (this._nrpnBuffer[1].value);\n      let nrpnValue = this._nrpnBuffer[2].value;\n      if (this._nrpnBuffer.length === 6) {\n        nrpnValue = (this._nrpnBuffer[2].value<<7) | (this._nrpnBuffer[3].value);\n      }\n\n      let nrpnControllerType = \"\";\n\n      switch (this._nrpnBuffer[2].controller.number) {\n      case WebMidi.MIDI_NRPN_MESSAGES.entrymsb:\n        nrpnControllerType = InputChannel.NRPN_TYPES[0];\n        break;\n      case WebMidi.MIDI_NRPN_MESSAGES.increment:\n        nrpnControllerType = InputChannel.NRPN_TYPES[1];\n        break;\n      case WebMidi.MIDI_NRPN_MESSAGES.decrement:\n        nrpnControllerType = InputChannel.NRPN_TYPES[2];\n        break;\n      default:\n        throw new Error(\"The NPRN type was unidentifiable.\");\n      }\n\n      // now we are done building an NRPN, so clear the NRPN buffer\n      this._nrpnBuffer = [];\n\n      /**\n       * Event emitted when a valid NRPN message sequence has been received.\n       *\n       * @event InputChannel#nrpn\n       * @type {Object}\n       * @property {InputChannel} target The `InputChannel` that triggered the event.\n       * @property {Uint8Array} data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"nrpn\"`\n       * @property {Object} controller\n       * @property {Object} controller.number The number of the NRPN.\n       * @property {Object} controller.name The usual name or function of the controller.\n       * @property {number} value The aftertouch amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The aftertouch amount expressed as an integer (between 0 and\n       * 65535).\n       */\n      let nrpnEvent = {\n        timestamp: ccEvent.timestamp,\n        channel: ccEvent.channel,\n        type: \"nrpn\",\n        data: rawData,\n        controller: {\n          number: nrpnNumber,\n          type: nrpnControllerType,\n          name: \"Non-Registered Parameter \" + nrpnNumber\n        },\n        value: nrpnValue / 65535,\n        rawValue: nrpnValue\n      };\n\n      this.emit(nrpnEvent.type, nrpnEvent);\n\n    } else {\n      // something didn't match, clear the incomplete NRPN message buffer\n      this._nrpnBuffer = [];\n    }\n  }\n\n  /**\n   * Indicates whether events for **Non-Registered Parameter Number** should be dispatched. NRPNs\n   * are composed of a sequence of specific **control change** messages. When a valid sequence of\n   * such control change messages is received, an `nrpn` event will fire. If an invalid or out of\n   * order control change message is received, it will fall through the collector logic and all\n   * buffered control change messages will be discarded as incomplete.\n   *\n   * @type Boolean\n   */\n  get nrpnEventsEnabled() {\n    return this._nrpnEventsEnabled;\n  }\n  set nrpnEventsEnabled(enabled) {\n    this._nrpnEventsEnabled = !!enabled;\n  }\n\n  /**\n   * Array of valid **non-registered parameter number** (NRPNs) types.\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  static get NRPN_TYPES() {\n    return [\"entry\", \"increment\", \"decrement\"];\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {WebMidi} from \"./WebMidi.js\";\nimport {InputChannel} from \"./InputChannel.js\";\n\n/**\n * The `Input` class represents a MIDI input port. This object is derived from the host's MIDI\n * subsystem and cannot be instantiated directly.\n *\n * You can find a list of all available `Input` objects in the {@link WebMidi#inputs} array.\n *\n * The `Input` class extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [getListeners()](https://djipco.github.io/djipevents/EventEmitter.html#getListeners),\n * [emit()](https://djipco.github.io/djipevents/EventEmitter.html#emit),\n * [suspendEvent()](https://djipco.github.io/djipevents/EventEmitter.html#suspendEvent) and several\n * others.\n *\n * The `addListener()`, `addOneTimeListener()`, `hasListener()` and `removeListener()` methods are\n * being overridden in this class to include a `channel` parameter which makes it possible to\n * add/remove listeners from several channels at once. Note that, when adding events to channels, it\n * is the {@link InputChannel} instance that gets a listener added and not the `Input` instance.\n *\n * Also note that several events are input-wide and not tied to a channel. Examples of these are\n * `\"opened\"`, `\"midimessage\"`, `\"sysex\"`, etc. In such cases, simply pass `undefined` as the\n * `channel` parameter.\n *\n * @param {MIDIInput} midiInput `MIDIInput` object as provided by the MIDI subsystem (Web MIDI API).\n *\n * @fires Input#opened\n * @fires Input#disconnected\n * @fires Input#closed\n * @fires Input#midimessage\n * @fires Input#sysex\n * @fires Input#timecode\n * @fires Input#songposition\n * @fires Input#songselect\n * @fires Input#tunerequest\n * @fires Input#clock\n * @fires Input#start\n * @fires Input#continue\n * @fires Input#stop\n * @fires Input#activesensing\n * @fires Input#reset\n * @fires Input#midimessage\n * @fires Input#unknownmidimessage\n */\nexport class Input extends EventEmitter {\n\n  constructor(midiInput) {\n\n    super();\n\n    /**\n     * Reference to the actual MIDIInput object\n     * @private\n     */\n    this._midiInput = midiInput;\n\n    /**\n     * Array containing the 16 {@link InputChannel} objects available for this `Input`. The\n     * channels are numbered 1 through 16.\n     *\n     * @type {InputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new InputChannel(this, i);\n\n    // Setup listeners\n    this._midiInput.onstatechange = this._onStateChange.bind(this);\n    this._midiInput.onmidimessage = this._onMidiMessage.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Input` by remove all listeners, emptying the `channels` array and unlinking the\n   * MIDI subsystem.\n   *\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    this._midiInput.onstatechange = null;\n    await this.close();\n    this._midiInput = null;\n  }\n\n  /**\n   * Executed when a `\"statechange\"` event occurs.\n   *\n   * @param e\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: WebMidi.time,\n      target: this\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the {@link Input} has been opened by calling the {@link Input#open}\n       * method.\n       *\n       * @event Input#opened\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"opened\"`\n       * @property {Input} target The object that triggered the event\n       */\n      event.type = \"opened\";\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the {@link Input} has been closed by calling the {@link Input#close}\n       * method.\n       *\n       * @event Input#closed\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"closed\"`\n       * @property {Input} target The object that triggered the event\n       */\n      event.type = \"closed\";\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the {@link Input} becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Input#disconnected\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"disconnected\"`\n       * @property {Object} target Object with properties describing the {@link Input} that\n       * triggered the event. This is not the actual `Input` as it is no longer available.\n       * @property {string} target.connection `\"closed\"`\n       * @property {string} target.id ID of the input\n       * @property {string} target.manufacturer Manufacturer of the device that provided the input\n       * @property {string} target.name Name of the device that provided the input\n       * @property {string} target.state `\"disconnected\"`\n       * @property {string} target.type `\"input\"`\n       */\n      event.type = \"disconnected\";\n      event.target = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") {\n      // I don't see the need to forward that...\n    } else {\n      console.warn(\"This statechange event was not caught: \", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Executed when a `\"midimessage\"` event is received\n   * @param e\n   * @private\n   */\n  _onMidiMessage(e) {\n\n    // Extract data bytes (unless it's a sysex message)\n    let dataBytes = null;\n    if (e.data[0] !== WebMidi.MIDI_SYSTEM_MESSAGES.sysex) dataBytes = e.data.slice(1);\n\n    /**\n     * Event emitted when a MIDI message is received on the `Input`\n     *\n     * @event Input#midimessage\n     * @type {Object}\n     * @property {Input} target The `Input` that triggered the event.\n     * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `\"midimessage\"`\n     * @property {number} event.statusByte The message's status byte.\n     * @property {?number[]} event.dataBytes The message's data bytes as an array of 0, 1 or 2\n     * integers. This will be null for `sysex` messages.\n     *\n     * @since 2.1\n     */\n    let event = {\n      target: this,\n      data: e.data,\n      statusByte: e.data[0],\n      dataBytes: dataBytes,\n      timestamp: e.timeStamp,\n      type: \"midimessage\"\n    };\n\n    this.emit(\"midimessage\", event);\n\n    // Messages are forwarded to InputChannel if they are targeted at a channel or parsed locally\n    // for system messages.\n    if (e.data[0] < 240) {          // channel-specific message\n      let channel = (e.data[0] & 0xf) + 1;\n      this.channels[channel]._parseEvent(e);\n    } else if (e.data[0] <= 255) {  // system message\n      this._parseEvent(e);\n    }\n\n  }\n\n  /**\n   * @private\n   */\n  _parseEvent(e) {\n\n    let command = e.data[0];\n\n    // Returned event\n    var event = {\n      target: this,\n      data: e.data,\n      timestamp: e.timeStamp\n    };\n\n    if (command === WebMidi.MIDI_SYSTEM_MESSAGES.sysex) {\n\n      /**\n       * Event emitted when a **system exclusive** message has been received. You should note that,\n       * to receive `sysex` events, you must call the `WebMidi.enable()` method with the `sysex`\n       * option set to `true`:\n       *\n       * ```js\n       * WebMidi.enable({sysex: true})\n       *  .then(() => console.log(\"WebMidi has been enabled with sysex support.\"))\n       *  .catch(err => console.log(\"WebMidi could not be enabled.\"))\n       * ```\n       *\n       * @event InputChannel#sysex\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"sysex\"`\n       */\n      event.type = \"sysex\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.timecode) {\n\n      /**\n       * Event emitted when a **time code quarter frame** message has been received.\n       *\n       * @event InputChannel#timecode\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"sysextimecode\"`\n       */\n      event.type = \"timecode\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.songposition) {\n\n      /**\n       * Event emitted when a **song position** message has been received.\n       *\n       * @event InputChannel#songposition\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"songposition\"`\n       */\n      event.type = \"songposition\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.songselect) {\n\n      /**\n       * Event emitted when a **song select** message has been received.\n       *\n       * @event InputChannel#songselect\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"songselect\"`\n       * @property {string} song Song (or sequence) number to select (1-128)\n       */\n      event.type = \"songselect\";\n      event.song = e.data[1] + 1;\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.tunerequest) {\n\n      /**\n       * Event emitted when a **tune request** message has been received.\n       *\n       * @event InputChannel#tunerequest\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"tunerequest\"`\n       */\n      event.type = \"tunerequest\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.clock) {\n\n      /**\n       * Event emitted when a **timing clock** message has been received.\n       *\n       * @event InputChannel#clock\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"clock\"`\n       */\n      event.type = \"clock\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.start) {\n\n      /**\n       * Event emitted when a **start** message has been received.\n       *\n       * @event InputChannel#start\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"start\"`\n       */\n      event.type = \"start\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.continue) {\n\n      /**\n       * Event emitted when a **continue** message has been received.\n       *\n       * @event InputChannel#continue\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"continue\"`\n       */\n      event.type = \"continue\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.stop) {\n\n      /**\n       * Event emitted when a **stop** message has been received.\n       *\n       * @event InputChannel#stop\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"stop\"`\n       */\n      event.type = \"stop\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.activesensing) {\n\n      /**\n       * Event emitted when an **active sensing** message has been received.\n       *\n       * @event InputChannel#activesensing\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"activesensing\"`\n       */\n      event.type = \"activesensing\";\n\n    } else if (command === WebMidi.MIDI_SYSTEM_MESSAGES.reset) {\n\n      /**\n       * Event emitted when a **reset** message has been received.\n       *\n       * @event InputChannel#reset\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"reset\"`\n       */\n      event.type = \"reset\";\n\n    } else {\n\n      /**\n       * Event emitted when an unknown MIDI message has been received. It could be, for example, one\n       * of the undefined/reserved messages.\n       *\n       * @event InputChannel#unknownmidimessage\n       * @type {Object}\n       * @property {InputChannel} target The `Input` that triggered the event.\n       * @property {Uint8Array} event.data The raw MIDI message as an array of 8 bit values.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"unknownmidimessage\"`\n       */\n      event.type = \"unknownmidimessage\";\n\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Opens the input for usage.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input`\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when assigning a listener to the\n    // `onmidimessage` property of the `MIDIInput`. We do it explicitly so that 'connected' events\n    // are dispatched immediately and that we are ready to listen.\n    try {\n      await this._midiInput.open();\n      return Promise.resolve(this);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n  }\n\n  /**\n   * Closes the input. When an input is closed, it cannot be used to listen to MIDI messages until\n   * the input is opened again by calling [Input.open()]{@link Input#open}.\n   *\n   * @returns {Promise<void|*>}\n   */\n  async close() {\n\n    // We close the port. This triggers a statechange event which, in turn, will emit the 'closed'\n    // event.\n    if (this._midiInput) {\n      return this._midiInput.close();\n    } else {\n      return Promise.resolve();\n    }\n\n  }\n\n  /**\n   * Returns the name of a control change message matching the specified number. If no match is\n   * found, the function returns `false`.\n   *\n   * @param {number} number An integer representing the control change message\n   * @returns {string|false} The matching control change name or `false` if not match was found\n   *\n   * @since 2.0.0\n   */\n  getCcNameByNumber(number) {\n\n    number = Math.floor(number);\n\n    if ( !(number >= 0 && number <= 119) ) return false;\n\n    for (let cc in WebMidi.MIDI_CONTROL_CHANGE_MESSAGES) {\n\n      if (\n        WebMidi.MIDI_CONTROL_CHANGE_MESSAGES.hasOwnProperty(cc) &&\n        number === WebMidi.MIDI_CONTROL_CHANGE_MESSAGES[cc]\n      ) {\n        return cc;\n      }\n\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Adds an event listener that will trigger a function callback when the specified event happens.\n   * The events that are listened to can be channel-specific or input-wide.\n   *\n   * This method overrides the one in\n   * [djipevents.EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html#addListener)\n   * by adding a `channel` parameter that makes it possible to add a listener to one or several\n   * channels at once. Invalid channels will be silently ignored.\n   *\n   * If you want to add a listener to a single channel, use\n   * [InputChannel.addListener()]{@link InputChannel#addListener()} instead.\n   *\n   * Here is a list of events that are directly dispatched by `Input` objects and that can be\n   * listened to:\n   *\n   *    * [sysex]{@link Input#event:sysex}\n   *    * [timecode]{@link Input#event:timecode}\n   *    * [songposition]{@link Input#event:songposition}\n   *    * [songselect]{@link Input#event:songselect}\n   *    * [tunerequest]{@link Input#event:tunerequest}\n   *    * [clock]{@link Input#event:clock}\n   *    * [start]{@link Input#event:start}\n   *    * [continue]{@link Input#event:continue}\n   *    * [stop]{@link Input#event:stop}\n   *    * [activesensing]{@link Input#event:activesensing}\n   *    * [reset]{@link Input#event:reset}\n   *    * [midimessage]{@link Input#event:midimessage}\n   *    * [unknownmidimessage]{@link Input#event:unknownmidimessage}\n   *\n   *  For these input-wide events, the `channel` parameter will be silently ignored. You can simply\n   *  use `undefined` in that case.\n   *\n   * If you want to view all incoming MIDI traffic, you can listen to the `midimessage` event. This\n   * event is dispatched for every single message that is received on that `Input`.\n   *\n   * By using the `channel` property, you can also add listeners to all channels in the `channel`\n   * parameter. These are the events dispatched by individual {@link InputChannel} objects:\n   *\n   *    * [noteoff]{@link InputChannel#event:noteoff}\n   *    * [noteon]{@link InputChannel#event:noteon}\n   *    * [keyaftertouch]{@link InputChannel#event:keyaftertouch}\n   *    * [controlchange]{@link InputChannel#event:controlchange}\n   *    * [nrpn]{@link InputChannel#event:nrpn}\n   *    * [channelmode]{@link InputChannel#event:channelmode}\n   *    * [programchange]{@link InputChannel#event:programchange}\n   *    * [channelaftertouch]{@link InputChannel#event:channelaftertouch}\n   *    * [pitchbend]{@link InputChannel#event:pitchbend}\n   *    * [midimessage]{@link InputChannel#event:midimessage}\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param channel {number|number[]|undefined} An integer between 1 and 16 or an array of such\n   * integers representing the channel(s) to listen on. This parameter will be ignored for\n   * input-wide events (just set it to `undefined` in such cases).\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object\"s properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {Object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.remaining=Infinity] The number of times after which the callback\n   * should automatically be removed.\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [**arguments**]{@link Listener#arguments}\n   * property of the [**Listener**]{@link Listener} object and can be retrieved or modified as\n   * desired.\n   *\n   * @throws {TypeError} The callback must be a function.\n   * @throws {TypeError} The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\n   *\n   * @return {Listener[]} An array of all `Listener` objects that were created.\n   */\n  addListener(event, channel, listener, options) {\n\n    let listeners = [];\n\n    if (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES[event] === undefined) {\n      listeners.push(super.addListener(event, listener, options));\n    } else {\n      WebMidi.sanitizeChannels(channel).forEach(ch => {\n        listeners.push(this.channels[ch].addListener(event, listener, options));\n      });\n    }\n\n    return listeners;\n\n  }\n\n  /**\n   * Adds a one-time event listener that will trigger a function callback when the specified event\n   * happens. The events that are dispatched can be channel-specific or input-wide.\n   *\n   * This method overrides the one in `djipevents.EventEmitter` by adding a `channel` parameter that\n   * makes it possible to add a single listener to one or several channels at once. If you want to\n   * add a listener to a single channel, use\n   * [InputChannel.addListener()]{@link InputChannel#addListener()} instead.\n   *\n   * Here is a list of events that are dispatched by `Input` objects and that can be listened to.\n   *\n   * Channel-specific MIDI events:\n   *\n   *    * [noteoff]{@link InputChannel#event:noteoff}\n   *    * [noteon]{@link InputChannel#event:noteon}\n   *    * [keyaftertouch]{@link InputChannel#event:keyaftertouch}\n   *    * [controlchange]{@link InputChannel#event:controlchange}\n   *    * [nrpn]{@link InputChannel#event:nrpn}\n   *    * [channelmode]{@link InputChannel#event:channelmode}\n   *    * [programchange]{@link InputChannel#event:programchange}\n   *    * [channelaftertouch]{@link InputChannel#event:channelaftertouch}\n   *    * [pitchbend]{@link InputChannel#event:pitchbend}\n   *    * [midimessage]{@link InputChannel#event:midimessage}\n   *\n   * Input-level MIDI events:\n   *\n   *    * [sysex]{@link Input#event:sysex}\n   *    * [timecode]{@link Input#event:timecode}\n   *    * [songposition]{@link Input#event:songposition}\n   *    * [songselect]{@link Input#event:songselect}\n   *    * [tunerequest]{@link Input#event:tunerequest}\n   *    * [clock]{@link Input#event:clock}\n   *    * [start]{@link Input#event:start}\n   *    * [continue]{@link Input#event:continue}\n   *    * [stop]{@link Input#event:stop}\n   *    * [activesensing]{@link Input#event:activesensing}\n   *    * [reset]{@link Input#event:reset}\n   *    * [midimessage]{@link Input#event:midimessage}\n   *    * [unknownmidimessage]{@link Input#event:unknownmidimessage}\n   *\n   * For input-wide events, the `channel` parameter will be silently ignored. You can simply use\n   * `undefined` in that case.\n   *\n   * If you want to view all incoming MIDI traffic, you can listen to the input-level `midimessage`\n   * event. This event is dispatched for every single message that is received on that input.\n   *\n   * @param type {string} The type of the event.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object\"s properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {Object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [**arguments**]{@link Listener#arguments}\n   * property of the [**Listener**]{@link Listener} object and can be retrieved or modified as\n   * desired.\n   *\n   * @throws {RangeError} The \"channel\" parameter is invalid.\n   * @throws {TypeError} The \"listener\" parameter must be a function.\n   * @throws {TypeError} The specified event type is not supported.\n   *\n   * @return {Listener[]} An array of all `Listener` objects that were created.\n   *\n   * @since 3.0.0\n   */\n  addOneTimeListener(type, channel, listener, options = {}) {\n    options.remaining = 1;\n    return this.addListener(type, channel, listener, options);\n  }\n\n  /**\n   * This is an alias to the [Input.addListener()]{@link Input#addListener} method.\n   * @since 2.0.0\n   * @deprecated since v3.0\n   * @private\n   */\n  on(type, channel, listener, options) {\n    return this.addListener(type, channel, listener, options);\n  }\n\n  /**\n   * Checks if the specified event type is already defined to trigger the listener function on the\n   * specified channel(s). If more than one channel is specified, the function will return `true`\n   * only if all channels have the listener defined.\n   *\n   * For input-level events (`sysex`, `start`, etc.), the `channel` parameter is silently ignored.\n   * We suggest you use `undefined` in such cases.\n   *\n   * This method overrides the one in\n   * [djipevents.EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html#hasListener)\n   * by adding a `channel` parameter that makes it possible to check for the listener on one or\n   * several channels at once. Invalid channels will be silently ignored.\n   *\n   * @param type {string} The type of the event.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param listener {function} The callback function to check for.\n   *\n   * @throws {TypeError} The \"listener\" parameter must be a function.\n   *\n   * @returns {Boolean} Boolean value indicating whether or not the channel(s) already have this\n   * listener defined.\n   */\n  hasListener(type, channel, listener) {\n\n    if (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES[type] !== undefined) {\n\n      return WebMidi.sanitizeChannels(channel).every(ch => {\n        return this.channels[ch].hasListener(type, listener);\n      });\n\n    } else {\n      return super.hasListener(type, listener);\n    }\n\n  }\n\n  /**\n   * Removes the specified listener from the specified channel(s). If the `listener` parameter is\n   * left undefined, all listeners for the specified `type` will be removed from all channels. If\n   * the `channel` is also omitted, all listeners of the specified type will be removed from all\n   * channels. If no parameters are defined, all listeners attached to any channel of the `Input`\n   * will be removed.\n   *\n   * For input-level events (`sysex`, `start`, etc.), the `channel` parameter is silently ignored.\n   * You can use `undefined` in such cases.\n   *\n   * This method overrides the one in\n   * [djipevents.EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html#removeListener)\n   * by adding a `channel` parameter that makes it possible to remove a listener from one or several\n   * channels at once. Invalid channels will be silently ignored.\n   *\n   * @param [type] {String} The type of the event.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param [listener] {Function} The callback function to check for.\n   *\n   * @param {Object} [options={}]\n   * @param {*} [options.context] Only remove the listeners that have this exact context.\n   * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n   * remaining times to be executed.\n   *\n   * @throws {TypeError} The specified event type is not supported.\n   * @throws {TypeError} The \"listener\" parameter must be a function..\n   */\n  removeListener(type, channel, listener, options) {\n\n    if (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES[type] !== undefined) {\n      WebMidi.sanitizeChannels(channel).forEach(ch => {\n        this.channels[ch].removeListener(type, listener, options);\n      });\n    } else if (type != undefined) {\n      return super.removeListener(type, listener, options);\n    } else if (type == undefined) {\n      return super.removeListener();\n    }\n\n  }\n\n  /**\n   * Name of the MIDI input\n   *\n   * @property name\n   * @type String\n   */\n  get name() {\n    return this._midiInput.name;\n  }\n\n  /**\n   * ID string of the MIDI port. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiInput.id;\n  }\n\n  /**\n   * Input port's connection state: `\"pending\"`, `\"open\"` or `\"closed\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiInput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this input port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiInput.manufacturer;\n  }\n\n  /**\n   * State of the input port: `\"connected\"` or `\"disconnected\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiInput.state;\n  }\n\n  /**\n   * Type of the input port (`\"input\"`)\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiInput.type;\n  }\n\n  /**\n   * @type {boolean}\n   * @private\n   * @deprecated since v3.0.0 (moved to 'InputChannel' class)\n   */\n  get nrpnEventsEnabled() {\n    console.warn(\"The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class.\");\n    return false;\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {WebMidi} from \"./WebMidi.js\";\n\n/**\n * The `OutputChannel` class represents a single output channel (1-16) from an output device. This\n * object is derived from the host's MIDI subsystem and cannot be instantiated directly.\n *\n * All 16 `OutputChannel` objects can be found inside the output's [channels]{@link Output#channels}\n * property.\n *\n * The `OutputChannel` class extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [addListener()](https://djipco.github.io/djipevents/EventEmitter.html#addListener),\n * [removeListener()](https://djipco.github.io/djipevents/EventEmitter.html#removeListener),\n * [hasListener()](https://djipco.github.io/djipevents/EventEmitter.html#hasListener) and several\n * others.\n *\n * @param {Output} output The output this channel belongs to\n * @param {number} number The channel's number (1-16)\n *\n * @since 3.0.0\n */\nexport class OutputChannel extends EventEmitter {\n\n  constructor(output, number) {\n\n    super();\n\n    /**\n     * The {@link Output} this channel belongs to\n     * @type {Output}\n     */\n    this.output = output;\n\n    /**\n     * The channel's number (1-16)\n     * @type {number}\n     */\n    this.number = number;\n\n  }\n\n  destroy() {\n    this.output = null;\n    this.removeListener();\n  }\n\n  /**\n   * Sends a MIDI message at the scheduled timestamp. It is usually not necessary to use this method\n   * directly as you can use one of the simpler helper methods such as `playNote()`, `stopNote()`,\n   * `sendControlChange()`, etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param status {Number} The MIDI status byte of the message (128-255). This is a combination of\n   * the command and the channel.\n   *\n   * @param {number[]} [data] An array of unsigned integers for the message. The number of data\n   * bytes varies depending on the status byte. It is perfectly legal to send no data for some\n   * message types (use `undefined` or an empty array in this case). Each byte must be between 0 and\n   * 255.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 0 is greater\n   * than 0xFF.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 2 is greater\n   * than 0xFF.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Running status is not allowed at\n   * index 0.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Message is incomplete.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Reserved status is not allowed at\n   * index 0.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': System exclusive message is not\n   * allowed at index 0.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Unexpected end of system\n   * exclusive message at index 0.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Unexpected status byte at index\n   * 1.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Unexpected status byte at index\n   * 2.\n   *\n   * @throw {TypeError} Failed to execute 'send' on 'MIDIOutput': ? is not a UInt8 value.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  send(status, data = [], options = {}) {\n    this.output.send(status, data, options);\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message at the scheduled time. This is a key-specific\n   * aftertouch. For a channel-wide aftertouch message, use\n   * [setChannelAftertouch()]{@link Output#setChannelAftertouch}.\n   *\n   * @param note {number|string|Array}  The note for which you are sending an aftertouch value. The\n   * notes can be specified in one of two ways. The first way is by using the MIDI note number (an\n   * integer between 0 and 127). The second way is by using the note name followed by the octave\n   * (C3, G#4, F-1, Db7). The octave range should be between -1 and 9. The lowest note is C-1 (MIDI\n   * note number 0) and the highest note is G9 (MIDI note number 127). It is also possible to use\n   * an array of note names and/or numbers.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `useRawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.useRawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setKeyAftertouch(note, pressure, options = {}) {\n\n    // Validation\n    pressure = parseFloat(pressure);\n    if (isNaN(pressure)) pressure = 0.5;\n    if (options.useRawValue) pressure = pressure / 127;\n    if (pressure < 0 || pressure > 1) {\n      throw new RangeError(\"Pressure value must be between 0 and 1.\");\n    }\n\n    WebMidi.getValidNoteArray(note).forEach(n => {\n\n      this.send(\n        (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.keyaftertouch << 4) + (this.number - 1),\n        [n.number, Math.round(pressure * 127)],\n        WebMidi.convertToTimestamp(options.time)\n      );\n\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **control change** message to the channel at the scheduled time. The control\n   * change message to send can be specified numerically or by using one of the following common\n   * names:\n   *\n   *  * `bankselectcoarse` (#0)\n   *  * `modulationwheelcoarse` (#1)\n   *  * `breathcontrollercoarse` (#2)\n   *  * `footcontrollercoarse` (#4)\n   *  * `portamentotimecoarse` (#5)\n   *  * `dataentrycoarse` (#6)\n   *  * `volumecoarse` (#7)\n   *  * `balancecoarse` (#8)\n   *  * `pancoarse` (#10)\n   *  * `expressioncoarse` (#11)\n   *  * `effectcontrol1coarse` (#12)\n   *  * `effectcontrol2coarse` (#13)\n   *  * `generalpurposeslider1` (#16)\n   *  * `generalpurposeslider2` (#17)\n   *  * `generalpurposeslider3` (#18)\n   *  * `generalpurposeslider4` (#19)\n   *  * `bankselectfine` (#32)\n   *  * `modulationwheelfine` (#33)\n   *  * `breathcontrollerfine` (#34)\n   *  * `footcontrollerfine` (#36)\n   *  * `portamentotimefine` (#37)\n   *  * `dataentryfine` (#38)\n   *  * `volumefine` (#39)\n   *  * `balancefine` (#40)\n   *  * `panfine` (#42)\n   *  * `expressionfine` (#43)\n   *  * `effectcontrol1fine` (#44)\n   *  * `effectcontrol2fine` (#45)\n   *  * `holdpedal` (#64)\n   *  * `portamento` (#65)\n   *  * `sustenutopedal` (#66)\n   *  * `softpedal` (#67)\n   *  * `legatopedal` (#68)\n   *  * `hold2pedal` (#69)\n   *  * `soundvariation` (#70)\n   *  * `resonance` (#71)\n   *  * `soundreleasetime` (#72)\n   *  * `soundattacktime` (#73)\n   *  * `brightness` (#74)\n   *  * `soundcontrol6` (#75)\n   *  * `soundcontrol7` (#76)\n   *  * `soundcontrol8` (#77)\n   *  * `soundcontrol9` (#78)\n   *  * `soundcontrol10` (#79)\n   *  * `generalpurposebutton1` (#80)\n   *  * `generalpurposebutton2` (#81)\n   *  * `generalpurposebutton3` (#82)\n   *  * `generalpurposebutton4` (#83)\n   *  * `reverblevel` (#91)\n   *  * `tremololevel` (#92)\n   *  * `choruslevel` (#93)\n   *  * `celestelevel` (#94)\n   *  * `phaserlevel` (#95)\n   *  * `databuttonincrement` (#96)\n   *  * `databuttondecrement` (#97)\n   *  * `nonregisteredparametercoarse` (#98)\n   *  * `nonregisteredparameterfine` (#99)\n   *  * `registeredparametercoarse` (#100)\n   *  * `registeredparameterfine` (#101)\n   *\n   * Note: as you can see above, not all control change message have a matching common name. This\n   * does not mean you cannot use the others. It simply means you will need to use their number\n   * instead of their name.\n   *\n   * To view a detailed list of all available **control change** messages, please consult \"Table 3 -\n   * Control Change Messages\" from the [MIDI Messages](\n   * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\n   * specification.\n   *\n   * @param {number|string} controller The MIDI controller name or number (0-119).\n   *\n   * @param {number} [value=0] The value to send (0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 119.\n   * @throws {RangeError} Invalid controller name.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendControlChange(controller, value, options = {}) {\n\n    if (typeof controller === \"string\") {\n\n      controller = WebMidi.MIDI_CONTROL_CHANGE_MESSAGES[controller];\n      if (controller === undefined) throw new TypeError(\"Invalid controller name.\");\n\n    } else {\n\n      controller = parseInt(controller);\n      if (!(controller >= 0 && controller <= 119)) {\n        throw new RangeError(\"Controller numbers must be between 0 and 119.\");\n      }\n\n    }\n\n    value = parseInt(value) || 0;\n    if (!(value >= 0 && value <= 127)) {\n      throw new RangeError(\"Value must be between 0 and 127.\");\n    }\n\n    this.send(\n      (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.controlchange << 4) + (this.number - 1),\n      [controller, value],\n      WebMidi.convertToTimestamp(options.time)\n    );\n\n    return this;\n\n  };\n\n  /**\n   * Selects a MIDI non-registered parameter so it is affected by data entry, data increment and\n   * data decrement messages.\n   *\n   * @private\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes (0x63, 0x62)\n   * that identify the registered parameter.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   */\n  _selectNonRegisteredParameter(parameter, time) {\n\n    parameter[0] = Math.floor(parameter[0]);\n    if (!(parameter[0] >= 0 && parameter[0] <= 127)) {\n      throw new RangeError(\"The control63 value must be between 0 and 127.\");\n    }\n\n    parameter[1] = Math.floor(parameter[1]);\n    if (!(parameter[1] >= 0 && parameter[1] <= 127)) {\n      throw new RangeError(\"The control62 value must be between 0 and 127.\");\n    }\n\n    this.sendControlChange(0x63, parameter[0], {time: time});\n    this.sendControlChange(0x62, parameter[1], {time: time});\n\n  };\n\n  /**\n   * Deselects the currently active MIDI registered parameter so it is no longer affected by data\n   * entry, data increment and data decrement messages.\n   *\n   * Current best practice recommends doing that after each call to\n   * [_setCurrentRegisteredParameter()]{@link Output#_setCurrentRegisteredParameter}.\n   *\n   * @private\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   */\n  _deselectRegisteredParameter(time) {\n    this.sendControlChange(0x65, 0x7F, {time: time});\n    this.sendControlChange(0x64, 0x7F, {time: time});\n  };\n\n  /**\n   * Selects a MIDI registered parameter so it is affected by data entry, data increment and data\n   * decrement messages.\n   *\n   * @private\n   *\n   * @param parameter {Array} A two-position array specifying the two control bytes (0x65, 0x64)\n   * that identify the registered parameter.\n   *\n   * @param {number|string} [time] If `time` is a string prefixed with `\"+\"` and followed by a\n   * number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   */\n  _selectRegisteredParameter(parameter, time) {\n\n    parameter[0] = Math.floor(parameter[0]);\n    if (!(parameter[0] >= 0 && parameter[0] <= 127)) {\n      throw new RangeError(\"The control65 value must be between 0 and 127\");\n    }\n\n    parameter[1] = Math.floor(parameter[1]);\n    if (!(parameter[1] >= 0 && parameter[1] <= 127)) {\n      throw new RangeError(\"The control64 value must be between 0 and 127\");\n    }\n\n    this.sendControlChange(0x65, parameter[0], {time: time});\n    this.sendControlChange(0x64, parameter[1], {time: time});\n\n  };\n\n  /**\n   * Sets the value of the currently selected MIDI registered parameter.\n   *\n   * @private\n   *\n   * @param data {number|number[]}\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   */\n  _setCurrentRegisteredParameter(data, time) {\n\n    data = [].concat(data);\n\n    // MSB\n    data[0] = parseInt(data[0]);\n    if (!isNaN(data[0]) && data[0] >= 0 && data[0] <= 127) {\n      this.sendControlChange(0x06, data[0], {time: time});\n    } else {\n      throw new RangeError(\"The msb value must be between 0 and 127.\");\n    }\n\n    if (data.length < 2) return this;\n\n    // LSB\n    data[1] = parseInt(data[1]);\n\n    if (!isNaN(data[1]) && data[1] >= 0 && data[1] <= 127) {\n      this.sendControlChange(0x26, data[1], {time: time});\n    } else {\n      throw new RangeError(\"The lsb value must be between 0 and 127.\");\n    }\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified parameter is not available.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  decrementRegisteredParameter(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) {\n      if (!WebMidi.MIDI_REGISTERED_PARAMETER[parameter]) {\n        throw new TypeError(\"The specified parameter is not available.\");\n      }\n      parameter = WebMidi.MIDI_REGISTERED_PARAMETER[parameter];\n    }\n\n    this._selectRegisteredParameter(parameter, options.time);\n    this.sendControlChange(0x61, 0, {time: options.time});\n    this._deselectRegisteredParameter(options.time);\n\n    return this;\n\n  };\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified parameter is not available.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  incrementRegisteredParameter(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) {\n      if (!WebMidi.MIDI_REGISTERED_PARAMETER[parameter]) {\n        throw new TypeError(\"The specified parameter is not available.\");\n      }\n      parameter = WebMidi.MIDI_REGISTERED_PARAMETER[parameter];\n    }\n\n    this._selectRegisteredParameter(parameter, options.time);\n    this.sendControlChange(0x60, 0, {time: options.time});\n    this._deselectRegisteredParameter(options.time);\n\n    return this;\n\n  }\n\n  /**\n   * Plays a note or an array of notes on the channel. The first parameter is the note to play. It\n   * can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes on all\n   * specified channels. If a `duration` is set in the `options` parameter or in the {@link Note}\n   * object's [duration]{@link Note#duration} property, it will also schedule a **note off** message\n   * to end the note after said duration. If no `duration` is set, the note will simply play until\n   * a matching **note off** message is sent with [stopNote()]{@link OutputChannel#stopNote} or\n   * [sendNoteOff()]{@link OutputChannel#sendNoteOff}.\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the durations and velocities defined in the {@link Note}\n   * objects have precedence over the ones specified via the method's `options` parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.duration=undefined] The number of milliseconds (integer) after which a\n   * **note off** message will be scheduled. If left undefined, only a **note on** message is sent.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity\n   * value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=0.5] The attack velocity at which to play the note (between\n   * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will\n   * silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`. This is only used with the\n   * **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number} [options.rawRelease=0.5] The velocity at which to release the note (between `0`\n   * and `127`). This has priority over the `release` property. An invalid velocity value will\n   * silently trigger the default of `0.5`. This is only used with the **note off** event triggered\n   * when `options.duration` is set.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  playNote(note, options = {}) {\n\n    // Send note on and, optionally, note off message (if duration is a positive number)\n    this.sendNoteOn(note, options);\n\n    // https://stackoverflow.com/questions/600763#answer-601877\n    if (options.duration > 0 && isFinite(String(options.duration).trim() || NaN)) {\n\n      let noteOffOptions = {\n        time: WebMidi.convertToTimestamp(options.time) + options.duration,\n        release: options.release,\n        rawRelease: options.rawRelease,\n      };\n\n      this.sendNoteOff(note, noteOffOptions);\n\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified notes on the channel. The first parameter is the\n   * note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   *  The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the release velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOff(note, options = {}) {\n\n    // Compatibility warnings\n    if (options.rawVelocity) {\n      options.rawRelease = options.velocity;\n      console.warn(\n        \"The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.\"\n      );\n    }\n    if (options.velocity) {\n      options.release = options.velocity;\n      console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n    }\n\n    let nVelocity = 64;\n\n    if (options.rawRelease != undefined) {\n      if (\n        !isNaN(options.rawRelease) &&\n        options.rawRelease >= 0\n        && options.rawRelease <= 127\n      ) {\n        nVelocity = options.rawRelease;\n      }\n    } else {\n      if (\n        !isNaN(options.release) &&\n        options.release >= 0 &&\n        options.release <= 1\n      ) {\n        nVelocity = options.release * 127;\n      }\n    }\n\n    // Send note off messages\n    let o = {rawRelease: parseInt(nVelocity)};\n\n    WebMidi.getValidNoteArray(note, o).forEach(n => {\n      this.send(\n        (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.noteoff << 4) + (this.number - 1),\n        [n.number, n.rawRelease],\n        WebMidi.convertToTimestamp(options.time)\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * This is an alias to the [sendNoteOff()]{@link OutputChannel#sendNoteOff} method.\n   *\n   * @see {@link OutputChannel#sendNoteOff}\n   *\n   * @param note\n   * @param options\n   * @returns {Output}\n   */\n  stopNote(note, options = {}) {\n    return this.sendNoteOff(note, options);\n  }\n\n  /**\n   * Sends a **note on** message for the specified notes on the channel. The first parameter is the\n   * note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the attack velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter. Also, the `duration` is\n   * ignored. If you want to also send a **note off** message, use the\n   * [playNote()]{@link Output#playNote} method instead.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=0.5] The velocity at which to release the note (between `0`\n   * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOn(note, options = {}) {\n\n    // Compatibility warnings\n    if (options.rawVelocity) {\n      options.rawAttack = options.velocity;\n      options.rawRelease = options.release;\n      console.warn(\n        \"The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease' instead.\"\n      );\n    }\n    if (options.velocity) {\n      options.attack = options.velocity;\n      console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n    }\n\n    let nVelocity = 64;\n\n    if (options.rawAttack != undefined) {\n      if (\n        !isNaN(options.rawAttack) &&\n        options.rawAttack >= 0 &&\n        options.rawAttack <= 127\n      ) {\n        nVelocity = options.rawAttack;\n      }\n    } else {\n      if (\n        !isNaN(options.attack) &&\n        options.attack >= 0 &&\n        options.attack <= 1\n      ) {\n        nVelocity = options.attack * 127;\n      }\n    }\n\n    let o = {rawAttack: nVelocity};\n\n    WebMidi.getValidNoteArray(note, o).forEach(n => {\n      this.send(\n        (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.noteon << 4) + (this.number - 1),\n        [n.number, n.rawAttack],\n        WebMidi.convertToTimestamp(options.time)\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel mode** message. The channel mode message to send can be specified\n   * numerically or by using one of the following common names:\n   *\n   *   * `\"allsoundoff\"` (#120)\n   *   * `\"resetallcontrollers\"` (#121)\n   *   * `\"localcontrol\"` (#122)\n   *   * `\"allnotesoff\"` (#123)\n   *   * `\"omnimodeoff\"` (#124)\n   *   * `\"omnimodeon\"` (#125)\n   *   * `\"monomodeon\"` (#126)\n   *   * `\"polymodeon\"` (#127)\n   *\n   * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\n   * require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * To make it easier, all channel mode messages have a matching helper method:\n   *\n   *   - [turnSoundOff()]{@link Output#turnSoundOff}\n   *   - [resetAllControllers()]{@link Output#resetAllControllers}\n   *   - [setLocalControl()]{@link Output#turnSoundOff}\n   *   - [turnNotesOff()]{@link Output#turnNotesOff}\n   *   - [setOmniMode()]{@link Output#setOmniMode}\n   *   - [setPolyphonicMode()]{@link Output#setPolyphonicMode}\n   *\n   * @param command {number|string} The numerical identifier of the channel mode message (integer\n   * between 120-127) or its name as a string.\n   *\n   * @param [value] {number} The value to send (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendChannelMode(command, value, options = {}) {\n\n    if (typeof command === \"string\") {\n      command = WebMidi.MIDI_CHANNEL_MODE_MESSAGES[command];\n    } else {\n      command = parseInt(command);\n    }\n\n    if (isNaN(command) || !(command >= 120 && command <= 127)) {\n      throw new TypeError(\"Invalid channel mode message name or number.\");\n    }\n\n    value = parseInt(value) || 0;\n\n    if (value < 0 || value > 127) {\n      throw new RangeError(\"Value must be an integer between 0 and 127.\");\n    }\n\n    this.send(\n      (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.channelmode << 4) + (this.number - 1),\n      [command, value],\n      WebMidi.convertToTimestamp(options.time)\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to `\"on\"` or `\"off\"`. MIDI's OMNI mode causes the instrument to respond to\n   * messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state=true] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setOmniMode(state, options = {}) {\n\n    if (state === undefined || state) {\n      this.sendChannelMode(\"omnimodeon\", 0, options);\n    } else {\n      this.sendChannelMode(\"omnimodeoff\", 0, options);\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message. For key-specific aftertouch, you should instead\n   * use [setKeyAftertouch()]{@link Output#setKeyAftertouch}.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setChannelAftertouch(pressure, options = {}) {\n\n    // Validation\n    pressure = parseFloat(pressure);\n    if (isNaN(pressure)) pressure = 0.5;\n    if (options.rawValue) pressure = pressure / 127;\n    if (pressure < 0 || pressure > 1) {\n      throw new RangeError(\"Pitch bend value must be between 0 and 1.\");\n    }\n\n    this.send(\n      (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.channelaftertouch << 4) + (this.number - 1),\n      [Math.round(pressure * 127)],\n      WebMidi.convertToTimestamp(options.time)\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **master tuning** message. The value is decimal and must be larger than -65 semitones\n   * and smaller than 64 semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setMasterTuning(value, options = {}) {\n\n    value = parseFloat(value) || 0.0;\n\n    if (value <= -65 || value >= 64) {\n      throw new RangeError(\n        \"The value must be a decimal number larger than -65 and smaller than 64.\"\n      );\n    }\n\n    let coarse = Math.floor(value) + 64;\n    let fine = value - Math.floor(value);\n\n    // Calculate MSB and LSB for fine adjustment (14bit resolution)\n    fine = Math.round((fine + 1) / 2 * 16383);\n    let msb = (fine >> 7) & 0x7F;\n    let lsb = fine & 0x7F;\n\n    this.setRegisteredParameter(\"channelcoarsetuning\", coarse, {time: options.time});\n    this.setRegisteredParameter(\"channelfinetuning\", [msb, lsb], {time: options.time});\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to adjust the depth of the modulation wheel's range.\n   * The range can be specified with the `semitones` parameter, the `cents` parameter or by\n   * specifying both parameters at the same time.\n   *\n   * @param [semitones=0] {number} The desired adjustment value in semitones (integer between\n   * 0 and 127).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127\n   * @throws {RangeError} The lsb value must be between 0 and 127\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setModulationRange(semitones, cents, options = {}) {\n\n    this.setRegisteredParameter(\n      \"modulationrange\", [semitones, cents], {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter (NRPN) to the specified value. The NRPN is selected by passing\n   * in a two-position array specifying the values of the two control bytes. The value is specified\n   * by passing in a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\n   * would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].setNonRegisteredParameter([1, 8], 123);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was 10, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].setNonRegisteredParameter([2, 63], [0, 10]);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer's documentation.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes (0x63,\n   * 0x62) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setNonRegisteredParameter(parameter, data, options = {}) {\n\n    data = [].concat(data);\n\n    this._selectNonRegisteredParameter(parameter, this.number, options.time);\n    this._setCurrentRegisteredParameter(data, this.number, options.time);\n    this._deselectRegisteredParameter(options.time);\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message at the scheduled time.\n   *\n   * @param value {number} The intensity level of the bend (between -1.0 and 1.0). A value of zero\n   * means no bend. If the `rawValue` option is set to `true`, the intensity can be defined by using\n   * an integer between 0 and 127. In this case, a value of 64 means no bend. The range of the pitch\n   * bend can be set with [setPitchBendRange()]{@link OutputChannel#setPitchBendRange}.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between -1.0 and 1.0 (default) or as raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Pitch bend value must be between -1.0 and 1.0.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setPitchBend(value, options = {}) {\n\n    // Validation\n    value = parseFloat(value);\n    if (isNaN(value)) value = 0;\n    if (options.rawValue) value = value / 127 * 2 - 1;\n    if (value < -1 || value > 1) {\n      throw new RangeError(\"Pitch bend value must be between -1.0 and 1.0.\");\n    }\n\n    let nLevel = Math.round((value + 1) / 2 * 16383);\n    let msb = (nLevel >> 7) & 0x7F;\n    let lsb = nLevel & 0x7F;\n\n    this.send(\n      (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.pitchbend << 4) + (this.number - 1),\n      [lsb, msb],\n      WebMidi.convertToTimestamp(options.time)\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a pitch bend range message to the specified channel(s) at the scheduled time so that they\n   * adjust the range used by their pitch bend lever. The range is specified by using the\n   * `semitones` and `cents` parameters. For example, setting the `semitones` parameter to `12`\n   * means that the pitch bend range will be 12 semitones above and below the nominal pitch.\n   *\n   * @param semitones {number} The desired adjustment value in semitones (between 0 and 127). While\n   * nothing imposes that in the specification, it is very common for manufacturers to limit the\n   * range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127.\n   * @throws {RangeError} The lsb value must be between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setPitchBendRange(semitones, cents, options = {}) {\n\n    this.setRegisteredParameter(\n      \"pitchbendrange\", [semitones, cents], {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **program change** message at the scheduled time.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param [program=1] {number} The MIDI patch (program) number (1-128)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   */\n  setProgram(program, options = {}) {\n\n    program = parseFloat(program) - 1;\n\n    this.send(\n      (WebMidi.MIDI_CHANNEL_VOICE_MESSAGES.programchange << 4) + (this.number - 1),\n      [program],\n      WebMidi.convertToTimestamp(options.time)\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from 0 to 127.\n   *\n   * MIDI\n   * [registered parameters]\n   * (https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them. Here are the original registered parameters with the identifier that\n   * can be used as the first parameter of this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *\n   * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * Another set of extra parameters have been later added for 3D sound controllers. They are:\n   *\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setRegisteredParameter(parameter, data, options = {}) {\n\n    if (!Array.isArray(parameter)) {\n      if (!WebMidi.MIDI_REGISTERED_PARAMETER[parameter]) {\n        throw new Error(\"The specified parameter is not available.\");\n      }\n      parameter = WebMidi.MIDI_REGISTERED_PARAMETER[parameter];\n    }\n\n    this._selectRegisteredParameter(parameter, this.number, options.time);\n    this._setCurrentRegisteredParameter(data, this.number, options.time);\n    this._deselectRegisteredParameter(options.time);\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the bank number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning bank (1-128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 1 and 128.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setTuningBank(value, options = {}) {\n\n    value = parseInt(value);\n    if (isNaN(value) || !(value >= 1 && value <= 128)) {\n      throw new RangeError(\"The program value must be between 1 and 128.\");\n    }\n\n    this.setRegisteredParameter(\"tuningbank\", value - 1, this.number, {time: options.time});\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning program (1-128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 1 and 128.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setTuningProgram(value, options = {}) {\n\n    value = parseInt(value);\n    if (isNaN(value) || !(value >= 1 && value <= 128)) {\n      throw new RangeError(\"The program value must be between 1 and 128.\");\n    }\n\n    this.setRegisteredParameter(\"tuningprogram\", value - 1, this.number, {time: options.time});\n\n    return this;\n\n  }\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setLocalControl(state, options = {}) {\n    if (state) {\n      return this.sendChannelMode(\"localcontrol\", 127, options);\n    } else {\n      return this.sendChannelMode(\"localcontrol\", 0, options);\n    }\n  }\n\n  /**\n   * Sends an **all notes off** channel mode message. This will turn all currently playing notes\n   * off. However, this does not prevent new notes from being played.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  turnNotesOff(options = {}) {\n    return this.sendChannelMode(\"allnotesoff\", 0, options);\n  }\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  turnSoundOff(options = {}) {\n    return this.sendChannelMode(\"allsoundoff\", 0, options);\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  resetAllControllers(options = {}) {\n    return this.sendChannelMode(\"resetallcontrollers\", 0, options);\n  }\n\n  /**\n   * Sets the polyphonic mode. In `\"poly\"` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `\"mono\"` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param {string} [mode=poly] The mode to use: `\"mono\"` or `\"poly\"`.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  setPolyphonicMode(mode, options = {}) {\n    if (mode === \"mono\") {\n      return this.sendChannelMode(\"monomodeon\", 0, options);\n    } else {\n      return this.sendChannelMode(\"polymodeon\", 0, options);\n    }\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {OutputChannel} from \"./OutputChannel.js\";\nimport {WebMidi} from \"./WebMidi.js\";\n\n/**\n * The `Output` class represents a MIDI output port. This object is derived from the host's MIDI\n * subsystem and cannot be instantiated directly.\n *\n * You can find a list of all available `Output` objects in the\n * [WebMidi.outputs]{@link WebMidi#outputs} array.\n *\n * The `Output` class extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [addListener()](https://djipco.github.io/djipevents/EventEmitter.html#addListener),\n * [removeListener()](https://djipco.github.io/djipevents/EventEmitter.html#removeListener),\n * [hasListener()](https://djipco.github.io/djipevents/EventEmitter.html#hasListener) and several\n * others.\n *\n * @param {MIDIOutput} midiOutput `MIDIOutput` object as provided by the MIDI subsystem\n *\n * @fires Output#opened\n * @fires Output#disconnected\n * @fires Output#closed\n */\nexport class Output extends EventEmitter {\n\n  constructor(midiOutput) {\n\n    super();\n\n    if (!midiOutput || midiOutput.type !== \"output\") {\n      throw new TypeError(\"The supplied MIDIOutput is invalid.\");\n    }\n\n    /**\n     * A reference to the `MIDIOutput` object\n     * @type {MIDIOutput}\n     * @private\n     */\n    this._midiOutput = midiOutput;\n\n    /**\n     * Array containing the 16 {@link OutputChannel} objects available for this `Output`. The\n     * channels are numbered 1 through 16.\n     *\n     * @type {OutputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new OutputChannel(this, i);\n\n    this._midiOutput.onstatechange = this._onStateChange.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Output`. All listeners are removed, all channels are destroyed and the MIDI\n   * subsystem is unlinked.\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    this._midiOutput.onstatechange = null;\n    await this.close();\n    this._midiOutput = null;\n  }\n\n  /**\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: WebMidi.time\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the {@link Output} has been opened by calling the\n       * [open()]{@link Output#open} method.\n       *\n       * @event Output#opened\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"opened\"`\n       * @property {Output} target The object that triggered the event\n       */\n      event.type = \"opened\";\n      event.target = this;\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the {@link Output} has been closed by calling the\n       * [close()]{@link Output#close} method.\n       *\n       * @event Output#closed\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"closed\"`\n       * @property {Output} target The object that triggered the event\n       */\n      event.type = \"closed\";\n      event.target = this;\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the {@link Output} becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Output#disconnected\n       * @type {Object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp0 when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"disconnected\"`\n       * @property {Object} target Object with properties describing the {@link Output} that\n       * triggered the event. This is not the actual `Output` as it is no longer available.\n       * @property {string} target.connection `\"closed\"`\n       * @property {string} target.id ID of the input\n       * @property {string} target.manufacturer Manufacturer of the device that provided the input\n       * @property {string} target.name Name of the device that provided the input\n       * @property {string} target.state `\"disconnected\"`\n       * @property {string} target.type `\"output\"`\n       */\n      event.type = \"disconnected\";\n      event.target = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") {\n      // I don't see the need to forward that...\n    } else {\n      console.warn(\"This statechange event was not caught:\", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Opens the output for usage.\n   *\n   * @returns {Promise<Output>} The promise is fulfilled with the `Output`\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when calling `send()` on the `MIDIOutput`.\n    // We do it explicitly so that 'connected' events are dispatched immediately and we are ready to\n    // send.\n    try {\n      await this._midiOutput.open();\n      return Promise.resolve(this);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n  }\n\n  /**\n   * Closes the output connection. When an output is closed, it cannot be used to send MIDI messages\n   * until the output is opened again by calling [Output.open()]{@link Output#open}. You can check\n   * the connection status by looking at the [connection]{@link Output#connection} property.\n   *\n   * @returns {Promise<void>}\n   */\n  async close() {\n\n    // We close the port. This triggers a 'statechange' event which we listen to to re-trigger the\n    // 'closed' event.\n    if (this._midiOutput) {\n      await this._midiOutput.close();\n    } else {\n      await Promise.resolve();\n    }\n\n  }\n\n  /**\n   * Sends a MIDI message on the MIDI output port, at the scheduled timestamp. It is usually not\n   * necessary to use this method directly since it is often simpler to use one of the helper\n   * methods such as `playNote()`, `stopNote()`, `sendControlChange()`, etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param status {Number} The MIDI status byte of the message (128-255).\n   *\n   * @param [data=[]] {Array} An array of unsigned integers for the message. The number of data\n   * bytes varies depending on the status byte. It is perfectly legal to send no data for some\n   * message types (use undefined or an empty array in this case). Each byte must be between 0 and\n   * 255.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 0 is greater\n   * than 0xFF.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 2 is greater\n   * than 0xFF.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Running status is not allowed at\n   * index 2.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Message is incomplete.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Reserved status is not allowed at\n   * index 0.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': System exclusive message is not\n   * allowed at index 0.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Unexpected end of system\n   * exclusive message at index 0.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Unexpected status byte at index\n   * 1.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': Unexpected status byte at index\n   * 2.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  send(status, data = [], options= {}) {\n    if (!Array.isArray(data)) data = [data];\n    if (typeof options === \"number\") options = {time: options}; // legacy support\n    this._midiOutput.send([status].concat(data), WebMidi.convertToTimestamp(options.time));\n    return this;\n  }\n\n  /**\n   * Sends a MIDI [system exclusive]{@link\n    * https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages}\n   * (*sysex*) message. The generated message will automatically be prepended with the *sysex byte*\n   * (0xF0) and terminated with the *end of sysex byte* (0xF7).\n   *\n   * To use the `sendSysex()` method, system exclusive message support must have been enabled. To\n   * do so, you must set the `sysex` option to `true` when calling `WebMidi.enable()`:\n   *\n   * ```js\n   * WebMidi.enable({sysex: true})\n   *   .then(() => console.log(\"System exclusive messages are enabled\");\n   * ```\n   *\n   * Note that, depending on browser, version and platform, it is generally necessary to serve the\n   * page over HTTPS to enable sysex support.\n   *\n   * ##### Examples\n   *\n   * If you want to send a sysex message to a Korg device connected to the first output, you would\n   * use the following code:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(0x42, [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   *\n   * The parameters can be specified using any number notation (decimal, hex, binary, etc.).\n   * Therefore, the code below is equivalent to the code above:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(66, [1, 2, 3, 4, 5]);\n   * ```\n   *\n   * The above code sends the byte values 1, 2, 3, 4 and 5 to Korg devices (hex 42 is the same as\n   * decimal 66).\n   *\n   * Some manufacturers are identified using 3 bytes. In this case, you would use a 3-position array\n   * as the first parameter. For example, to send the same sysex message to a\n   * *Native Instruments* device:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex([0x00, 0x21, 0x09], [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   * There is no limit for the length of the data array. However, it is generally suggested to keep\n   * system exclusive messages to 64Kb or less.\n   *\n   * @param manufacturer {number|number[]} An unsigned integer or an array of three unsigned\n   * integers between 0 and 127 that identify the targeted manufacturer. The *MIDI Manufacturers\n   * Association* maintains a full list of\n   * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers)\n   * .\n   *\n   * @param [data=number[]] {Array} An array of unsigned integers between 0 and 127. This is the\n   * data you wish to transfer.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {DOMException} Failed to execute 'send' on 'MIDIOutput': System exclusive message is\n   * not allowed.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index x is greater\n   * than 0xFF.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendSysex(manufacturer, data, options = {}) {\n\n    manufacturer = [].concat(manufacturer);\n\n    data = manufacturer.concat(data, WebMidi.MIDI_SYSTEM_MESSAGES.sysexend);\n    this.send(WebMidi.MIDI_SYSTEM_MESSAGES.sysex, data, {time: options.time});\n\n    return this;\n\n  };\n\n  /**\n   * Clears all messages that have been queued but not yet delivered.\n   *\n   * Warning: this method has been defined in the specification but has not been implemented yet. As\n   * soon as browsers implement it, it will work.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  clear() {\n    if (this._midiOutput.clear) {\n      this._midiOutput.clear();\n    } else {\n      console.warn(\"The 'clear()' method has not yet been implemented in your environment.\");\n    }\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **timecode quarter frame** message. Please note that no processing is being done\n   * on the data. It is up to the developer to format the data according to the\n   * [MIDI Timecode](https://en.wikipedia.org/wiki/MIDI_timecode) format.\n   *\n   * @param value {number} The quarter frame message content (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendTimecodeQuarterFrame(value, options = {}) {\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.timecode,\n      value,\n      {time: options.time}\n    );\n    return this;\n  };\n\n  /**\n   * Sends a **ong position** MIDI message. The value is expressed in MIDI beats (between 0 and\n   * 16383) which are 16th note. Position 0 is always the start of the song.\n   *\n   * @param [value=0] {number} The MIDI beat to cue to (integer between 0 and 16383).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setSongPosition(value, options = {}) {\n\n    value = Math.floor(value) || 0;\n\n    var msb = (value >> 7) & 0x7F;\n    var lsb = value & 0x7F;\n\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.songposition,\n      [msb, lsb],\n      {time: options.time}\n    );\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendSongPosition(value, options = {}) {\n    this.setSongPosition(value, options);\n    console.warn(\n      \"The sendSongPosition() method has been deprecated. Use setSongPosition() instead.\"\n    );\n    return this;\n  }\n\n  /**\n   * Sends a **song select** MIDI message.\n   *\n   * **Note**: since version 3.0, the song number is an integer between 1 and 128. In versions 1.0\n   * and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices that\n   * use a numbering scheme starting at 1.\n   *\n   * @param value {number} The number of the song to select (integer between 1 and 128).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws The song number must be between 1 and 128.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setSong(value, options = {}) {\n\n    value = parseInt(value);\n    if (isNaN(value) || !(value >= 1 && value <= 128)) {\n      throw new RangeError(\"The program value must be between 1 and 128\");\n    }\n\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.songselect,\n      [value],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendSongSelect(value, options = {}) {\n    this.setSong(value, options);\n    console.warn(\n      \"The sendSongSelect() method has been deprecated. Use setSong() instead.\"\n    );\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **tune request** real-time message.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendTuneRequest(options = {}) {\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.tunerequest,\n      undefined,\n      {time: options.time}\n    );\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **clock* real-time message. According to the standard, there are 24 MIDI Clocks\n   * for every quarter note.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendClock(options = {}) {\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.clock,\n      undefined,\n      {time: options.time}\n    );\n    return this;\n  };\n\n  /**\n   * Sends a **start** real-time message. A MIDI Start message starts the playback of the current\n   * song at beat 0. To start playback elsewhere in the song, use the\n   * [sendContinue()]{@link Output#sendContinue} method.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStart(options = {}) {\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.start,\n      undefined,\n      {time: options.time}\n    );\n    return this;\n  };\n\n  /**\n   * Sends a **continue** real-time message. This resumes song playback where it was previously\n   * stopped or where it was last cued with a song position message. To start playback from the\n   * start, use the [sendStart()]{@link Output#sendStart}` method.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {WebMidi} Returns the `WebMidi` object so methods can be chained.\n   */\n  sendContinue(options = {}) {\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.continue,\n      undefined,\n      {time: options.time}\n    );\n    return this;\n  };\n\n  /**\n   * Sends a **stop** real-time message. This tells the device connected to this output to stop\n   * playback immediately (or at the scheduled time).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStop(options = {}) {\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.stop,\n      undefined,\n      {time: options.time}\n    );\n    return this;\n  };\n\n  /**\n   * Sends an **active sensing** real-time message. This tells the device connected to this port\n   * that the connection is still good. Active sensing messages should be sent every 300 ms if there\n   * was no other activity on the MIDI port.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendActiveSensing(options = {}) {\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.activesensing,\n      [],\n      {time: options.time}\n    );\n    return this;\n  };\n\n  /**\n   * Sends a **reset** real-time message. This tells the device connected to this output that it\n   * should reset itself to a default state.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendReset(options = {}) {\n    this.send(\n      WebMidi.MIDI_SYSTEM_MESSAGES.reset,\n      undefined,\n      {time: options.time}\n    );\n    return this;\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendTuningRequest(options = {}) {\n    this.sendTuneRequest(options);\n    console.warn(\n      \"The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead.\"\n    );\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message to the specified channel(s) at the scheduled time. This\n   * is a key-specific aftertouch. For a channel-wide aftertouch message, use\n   * [setChannelAftertouch()]{@link Output#setChannelAftertouch}.\n   *\n   * @param note {number|string|Array}  The note for which you are sending an aftertouch value. The\n   * notes can be specified in one of two ways. The first way is by using the MIDI note number (an\n   * integer between 0 and 127). The second way is by using the note name followed by the octave\n   * (C3, G#4, F-1, Db7). The octave range should be between -1 and 9. The lowest note is C-1 (MIDI\n   * note number 0) and the highest note is G9 (MIDI note number 127). It is also possible to use\n   * an array of note names and/or numbers.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setKeyAftertouch(note, pressure, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setKeyAftertouch(note, pressure, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendKeyAftertouch(note, channel, pressure, options = {}) {\n    this.setKeyAftertouch(note, pressure, channel, options);\n    console.warn(\n      \"The sendKeyAftertouch() method has been deprecated. Use setKeyAftertouch() instead.\"\n    );\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **control change** message to the specified channel(s) at the scheduled time. The\n   * control change message to send can be specified numerically or by using one of the following\n   * common names:\n   *\n   *  * `bankselectcoarse` (#0)\n   *  * `modulationwheelcoarse` (#1)\n   *  * `breathcontrollercoarse` (#2)\n   *  * `footcontrollercoarse` (#4)\n   *  * `portamentotimecoarse` (#5)\n   *  * `dataentrycoarse` (#6)\n   *  * `volumecoarse` (#7)\n   *  * `balancecoarse` (#8)\n   *  * `pancoarse` (#10)\n   *  * `expressioncoarse` (#11)\n   *  * `effectcontrol1coarse` (#12)\n   *  * `effectcontrol2coarse` (#13)\n   *  * `generalpurposeslider1` (#16)\n   *  * `generalpurposeslider2` (#17)\n   *  * `generalpurposeslider3` (#18)\n   *  * `generalpurposeslider4` (#19)\n   *  * `bankselectfine` (#32)\n   *  * `modulationwheelfine` (#33)\n   *  * `breathcontrollerfine` (#34)\n   *  * `footcontrollerfine` (#36)\n   *  * `portamentotimefine` (#37)\n   *  * `dataentryfine` (#38)\n   *  * `volumefine` (#39)\n   *  * `balancefine` (#40)\n   *  * `panfine` (#42)\n   *  * `expressionfine` (#43)\n   *  * `effectcontrol1fine` (#44)\n   *  * `effectcontrol2fine` (#45)\n   *  * `holdpedal` (#64)\n   *  * `portamento` (#65)\n   *  * `sustenutopedal` (#66)\n   *  * `softpedal` (#67)\n   *  * `legatopedal` (#68)\n   *  * `hold2pedal` (#69)\n   *  * `soundvariation` (#70)\n   *  * `resonance` (#71)\n   *  * `soundreleasetime` (#72)\n   *  * `soundattacktime` (#73)\n   *  * `brightness` (#74)\n   *  * `soundcontrol6` (#75)\n   *  * `soundcontrol7` (#76)\n   *  * `soundcontrol8` (#77)\n   *  * `soundcontrol9` (#78)\n   *  * `soundcontrol10` (#79)\n   *  * `generalpurposebutton1` (#80)\n   *  * `generalpurposebutton2` (#81)\n   *  * `generalpurposebutton3` (#82)\n   *  * `generalpurposebutton4` (#83)\n   *  * `reverblevel` (#91)\n   *  * `tremololevel` (#92)\n   *  * `choruslevel` (#93)\n   *  * `celestelevel` (#94)\n   *  * `phaserlevel` (#95)\n   *  * `databuttonincrement` (#96)\n   *  * `databuttondecrement` (#97)\n   *  * `nonregisteredparametercoarse` (#98)\n   *  * `nonregisteredparameterfine` (#99)\n   *  * `registeredparametercoarse` (#100)\n   *  * `registeredparameterfine` (#101)\n   *\n   * Note: as you can see above, not all control change message have a matching common name. This\n   * does not mean you cannot use the others. It simply means you will need to use their number\n   * instead of their name.\n   *\n   * To view a list of all available `control change` messages, please consult \"Table 3 - Control\n   * Change Messages\" from the [MIDI Messages](\n   * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\n   * specification.\n   *\n   * @param controller {number|string} The MIDI controller name or number (0-119).\n   *\n   * @param [value=0] {number} The value to send (0-127).\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 119.\n   * @throws {RangeError} Invalid controller name.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendControlChange(controller, value, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].sendControlChange(controller, value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a pitch bend range message to the specified channel(s) at the scheduled time so that they\n   * adjust the range used by their pitch bend lever. The range is specified by using the\n   * `semitones` and `cents` parameters. For example, setting the `semitones` parameter to `12`\n   * means that the pitch bend range will be 12 semitones above and below the nominal pitch.\n   *\n   * @param semitones {number} The desired adjustment value in semitones (between 0 and 127). While\n   * nothing imposes that in the specification, it is very common for manufacturers to limit the\n   * range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0-127).\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127.\n   * @throws {RangeError} The lsb value must be between 0 and 127.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setPitchBendRange(semitones, cents, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setPitchBendRange(semitones, cents, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from 0 to 127.\n   *\n   * MIDI\n   * [registered parameters]\n   * (https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them. Here are the original registered parameters with the identifier that\n   * can be used as the first parameter of this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *\n   * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * Another set of extra parameters have been later added for 3D sound controllers. They are:\n   *\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} A single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  setRegisteredParameter(parameter, data, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setRegisteredParameter(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message to the specified channel(s). For key-specific\n   * aftertouch, you should instead use [setKeyAftertouch()]{@link Output#setKeyAftertouch}.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between 0 and 1.0 (default) or a raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   * @since 3.0.0\n   */\n  setChannelAftertouch(pressure, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setChannelAftertouch(pressure, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendChannelAftertouch(pressure, channel, options = {}) {\n    this.setChannelAftertouch(pressure, channel, options);\n    console.warn(\n      \"The sendChannelAftertouch() method has been deprecated. Use setChannelAftertouch() instead.\"\n    );\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message to the specified channel(s) at the scheduled time.\n   *\n   * @param value {number} The intensity level of the bend (between -1.0 and 1.0). A value of zero\n   * means no bend. If the `rawValue` option is set to `true`, the intensity can be defined by using\n   * an integer between 0 and 127. In this case, a value of 64 means no bend.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between -1.0 and 1.0 (default) or as raw integer between 0 and 127.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Pitch bend value must be between -1.0 and 1.0.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setPitchBend(value, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setPitchBend(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendPitchBend(bend, channel, options = {}) {\n    this.setPitchBend(bend, channel, options);\n    console.warn(\n      \"The sendPitchBend() method has been deprecated. Use setPitchBend() instead.\"\n    );\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **program change** message to the specified channel(s) at the scheduled time.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param [program=1] {number} The MIDI patch (program) number (1-128)\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setProgram(program, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setProgram(program, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendProgramChange(program, channel, options = {}) {\n\n    console.warn(\n      \"The sendProgramChange() method has been deprecated. Use setProgram() instead.\"\n    );\n\n    return this.setProgram(program, channel, options);\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to the specified channel(s) so that they adjust the\n   * depth of their modulation wheel's range. The range can be specified with the `semitones`\n   * parameter, the `cents` parameter or by specifying both parameters at the same time.\n   *\n   * @param [semitones=0] {number} The desired adjustment value in semitones (integer between\n   * 0 and 127).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127\n   * @throws {RangeError} The lsb value must be between 0 and 127\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setModulationRange(semitones, cents, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setModulationRange(semitones, cents, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a master tuning message to the specified channel(s). The value is decimal and must be\n   * larger than -65 semitones and smaller than 64 semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setMasterTuning(value, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setMasterTuning(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the program number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning program (1-128).\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 1 and 128.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setTuningProgram(value, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setTuningProgram(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * **Note**: since version 3.0, the bank number is an integer between 1 and 128. In versions\n   * 1.0 and 2.0, the number was between 0 and 127. This change aligns WebMidi.js with most devices\n   * that use a numbering scheme starting at 1.\n   *\n   * @param value {number} The desired tuning bank (1-128).\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 1 and 128.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setTuningBank(value, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setTuningBank(value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a MIDI **channel mode** message to the specified channel(s). The channel mode message to\n   * send can be specified numerically or by using one of the following common names:\n   *\n   *   * `\"allsoundoff\"` (#120)\n   *   * `\"resetallcontrollers\"` (#121)\n   *   * `\"localcontrol\"` (#122)\n   *   * `\"allnotesoff\"` (#123)\n   *   * `\"omnimodeoff\"` (#124)\n   *   * `\"omnimodeon\"` (#125)\n   *   * `\"monomodeon\"` (#126)\n   *   * `\"polymodeon\"` (#127)\n   *\n   * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\n   * require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * To make it easier, all channel mode messages have a matching helper method:\n   *\n   *   - [turnSoundOff()]{@link OutputChannel#turnSoundOff}\n   *   - [resetAllControllers()]{@link OutputChannel#resetAllControllers}\n   *   - [setLocalControl()]{@link OutputChannel#turnSoundOff}\n   *   - [turnNotesOff()]{@link OutputChannel#turnNotesOff}\n   *   - [setOmniMode()]{@link OutputChannel#setOmniMode}\n   *   - [setPolyphonicMode()]{@link OutputChannel#setPolyphonicMode}\n   *\n   * @param command {number|string} The numerical identifier of the channel mode message (integer\n   * between 120-127) or its name as a string.\n   *\n   * @param [value] {number} The value to send (integer between 0-127).\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   */\n  sendChannelMode(command, value, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].sendChannelMode(command, value, options);\n    });\n\n    return this;\n\n  }\n\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  turnSoundOff(channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].turnSoundOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **all note soff** channel mode message. This will turn all currently playing notes\n   * off. However, this does not prevent new notes from being played.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  turnNotesOff(channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].turnNotesOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   */\n  resetAllControllers(channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].resetAllControllers(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the polyphonic mode. In `\"poly\"` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `\"mono\"` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param mode {string} The mode to use: `\"mono\"` or `\"poly\"`.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setPolyphonicMode(mode, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setPolyphonicMode(mode, options);\n    });\n\n    return this;\n\n  }\n\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setLocalControl(state, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setLocalControl(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to `\"on\"` or `\"off\"` for the specified channel(s). MIDI's OMNI mode causes the\n   * instrument to respond to messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  setOmniMode(state, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setOmniMode(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter to the specified value. The NRPN is selected by passing in a\n   * two-position array specifying the values of the two control bytes. The value is specified by\n   * passing in a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\n   * would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].setNonRegisteredParameter([1, 8], 123);\n   * ```\n   *\n   * Obviously, you should select a channel so the message is not sent to all channels. For\n   * instance, to send to channel 1 of the first output port, you would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].setNonRegisteredParameter([1, 8], 123, 1);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was 10, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].setNonRegisteredParameter([2, 63], [0, 10], [1]);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer\"s documentation.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes (0x63,\n   * 0x62) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  setNonRegisteredParameter(parameter, data, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].setNonRegisteredParameter(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws Error The specified parameter is not available.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  incrementRegisteredParameter(parameter, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].incrementRegisteredParameter(parameter, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter\"s name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param channel {number|number[]} An integer between 1 and 16 or an array of such integers\n   * representing the channel(s) to listen on.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified parameter is not available.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  decrementRegisteredParameter(parameter, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].decrementRegisteredParameter(parameter, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a **note off** message for the specified notes on the specified channel(s). The first\n   * parameter is the note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   *  The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the release velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param [channel] {number|number[]} The MIDI channel number (between `1` and `16`) or an array\n   * of channel numbers.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] Controls whether the release velocity is set using\n   * integers between `0` and `127` (`true`) or a decimal number between `0` and `1` (`false`,\n   * default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOff(note, channel, options) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].sendNoteOff(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * This is an alias to the [sendNoteOff()]{@link Output#sendNoteOff} method.\n   *\n   * @see {@link Output#sendNoteOff}\n   *\n   * @param note\n   * @param channel\n   * @param options\n   * @returns {Output}\n   */\n  stopNote(note, channel, options) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].stopNote(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Plays a note or an array of notes on the specified channel(s). The first parameter is the note\n   * to play. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes on all\n   * specified channels. If a `duration` is set in the `options` parameter or in the {@link Note}\n   * object's [duration]{@link Note#duration} property, it will also schedule a **note off** message\n   * to end the note after said duration. If no `duration` is set, the note will simply play until\n   * a matching **note off** message is sent with [stopNote()]{@link Output#stopNote} or\n   * [sendNoteOff()]{@link Output#sendNoteOff}.\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the durations and velocities defined in the {@link Note}\n   * objects have precedence over the ones specified via the method's `options` parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param [channel] {number|number[]} The MIDI channel number (between `1` and `16`) or an array\n   * of channel numbers.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.duration=undefined] The number of milliseconds (integer) after which a\n   * **note off** message will be scheduled. If left undefined, only a **note on** message is sent.\n   *\n   * @param {boolean} [options.rawValue=false] Controls whether the attack and release velocities\n   * are set using integers between `0` and `127` (`true`) or a decimal number between `0` and `1`\n   * (`false`, default).\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   * This is only used with the **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The attack velocity to use when playing the note (between\n   * `0` and `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  playNote(note, channel, options = {}) {\n\n    // Compatibility warning\n    if (options.rawVelocity) {\n      console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' instead.\");\n    }\n    if (options.velocity) {\n      console.warn(\"The 'velocity' option is deprecated. Use 'velocity' instead.\");\n    }\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].playNote(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note on** message for the specified notes on the specified channel(s). The first\n   * parameter is the note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A {@link Note} object\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using {@link Note} objects, the attack velocity defined in the {@link Note} objects has\n   * precedence over the one specified via the method's `options` parameter. Also, the `duration` is\n   * ignored. If you want to also send a **note off** message, use the\n   * [playNote()]{@link Output#playNote} method instead.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note name (e.g. C3, G#4, F-1, Db7), a\n   * {@link Note} object or an array of the previous types. When using a note name, octave range\n   * must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param [channel] {number|number[]} The MIDI channel number (between `1` and `16`) or an array\n   * of channel numbers.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] Controls whether the attack velocity is set using\n   * integers between `0` and `127` (`true`) or a decimal number between `0` and `1` (`false`,\n   * default).\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number\n   * (DOMHighResTimeStamp), the operation will be scheduled for that time. If `time` is omitted, or\n   * in the past, the operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawValue` option is `true`, the value should be specified as an integer\n   * between `0` and `127`. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOn(note, channel, options = {}) {\n\n    WebMidi.sanitizeChannels(channel).forEach(ch => {\n      this.channels[ch].sendNoteOn(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Name of the MIDI output\n   *\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._midiOutput.name;\n  }\n\n  /**\n   * ID string of the MIDI output. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiOutput.id;\n  }\n\n  /**\n   * Output port's connection state: `\"pending\"`, `\"open\"` or `\"closed\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiOutput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this output port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiOutput.manufacturer;\n  }\n\n  /**\n   * State of the output port: `\"connected\"` or `\"disconnected\"`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiOutput.state;\n  }\n\n  /**\n   * Type of the output port (`\"output\"`)\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiOutput.type;\n  }\n\n}\n","import {WebMidi} from \"./WebMidi.js\";\n\n/**\n * The `Note` class represents a single note to be played. The `Note` can be played on a single\n * channel by using [OutputChannel.playNote()]{@link OutputChannel#playNote} or on multiple\n * channels at once by using [Output.playNote()]{@link Output#playNote}.\n *\n * If the note's `duration` property is set, the note will be stopped at the end of the duration. If\n * no duration is set, it will play until it is explicitly stopped using\n * [OutputChannel.stopNote()]{@link OutputChannel#stopNote} or\n * [Output.stopNote()]{@link Output#stopNote}.\n *\n * @param name {string|number} The name or note number of the note to create. If a number is used,\n * it must be an integer between 0 and 127. If a string is used, it must be the note name followed\n * by the octave (`\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`, etc.). The octave range must be between -1 and\n * 9. The lowest note is C-1 (MIDI note number 0) and the highest note is G9 (MIDI note number 127).\n *\n * @param {Object} [options={}]\n *\n * @param {number} [options.duration=Infinity] The number of milliseconds before the note should be\n * explicitly stopped.\n *\n * @param {number} [options.attack=0.5] The note's attack velocity as a decimal number between 0 and\n * 1.\n *\n * @param {number} [options.release=0.5] The note's release velocity as a decimal number between 0\n * and 1.\n *\n * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n * 127.\n *\n * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n * 127.\n *\n * @throws {Error} Invalid note name.\n *\n * @since 3.0.0\n */\nexport class Note {\n\n  constructor(name, options = {}) {\n\n    if (Number.isInteger(name)) {\n      this.number = name;\n    } else {\n      this.name = name;\n    }\n\n    this.duration = options.duration;\n    this.channels = options.channels;\n    this.attack = options.attack;\n    this.release = options.release;\n    if (options.rawAttack != undefined) this.rawAttack = options.rawAttack;\n    if (options.rawRelease != undefined) this.rawRelease = options.rawRelease;\n\n  }\n\n  /**\n   * The name of the note with the octave number (`\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`, etc.)\n   *\n   * @type {string}\n   */\n  get name() {\n    return WebMidi.NOTES[this._number % 12] + WebMidi.getOctave(this.number);\n  }\n  set name(value) {\n    value = WebMidi.guessNoteNumber(value);\n    if (value === false) throw new Error(\"Invalid note name.\");\n    this._number = value;\n  }\n\n  /**\n   * The MIDI note number as an integer between 0 and 127\n   * @type {number}\n   */\n  get number() {\n    return this._number;\n  }\n  set number(value) {\n    value = WebMidi.guessNoteNumber(value);\n    if (value === false) throw new Error(\"Invalid note number.\");\n    this._number = value;\n  }\n\n  /**\n   * The duration of the note as a positive decimal number representing the number of milliseconds\n   * that the note should play for. If the duration is set, a **note off** message is automatically\n   * scheduled to stop the note after the specified duration.\n   *\n   * @type {number}\n   */\n  get duration() {\n    return this._duration;\n  }\n  set duration(value) {\n    value = Math.max(parseFloat(value), 0);\n    this._duration = isNaN(value) ? Infinity : value;\n  }\n\n  /**\n   * An array of integers (1-16) representing the MIDI channel(s) the note should be played on.\n   *\n   * This is only necessary if you intend to use the {@link Output} object's\n   * [playNote()]{@link Output#playNote} method. If you use the {@link OutputChannel} object's\n   * [playNote()]{@link OutputChannel#playNote} method, it will be played on that channel (no matter\n   * what has been set as the channel).\n   *\n   * @type {number[]}\n   */\n  get channels() {\n    return this._channels;\n  }\n  set channels(value) {\n    this._channels = WebMidi.sanitizeChannels(value);\n  }\n\n  /**\n   * The attack velocity of the note as a decimal number between 0 and 1. By default, this is set to\n   * 64 ÷ 127 which is roughly 0.5.\n   *\n   * @type {number}\n   */\n  get attack() {\n    return this._rawAttack / 127;\n  }\n  set attack(value) {\n    value = Math.min(Math.max(parseFloat(value), 0), 1);\n    this._rawAttack = isNaN(value) ? 64 : Math.round(value * 127);\n  }\n\n  /**\n   * The raw attack velocity of the note as an integer between 0 and 127. By default, this is set to\n   * 64.\n   * @type {number}\n   */\n  get rawAttack() {\n    return this._rawAttack;\n  }\n  set rawAttack(value) {\n    value = Math.min(Math.max(parseInt(value), 0), 127);\n    this._rawAttack = isNaN(value) ? 64 : value;\n  }\n\n  /**\n   * The release velocity of the note as a decimal number between 0 and 1. By default, this is set\n   * to 64 ÷ 127 which is roughly 0.5.\n   *\n   * @type {number}\n   */\n  get release() {\n    return this._rawRelease / 127;\n  }\n  set release(value) {\n    value = Math.min(Math.max(parseFloat(value), 0), 1);\n    this._rawRelease = isNaN(value) ? 64 : Math.round(value * 127);\n  }\n\n  /**\n   * The raw release velocity of the note as an integer between 0 and 127. By default, this is set\n   * to 64.\n   * @type {number}\n   */\n  get rawRelease() {\n    return this._rawRelease;\n  }\n  set rawRelease(value) {\n    value = Math.min(Math.max(parseInt(value), 0), 127);\n    this._rawRelease = isNaN(value) ? 64 : value;\n  }\n\n  /**\n   * The octave of the note as an integer between -1 and 8.\n   * @type {number}\n   */\n  get octave() {\n    return Math.floor(Math.floor(this._number) / 12 - 1);\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/dist/djipevents.esm.min.js\";\nimport {Input} from \"./Input.js\";\nimport {Output} from \"./Output.js\";\nimport {Note} from \"./Note.js\";\n\n/**\n * The `WebMidi` object makes it easier to work with the Web MIDI API. Basically, it simplifies\n * sending outgoing MIDI messages and reacting to incoming MIDI messages.\n *\n * When using the WebMidi.js library, the `WebMidi` class has already been instantiated for you.\n * If you use the **IIFE** version, you should simply use the global object called `WebMidi`. If you\n * use the **CJS** (CommonJS) or **ESM** (ES6 module) version, you get an already-instantiated\n * object. This means there is no need to instantiate a new `WebMidi` object directly.\n *\n * The `WebMidi` object extends the\n * [EventEmitter](https://djipco.github.io/djipevents/EventEmitter.html) class from the\n * [djipevents]{@link https://djipco.github.io/djipevents/index.html} module. This means\n * it also includes methods such as\n * [addListener()](https://djipco.github.io/djipevents/EventEmitter.html#addListener),\n * [removeListener()](https://djipco.github.io/djipevents/EventEmitter.html#removeListener),\n * [hasListener()](https://djipco.github.io/djipevents/EventEmitter.html#hasListener) and several\n * others.\n *\n * @fires WebMidi#connected\n * @fires WebMidi#disconnected\n * @fires WebMidi#enabled\n * @fires WebMidi#disabled\n *\n * @extends EventEmitter\n */\nclass WebMidi extends EventEmitter {\n\n  constructor() {\n\n    super();\n\n    /**\n     * The `MIDIAccess` instance used to talk to the Web MIDI API. This should not be used directly\n     * unless you know what you are doing.\n     *\n     * @type {?MIDIAccess}\n     * @readonly\n     */\n    this.interface = null;\n\n    /**\n     * Array of all {@link Input} objects\n     * @type {Input[]}\n     * @private\n     */\n    this._inputs = [];\n\n    /**\n     * Array of all {@link Output} objects\n     * @type {Output[]}\n     * @private\n     */\n    this._outputs = [];\n\n    /**\n     * Array of statechange events to process. These events must be parsed synchronously so they do\n     * not override each other.\n     *\n     * @type {string[]}\n     * @private\n     */\n    this._stateChangeQueue = [];\n\n    this._octaveOffset = 0;\n\n    // If we are inside Node.js, polyfill navigator.requestMIDIAccess() and import performance.now()\n    if (this.isNode) {\n\n      // Important: performance must be imported before jzz because jzz checks for its existence at\n      // startup and falls back to something less precise if absent.\n      global.performance = require(\"perf_hooks\").performance;\n      global.navigator = require(\"jzz\");\n\n    }\n\n  }\n\n  /**\n   * Checks if the Web MIDI API is available in the current environment and then tries to connect to\n   * the host's MIDI subsystem. This is an asynchronous operation and it causes a security prompt to\n   * be displayed to the user.\n   *\n   * To enable the use of MIDI system exclusive messages, the `sysex` option should be set to\n   * `true`. However, under some environments (e.g. Jazz-Plugin), the `sysex` option is ignored\n   * and system exclusive messages are always enabled. You can check the\n   * [sysexEnabled]{@link WebMidi#sysexEnabled} property to confirm.\n   *\n   * To enable access to software synthesizers available on the host, you would set the `software`\n   * option to `true`. However, this option is only there to future-proof the library as support for\n   * software synths has not yet been implemented in any browser (as of April 2020).\n   *\n   * There are 3 ways to execute code after `WebMidi` has been enabled:\n   *\n   * - Pass a callback function in the options\n   * - Listen to the `enabled` event\n   * - Wait for the promise to resolve\n   *\n   * In order, this is what happens towards the end of the enabling process:\n   *\n   * 1. callback is executed\n   * 2. `enabled` event is triggered\n   * 3. `connected` events from available inputs and outputs are triggered\n   * 4. promise is resolved\n   *\n   * The promise is fulfilled with an object containing two properties (`inputs` and `outputs`) that\n   * contain arrays of available inputs and outputs, respectively.\n   *\n   * **Important note**: starting with Chrome v77, a page using Web MIDI API must be hosted on a\n   * secure origin (`https://`, `localhost` or `file:///`) and the user will always be prompted to\n   * authorize the operation (no matter if the `sysex` option is `true` or not).\n   *\n   * ##### Examples\n   * ```js\n   * // Enabling WebMidi and using the promise\n   * WebMidi.enable().then(ports => {\n   *   console.log(\"WebMidi.js has been enabled!\");\n   *   console.log(\"Inputs: \", ports.inputs);\n   *   console.log(\"Outputs: \", ports.outputs);\n   * })\n   * ```\n   *\n   * ```js\n   * // Enabling WebMidi and listening to 'enabled' event\n   * WebMidi.addListener(\"enabled\", e => {\n   *   console.log(\"WebMidi.js has been enabled!\");\n   * });\n   * WebMidi.enable();\n   * ```\n   *\n   * ```js\n   * // Enabling WebMidi and using callback function\n   * WebMidi.enable({callback: e => {\n   *   console.log(\"WebMidi.js has been enabled!\");\n   * });\n   * ```\n   *\n   * @param [options] {Object}\n   * @param [options.callback] {function} A function to execute once the operation completes. This\n   * function will receive an `Error` object if enabling the Web MIDI API failed.\n   * @param [options.sysex=false] {boolean} Whether to enable MIDI system exclusive messages or not.\n   * @param [options.software=false] {boolean} Whether to request access to software synthesizers on\n   * the host system. This is part of the spec but has not yet been implemented by most browsers as\n   * of April 2020.\n   *\n   * @async\n   * @returns {Promise<Object>} The promise is fulfilled with an object containing two properties\n   * (`inputs` and `outputs`) that contain arrays of available inputs and outputs, respectively.\n   *\n   * @throws Error The Web MIDI API is not supported in your environment.\n   * @throws Error Jazz-Plugin must be installed to use WebMIDIAPIShim.\n   */\n  async enable(options = {}, sysex = false) {\n\n    if (this.enabled) return Promise.resolve();\n\n    // Backwards-compatibility. Previous syntax was: enable(callback, sysex)\n    if (typeof options === \"function\") options = {callback: options, sysex: sysex};\n    if (sysex) options.sysex = true;\n\n    // The Jazz-Plugin takes a while to be available (even after the Window's 'load' event has been\n    // fired). Therefore, we wait a little while to give it time to load.\n    if (!this.supported) {\n\n      await new Promise((resolve, reject) => {\n\n        const start = this.time;\n\n        const intervalID = setInterval(() => {\n\n          if (this.supported) {\n            clearInterval(intervalID);\n            resolve();\n          } else {\n            if (this.time > start + 1500) {\n              clearInterval(intervalID);\n              let error = new Error(\"Web MIDI API support is not available in your environment.\");\n              if (typeof options.callback === \"function\") options.callback(error);\n              reject(error);\n            }\n          }\n\n        }, 25);\n\n      });\n\n    }\n\n    // Request MIDI access\n    try {\n      this.interface = await navigator.requestMIDIAccess(\n        {sysex: options.sysex, software: options.software}\n      );\n    } catch(err) {\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    /**\n     * Event emitted once `WebMidi` has been successfully enabled.\n     *\n     * @event WebMidi#enabled\n     * @type {Object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `enabled`\n     */\n    let event = {\n      timestamp: this.time,\n      target: this,\n      type: \"enabled\"\n    };\n\n    // Trigger the 'enabled' event. We do it before emitting the 'connected' events so that they can\n    // be listened to in callbacks tied to the 'enabled' event.\n    this.emit(\"enabled\", event);\n    if (typeof options.callback === \"function\") options.callback();\n\n    // We setup the statechange listener before creating the ports so that if properly catches the\n    // the ports' `connected` events\n    this.interface.onstatechange = this._onInterfaceStateChange.bind(this);\n\n    // Update inputs and outputs (this is where `Input` and `Output` objects are created). If\n    // successful, we return a promise fulfilled with all the input/output ports that were found.\n    try {\n      let ports = await this._updateInputsAndOutputs();\n      return Promise.resolve({\n        inputs: ports[0],\n        outputs: ports[1]\n      });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n  }\n\n  /**\n   * Completely disables `WebMidi.js` by unlinking the MIDI subsystem's interface and closing all\n   * {@link Input} and {@link Output} objects that may be available. This also means that listeners\n   * added to {@link Input} objects, {@link Output} objects or to `WebMidi` itself are also\n   * destroyed.\n   *\n   * @async\n   * @returns {Promise<void>}\n   *\n   * @throws Error The Web MIDI API is not supported by your environment.\n   *\n   * @since 2.0.0\n   */\n  async disable() {\n\n    if (!this.supported) throw new Error(\"The Web MIDI API is not supported by your environment.\");\n\n    return this._destroyInputsAndOutputs().then(() => {\n\n      if (this.isNode) navigator.close();\n\n      if (this.interface) this.interface.onstatechange = undefined;\n      this.interface = null; // also resets enabled, sysexEnabled\n\n      /**\n       * Event emitted once `WebMidi` has been successfully disabled.\n       *\n       * @event WebMidi#disabled\n       * @type {Object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {WebMidi} target The object that triggered the event\n       * @property {string} type `disabled`\n       */\n      let event = {\n        timestamp: this.time,\n        target: this,\n        type: \"disabled\"\n      };\n\n      // Finally, trigger the 'disabled' event and remove all listeners\n      this.emit(\"disabled\", event);\n      this.removeListener();\n\n    });\n\n  };\n\n  /**\n   * Returns the {@link Input} object that matches the specified ID string or `false` if no matching\n   * input is found. As per the Web MIDI API specification, IDs are strings (not integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the input. IDs can be viewed by looking at the\n   * [inputs]{@link WebMidi#inputs} array. Even though they sometimes look like integers, IDs are\n   * strings.\n   *\n   * @returns {Input|false} An {@link Input} object matching the specified ID string. If no matching\n   * input can be found, the method returns `false`.\n   *\n   * @throws Error WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputById(id) {\n\n    if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n    if (!id) return false;\n\n    for (let i = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i].id === id.toString()) return this.inputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the first {@link Input} object whose name **contains** the specified string. Note that\n   * the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [inputs]{@link WebMidi#inputs} array).\n   *\n   * @returns {Input|false} The {@link Input} that was found or `false` if no input contained the\n   * specified name.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputByName(name) {\n\n    if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n    if (!name) return false;\n    name = name.toString();\n\n    for (let i = 0; i < this.inputs.length; i++) {\n      if (~this.inputs[i].name.indexOf(name)) return this.inputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the first {@link Output} object whose name **contains** the specified string. Note that\n   * the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [outputs]{@link WebMidi#outputs} array).\n   *\n   * @returns {Output|false} The {@link Output} that was found or `false` if no output matched the\n   * specified name.\n   *\n   * @throws Error WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputByName(name) {\n\n    if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n    if (!name) return false;\n    name = name.toString();\n\n    for (let i = 0; i < this.outputs.length; i++) {\n      if (~this.outputs[i].name.indexOf(name)) return this.outputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns the {@link Output} object that matches the specified ID string or `false` if no\n   * matching output is found. As per the Web MIDI API specification, IDs are strings (not\n   * integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the port. IDs can be viewed by looking at the\n   * [outputs]{@link WebMidi#outputs} array.\n   *\n   * @returns {Output|false} An {@link Output} object matching the specified ID string. If no\n   * matching output can be found, the method returns `false`.\n   *\n   * @throws Error WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputById(id) {\n\n    if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n    if (!id) return false;\n\n    for (let i = 0; i < this.outputs.length; i++) {\n      if (this.outputs[i].id === id.toString()) return this.outputs[i];\n    }\n\n    return false;\n\n  };\n\n  /**\n   * Returns a MIDI note number matching the note name passed in the form of a string parameter. The\n   * note name must include the octave number. The name can also optionally include a sharp (#),\n   * a double sharp (##), a flat (b) or a double flat (bb) symbol. For example, these are all valid\n   * names: C5, G4, D#-1, F0, Gb7, Eb-1, Abb4, B##6, etc.\n   *\n   * When converting note names to numbers, C4 is considered to be middle C (MIDI note number 60) as\n   * per the scientific pitch notation standard.\n   *\n   * The resulting note number is offset by the [octaveOffset]{@link WebMidi#octaveOffset} value (if\n   * not zero). For example, if you pass in \"C4\" and the [octaveOffset]{@link WebMidi#octaveOffset}\n   * value is 2, the resulting MIDI note number will be 36.\n   *\n   * **Note**: since v3.x, this function returns `false` instead of throwing an error when it cannot\n   * parse the name to a number.\n   *\n   * @param name {string} The name of the note in the form of a letter, followed by an optional \"#\",\n   * \"##\", \"b\" or \"bb\" followed by the octave number.\n   *\n   * @returns {number|false} The MIDI note number (an integer between 0 and 127) or `false` if the\n   * name could not successfully be parsed to a number.\n   */\n  getNoteNumberByName(name) {\n\n    if (typeof name !== \"string\") name = \"\";\n\n    let matches = name.match(/([CDEFGAB])(#{0,2}|b{0,2})(-?\\d+)/i);\n    if(!matches) return false;\n\n    let semitones = {C: 0, D: 2, E: 4, F: 5, G: 7, A: 9, B: 11 };\n    let semitone = semitones[matches[1].toUpperCase()];\n    let octave = parseInt(matches[3]);\n    let result = ((octave + 1 - Math.floor(this.octaveOffset)) * 12) + semitone;\n\n    if (matches[2].toLowerCase().indexOf(\"b\") > -1) {\n      result -= matches[2].length;\n    } else if (matches[2].toLowerCase().indexOf(\"#\") > -1) {\n      result += matches[2].length;\n    }\n\n    if (result < 0 || result > 127) return false;\n\n    return result;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0. Use getNoteNumberByName() instead.\n   */\n  noteNameToNumber(name) {\n    console.warn(\n      \"The noteNameToNumber() method has been deprecated. Use getNoteNumberByName() instead.\"\n    );\n    return this.getNoteNumberByName(name);\n  }\n\n  /**\n   * Returns the octave number for the specified MIDI note number (0-127). By default, the value is\n   * based on middle C (note number 60) being placed on the 4th octave (C4). However, by using the\n   * [octaveOffset]{@link WebMidi#octaveOffset} property, you can offset the result as desired.\n   *\n   * **Note**: since v3.x, this method returns `false` instead of `undefined` when the value cannot\n   * be parsed to a valid octave.\n   *\n   * @param number {number} An integer representing a valid MIDI note number (between 0 and 127).\n   *\n   * @returns {number|false} The octave (as a signed integer) or `false` if the value could not be\n   * parsed to a valid octave.\n   *\n   * @since 2.0.0-rc.6\n   */\n  getOctave(number) {\n\n    number = parseInt(number);\n\n    if (!isNaN(number) && number >= 0 && number <= 127) {\n      return Math.floor(number / 12 - 1) + this.octaveOffset;\n    } else {\n      return false;\n    }\n\n  }\n\n  /**\n   * Returns a sanitized array of valid MIDI channel numbers (1-16). The parameter should be a\n   * single integer or an array of integers.\n   *\n   * For backwards-compatibility, passing `undefined` as a parameter to this method results in all\n   * channels being returned (1-16). Otherwise, parameters that cannot successfully be parsed to\n   * integers between 1 and 16 are silently ignored.\n   *\n   * @param [channel] {number|number[]} An integer or an array of integers to parse as channel\n   * numbers.\n   *\n   * @returns {Array} An array of 0 or more valid MIDI channel numbers.\n   */\n  sanitizeChannels(channel) {\n\n    let channels;\n\n    if (channel === \"all\") { // backwards-compatibility\n      channels = [\"all\"];\n    } else if (channel === \"none\") { // backwards-compatibility\n      return [];\n    } else if (!Array.isArray(channel)) {\n      channels = [channel];\n    } else {\n      channels = channel;\n    }\n\n    // In order to preserve backwards-compatibility, we let this assignment as it is.\n    if (channels.indexOf(\"all\") > -1) {\n      channels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    }\n\n    return channels\n      .map(function(ch) {\n        return parseInt(ch);\n      })\n      .filter(function(ch) {\n        return (ch >= 1 && ch <= 16);\n      });\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0. Use sanitizeChannels() instead.\n   */\n  toMIDIChannels(channel) {\n    console.warn(\n      \"The toMIDIChannels() method has been deprecated. Use sanitizeChannels() instead.\"\n    );\n    return this.sanitizeChannels(channel);\n  }\n\n  /**\n   * Returns a valid MIDI note number (0-127) given the specified input. The parameter usually is a\n   * string containing a note name (`\"C3\"`, `\"F#4\"`, `\"D-2\"`, `\"G8\"`, etc.). If an integer between 0\n   * and 127 is passed, it will simply be returned as is (for convenience). Other strings will be\n   * parsed for integer, if possible.\n   *\n   * **Note**: since v3.x, this method returns `false` instead of throwing an error when the input\n   * is invalid.\n   *\n   * @param input {string|number} A string to extract the note number from. An integer can also be\n   * used, in this case it will simply be returned as is (if between 0 and 127).\n   *\n   * @returns {number|false} A valid MIDI note number (0-127) or `false` if the input could not\n   * successfully be parsed to a note number.\n   */\n  guessNoteNumber(input) {\n\n    let output = false;\n\n    if (Number.isInteger(input) && input >= 0 && input <= 127) {        // uint\n      output = parseInt(input);\n    } else if (parseInt(input) >= 0 && parseInt(input) <= 127) {        // float or uint as string\n      output = parseInt(input);\n    } else if (typeof input === \"string\" || input instanceof String) {  // string\n      output = this.getNoteNumberByName(input);\n    }\n\n    if (output === false) return false;\n    return output;\n\n  }\n\n  /**\n   * Converts an input value, which can be an unsigned integer (0-127), a note name, a {@link Note}\n   * object or an array of the previous types, to an array of {@link Note} objects.\n   *\n   * {@link Note} objects are returned as is. For note numbers and names, a {@link Note} object is\n   * created with the options specified. Invalid elements are simply ignored.\n   *\n   * @param [notes] {number|string|Note|number[]|string[]|Note[]}\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a decimal number between 0\n   * and 1.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a decimal number between 0\n   * and 1.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127.\n   *\n   * @returns {Note[]}\n   */\n  getValidNoteArray(notes, options = {}) {\n\n    let result = [];\n    if (!Array.isArray(notes)) notes = [notes];\n\n    notes.forEach(note => {\n\n      if (note instanceof Note) {\n        result.push(note);\n      } else {\n        let number = this.guessNoteNumber(note);\n        if (number !== false) result.push(new Note(number, options));\n      }\n\n    });\n\n    return result;\n\n  }\n\n  /**\n   * Returns a valid timestamp, relative to the navigation start of the document, derived from the\n   * `time` parameter. If the parameter is a string starting with the \"+\" sign and followed by a\n   * number, the resulting timestamp will be the sum of the current timestamp plus that number. If\n   * the parameter is a positive number, it will be returned as is. Otherwise, false will be\n   * returned.\n   *\n   * @param [time] {number|string} The time string (e.g. `\"+2000\"`) or number to parse\n   * @return {number} A positive number\n   */\n  convertToTimestamp(time) {\n\n    let value = false;\n    let parsed = parseFloat(time);\n    if (isNaN(parsed)) return false;\n\n    if (typeof time === \"string\" && time.substring(0, 1) === \"+\") {\n      if (parsed >= 0) value = performance.now() + parsed;\n    } else {\n      if (parsed >= 0) value = parsed;\n    }\n\n    return value;\n\n  };\n\n  /**\n   *\n   * @return {Promise<void>}\n   * @private\n   */\n  async _destroyInputsAndOutputs() {\n\n    let promises = [];\n\n    this.inputs.forEach(input => promises.push(input.destroy()));\n    this.outputs.forEach(output => promises.push(output.destroy()));\n\n    return Promise.all(promises).then(() => {\n      this._inputs = [];\n      this._outputs = [];\n    });\n\n  }\n\n  /**\n   * @private\n   */\n  _onInterfaceStateChange(e) {\n\n    this._updateInputsAndOutputs();\n\n    /**\n     * Event emitted when an {@link Input} or {@link Output} becomes available. This event is\n     * typically fired whenever a MIDI device is plugged in. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#connected\n     * @type {Object}\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n     * (in milliseconds since the navigation start of the document).\n     * @property {string} type `connected`\n     * @property {Input|Output} target The {@link Input} or {@link Output} object that triggered the\n     * event.\n     */\n\n    /**\n     * Event emitted when an {@link Input} or {@link Output} becomes unavailable. This event is\n     * typically fired whenever a MIDI device is unplugged. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#disconnected\n     * @type {Object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {string} type `disconnected`\n     * @property {Object} target Object with properties describing the {@link Input} or {@Output}\n     * that triggered the event.\n     * @property {string} target.connection `\"closed\"`\n     * @property {string} target.id ID of the input\n     * @property {string} target.manufacturer Manufacturer of the device that provided the input\n     * @property {string} target.name Name of the device that provided the input\n     * @property {string} target.state `disconnected`\n     * @property {string} target.type `input` or `output`\n     */\n    let event = {\n      timestamp: e.timeStamp,\n      type: e.port.state\n    };\n\n    if (this.interface && e.port.state === \"connected\") {\n\n      if (e.port.type === \"output\") {\n        event.port = this.getOutputById(e.port.id); // legacy\n        event.target = event.port;\n      } else if (e.port.type === \"input\") {\n        event.port = this.getInputById(e.port.id); // legacy\n        event.target = event.port;\n      }\n\n    } else {\n\n      // It feels more logical to include a `target` property instead of a `port` property. This is\n      // the terminology used everywhere in the library.\n      event.port = {\n        connection: \"closed\",\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n\n      event.target = event.port;\n\n    }\n\n    this.emit(e.port.state, event);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputsAndOutputs() {\n\n    return Promise.all([\n      this._updateInputs(),\n      this._updateOutputs()\n    ]);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputs() {\n\n    let promises = [];\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = 0; i < this._inputs.length; i++) {\n\n      let remove = true;\n\n      let updated = this.interface.inputs.values();\n\n      for (let input = updated.next(); input && !input.done; input = updated.next()) {\n        if (this._inputs[i]._midiInput === input.value) {\n          remove = false;\n          break;\n        }\n      }\n\n      if (remove) this._inputs.splice(i, 1);\n\n    }\n\n    // Check for items to add in the existing inputs array because they just appeared in the MIDI\n    // back-end inputs list. We must check for the existence of this.interface because it might\n    // have been closed via WebMidi.disable().\n    this.interface && this.interface.inputs.forEach(nInput => {\n\n      let add = true;\n\n      for (let j = 0; j < this._inputs.length; j++) {\n        if (this._inputs[j]._midiInput === nInput) {\n          add = false;\n        }\n      }\n\n      if (add) {\n        let input = new Input(nInput);\n        this._inputs.push(input);\n        promises.push(input.open());\n      }\n\n    });\n\n    return Promise.all(promises);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateOutputs() {\n\n    let promises = [];\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = 0; i < this._outputs.length; i++) {\n\n      let remove = true;\n\n      let updated = this.interface.outputs.values();\n\n      for (let output = updated.next(); output && !output.done; output = updated.next()) {\n        if (this._outputs[i]._midiOutput === output.value) {\n          remove = false;\n          break;\n        }\n      }\n\n      if (remove) {\n        this._outputs[i].close();\n        this._outputs.splice(i, 1);\n      }\n\n    }\n\n    // Check for items to add in the existing inputs array because they just appeared in the MIDI\n    // back-end outputs list. We must check for the existence of this.interface because it might\n    // have been closed via WebMidi.disable().\n    this.interface && this.interface.outputs.forEach(nOutput => {\n\n      let add = true;\n\n      for (let j = 0; j < this._outputs.length; j++) {\n        if (this._outputs[j]._midiOutput === nOutput) {\n          add = false;\n        }\n      }\n\n      if (add) {\n        let output = new Output(nOutput);\n        this._outputs.push(output);\n        promises.push(output.open());\n      }\n\n    });\n\n    return Promise.all(promises);\n\n  };\n\n  // injectPluginMarkup(parent) {\n  //\n  //   // Silently ignore on Node.js\n  //   if (this.isNode) return;\n  //\n  //   // Default to <body> if no parent is specified\n  //   if (!(parent instanceof Element) && !(parent instanceof HTMLDocument)) {\n  //     parent = document.body;\n  //   }\n  //\n  //   // IE10 needs this:\n  //   // <meta http-equiv=\"X-UA-Compatible\" content=\"requiresActiveX=true\"/>\n  //\n  //   // Create markup and add to parent\n  //   const obj = document.createElement(\"object\");\n  //   obj.classid = \"CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90\"; // IE\n  //   if (!obj.isJazz) obj.type = \"audio/x-jazz\";                 // Standards-compliant\n  //   obj.style.visibility = \"hidden\";\n  //   obj.style.width = obj.style.height = \"0px\";\n  //   parent.appendChild(obj);\n  //\n  // }\n\n  /**\n   * Indicates whether access to the host's MIDI subsystem is active or not.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get enabled() {\n    return this.interface !== null;\n  }\n\n  /**\n   * An array of all currently available MIDI inputs.\n   *\n   * @readonly\n   * @type {Array}\n   */\n  get inputs() {\n    return this._inputs;\n  }\n\n  /**\n   * Indicates whether the current environment is Node.js or not\n   * @type {boolean}\n   */\n  get isNode() {\n\n    return (Object.prototype.toString.call(\n      typeof process !== \"undefined\" ? process : 0\n    ) === \"[object process]\");\n\n  }\n\n  /**\n   * An integer to offset the octave both in inbound and outbound messages. By default, middle C\n   * (MIDI note number 60) is placed on the 4th octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * @type {number}\n   *\n   * @since 2.1\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n    value = parseInt(value);\n    if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be a valid number.\");\n    this._octaveOffset = value;\n  }\n\n  /**\n   * An array of all currently available MIDI outputs.\n   *\n   * @readonly\n   * @type {Array}\n   */\n  get outputs() {\n    return this._outputs;\n  }\n\n  /**\n   * Indicates whether the environment provides support for the Web MIDI API or not.\n   *\n   * **Note**: in environments that do not offer built-in MIDI support, this will report `true` if\n   * the `navigator.requestMIDIAccess` function is available. For example, if you have installed\n   * WebMIDIAPIShim.js but no plugin, this property will be `true` even though actual support might\n   * not be there.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get supported() {\n    return (navigator && navigator.requestMIDIAccess) ? true : false;\n  }\n\n  /**\n   * Indicates whether MIDI system exclusive messages have been activated when WebMidi.js was\n   * enabled via the `enable()` method.\n   *\n   * @readonly\n   * @type Boolean\n   */\n  get sysexEnabled() {\n    return !!(this.interface && this.interface.sysexEnabled);\n  }\n\n  /**\n   * The elapsed time, in milliseconds, since the\n   * [time origin]\n   * (https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp#The_time_origin). Said\n   * simply, it is the number of milliseconds that passed since the page was loaded. Being a\n   * floating-point number, it has sub-millisecond accuracy. According to the\n   * [specification](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp), the\n   * time should be accurate to 5 µs (microseconds). However, due to various constraints, the\n   * browser might only be accurate to one millisecond.\n   *\n   * @type {DOMHighResTimeStamp}\n   * @readonly\n   */\n  get time() {\n    return performance.now();\n  }\n\n  /**\n   * Enum of all MIDI channel voice messages and their associated numerical value:\n   *\n   * - `noteoff`: 0x8 (8)\n   * - `noteon`: 0x9 (9)\n   * - `keyaftertouch`: 0xA (10)\n   * - `controlchange`: 0xB (11)\n   * - `channelmode`: 0xB (11)\n   * - `nrpn`: 0xB (11)\n   * - `programchange`: 0xC (12)\n   * - `channelaftertouch`: 0xD (13)\n   * - `pitchbend`: 0xE (14)\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 3.0.0\n   */\n  get MIDI_CHANNEL_VOICE_MESSAGES() {\n\n    return {\n      noteoff: 0x8,           // 8\n      noteon: 0x9,            // 9\n      keyaftertouch: 0xA,     // 10\n      controlchange: 0xB,     // 11\n      channelmode: 0xB,       // 11\n      nrpn: 0xB,              // 11\n      programchange: 0xC,     // 12\n      channelaftertouch: 0xD, // 13\n      pitchbend: 0xE          // 14\n    };\n\n  }\n\n  /**\n   * Enum of all MIDI channel voice messages and their associated numerical value. Note that it\n   * has been deprecated since v3.0. You should now use\n   * [MIDI_CHANNEL_VOICE_MESSAGES]{@link WebMidi.MIDI_CHANNEL_VOICE_MESSAGES}.\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @deprecated since version 3.0 (will be dropped in version 4.0)\n   *\n   * @since 2.0.0\n   */\n  get MIDI_CHANNEL_MESSAGES() {\n    console.warn(\n      \"MIDI_CHANNEL_MESSAGES has been deprecated. Use MIDI_CHANNEL_VOICE_MESSAGES instead.\"\n    );\n    return this.MIDI_CHANNEL_VOICE_MESSAGES;\n  }\n\n  /**\n   * Enum of all channel mode messages and their associated numerical value:\n   *\n   * - `allsoundoff`: 120\n   * - `resetallcontrollers`: 121\n   * - `localcontrol`: 122\n   * - `allnotesoff`: 123\n   * - `omnimodeoff`: 124\n   * - `omnimodeon`: 125\n   * - `monomodeon`: 126\n   * - `polymodeon`: 127\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_CHANNEL_MODE_MESSAGES() {\n\n    return {\n      allsoundoff: 120,\n      resetallcontrollers: 121,\n      localcontrol: 122,\n      allnotesoff: 123,\n      omnimodeoff: 124,\n      omnimodeon: 125,\n      monomodeon: 126,\n      polymodeon: 127\n    };\n\n  }\n\n  /**\n   * Enum of all control change messages and their associated numerical value:\n   *\n   * - `bankselectcoarse`: 0\n   * - `modulationwheelcoarse`: 1\n   * - `breathcontrollercoarse`: 2\n   * - `footcontrollercoarse`: 4\n   * - `portamentotimecoarse`: 5\n   * - `dataentrycoarse`: 6\n   * - `volumecoarse`: 7\n   * - `balancecoarse`: 8\n   * - `pancoarse`: 10\n   * - `expressioncoarse`: 11\n   * - `effectcontrol1coarse`: 12\n   * - `effectcontrol2coarse`: 13\n   * - `generalpurposeslider1`: 16\n   * - `generalpurposeslider2`: 17\n   * - `generalpurposeslider3`: 18\n   * - `generalpurposeslider4`: 19\n   * - `bankselectfine`: 32\n   * - `modulationwheelfine`: 33\n   * - `breathcontrollerfine`: 34\n   * - `footcontrollerfine`: 36\n   * - `portamentotimefine`: 37\n   * - `dataentryfine`: 38\n   * - `volumefine`: 39\n   * - `balancefine`: 40\n   * - `panfine`: 42\n   * - `expressionfine`: 43\n   * - `effectcontrol1fine`: 44\n   * - `effectcontrol2fine`: 45\n   * - `holdpedal`: 64\n   * - `portamento`: 65\n   * - `sustenutopedal`: 66\n   * - `softpedal`: 67\n   * - `legatopedal`: 68\n   * - `hold2pedal`: 69\n   * - `soundvariation`: 70\n   * - `resonance`: 71\n   * - `soundreleasetime`: 72\n   * - `soundattacktime`: 73\n   * - `brightness`: 74\n   * - `soundcontrol6`: 75\n   * - `soundcontrol7`: 76\n   * - `soundcontrol8`:`77\n   * - `soundcontrol9`: 78\n   * - `soundcontrol10`: 79\n   * - `generalpurposebutton1`: 80\n   * - `generalpurposebutton2`: 81\n   * - `generalpurposebutton3`: 82\n   * - `generalpurposebutton4`: 83\n   * - `reverblevel`: 91\n   * - `tremololevel`: 92\n   * - `choruslevel`: 93\n   * - `celestelevel`: 94\n   * - `phaserlevel`: 95\n   * - `databuttonincrement`: 96\n   * - `databuttondecrement`: 97\n   * - `nonregisteredparametercoarse`: 98\n   * - `nonregisteredparameterfine`: 99\n   * - `registeredparametercoarse`: 100\n   * - `registeredparameterfine`: 101\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_CONTROL_CHANGE_MESSAGES() {\n\n    return {\n      bankselectcoarse: 0,\n      modulationwheelcoarse: 1,\n      breathcontrollercoarse: 2,\n      footcontrollercoarse: 4,\n      portamentotimecoarse: 5,\n      dataentrycoarse: 6,\n      volumecoarse: 7,\n      balancecoarse: 8,\n      pancoarse: 10,\n      expressioncoarse: 11,\n      effectcontrol1coarse: 12,\n      effectcontrol2coarse: 13,\n      generalpurposeslider1: 16,\n      generalpurposeslider2: 17,\n      generalpurposeslider3: 18,\n      generalpurposeslider4: 19,\n      bankselectfine: 32,\n      modulationwheelfine: 33,\n      breathcontrollerfine: 34,\n      footcontrollerfine: 36,\n      portamentotimefine: 37,\n      dataentryfine: 38,\n      volumefine: 39,\n      balancefine: 40,\n      panfine: 42,\n      expressionfine: 43,\n      effectcontrol1fine: 44,\n      effectcontrol2fine: 45,\n      holdpedal: 64,\n      portamento: 65,\n      sustenutopedal: 66,\n      softpedal: 67,\n      legatopedal: 68,\n      hold2pedal: 69,\n      soundvariation: 70,\n      resonance: 71,\n      soundreleasetime: 72,\n      soundattacktime: 73,\n      brightness: 74,\n      soundcontrol6: 75,\n      soundcontrol7: 76,\n      soundcontrol8: 77,\n      soundcontrol9: 78,\n      soundcontrol10: 79,\n      generalpurposebutton1: 80,\n      generalpurposebutton2: 81,\n      generalpurposebutton3: 82,\n      generalpurposebutton4: 83,\n      reverblevel: 91,\n      tremololevel: 92,\n      choruslevel: 93,\n      celestelevel: 94,\n      phaserlevel: 95,\n      databuttonincrement: 96,\n      databuttondecrement: 97,\n      nonregisteredparametercoarse: 98,\n      nonregisteredparameterfine: 99,\n      registeredparametercoarse: 100,\n      registeredparameterfine: 101\n    };\n\n  }\n\n  /**\n   * Array of valid events triggered at the interface level.\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  get MIDI_INTERFACE_EVENTS() {\n    return [\"connected\", \"disconnected\"];\n  }\n\n  /**\n   * Enum of all control change messages that are used to create NRPN messages and their associated\n   * numerical value:\n   *\n   * - `entrymsb`: 6\n   * - `entrylsb`: 38\n   * - `increment`: 96\n   * - `decrement`: 97\n   * - `paramlsb`: 98\n   * - `parammsb`: 99\n   * - `nullactiveparameter`: 127\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_NRPN_MESSAGES() {\n\n    return {\n      entrymsb: 6,\n      entrylsb: 38,\n      increment: 96,\n      decrement: 97,\n      paramlsb: 98,\n      parammsb: 99,\n      nullactiveparameter: 127\n    };\n\n  }\n\n  /**\n   * Enum of all registered parameters and their associated pair of numerical values. MIDI\n   * registered parameters extend the original list of control change messages. Currently, there are\n   * only a limited number of them:\n   *\n   * - `pitchbendrange`: [0x00, 0x00]\n   * - `channelfinetuning`: [0x00, 0x01]\n   * - `channelcoarsetuning`: [0x00, 0x02]\n   * - `tuningprogram`: [0x00, 0x03]\n   * - `tuningbank`: [0x00, 0x04]\n   * - `modulationrange`: [0x00, 0x05]\n   * - `azimuthangle`: [0x3D, 0x00]\n   * - `elevationangle`: [0x3D, 0x01]\n   * - `gain`: [0x3D, 0x02]\n   * - `distanceratio`: [0x3D, 0x03]\n   * - `maximumdistance`: [0x3D, 0x04]\n   * - `maximumdistancegain`: [0x3D, 0x05]\n   * - `referencedistanceratio`: [0x3D, 0x06]\n   * - `panspreadangle`: [0x3D, 0x07]\n   * - `rollangle`: [0x3D, 0x08]\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_REGISTERED_PARAMETER() {\n\n    return {\n      pitchbendrange: [0x00, 0x00],\n      channelfinetuning: [0x00, 0x01],\n      channelcoarsetuning: [0x00, 0x02],\n      tuningprogram: [0x00, 0x03],\n      tuningbank: [0x00, 0x04],\n      modulationrange: [0x00, 0x05],\n      azimuthangle: [0x3D, 0x00],\n      elevationangle: [0x3D, 0x01],\n      gain: [0x3D, 0x02],\n      distanceratio: [0x3D, 0x03],\n      maximumdistance: [0x3D, 0x04],\n      maximumdistancegain: [0x3D, 0x05],\n      referencedistanceratio: [0x3D, 0x06],\n      panspreadangle: [0x3D, 0x07],\n      rollangle: [0x3D, 0x08]\n    };\n\n  }\n\n  /**\n   * Enum of all valid MIDI system messages and matching numerical values. WebMidi.js also uses\n   * two custom messages.\n   *\n   * **System common messages**\n   * - `sysex`: 0xF0 (240)\n   * - `timecode`: 0xF1 (241)\n   * - `songposition`: 0xF2 (242)\n   * - `songselect`: 0xF3 (243)\n   * - `tunerequest`: 0xF6 (246)\n   * - `sysexend`: 0xF7 (247)\n   *\n   * The `sysexend` message is never actually received. It simply ends a sysex stream.\n   *\n   * **System real-time messages**\n   *\n   * - `clock`: 0xF8 (248)\n   * - `start`: 0xFA (250)\n   * - `continue`: 0xFB (251)\n   * - `stop`: 0xFC (252)\n   * - `activesensing`: 0xFE (254)\n   * - `reset`: 0xFF (255)\n   *\n   * Values 249 and 253 are actually relayed by the Web MIDI API but they do not serve a specific\n   * purpose. The\n   * [MIDI 1.0 spec](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n   * simply states that they are undefined/reserved.\n   *\n   * **Custom WebMidi.js messages**\n   *\n   * - `midimessage`: 0\n   * - `unknownsystemmessage`: -1\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   *\n   * @since 2.0.0\n   */\n  get MIDI_SYSTEM_MESSAGES() {\n\n    return {\n\n      // System common messages\n      sysex: 0xF0,            // 240\n      timecode: 0xF1,         // 241\n      songposition: 0xF2,     // 242\n      songselect: 0xF3,       // 243\n      tunerequest: 0xF6,      // 246\n      tuningrequest: 0xF6,    // for backwards-compatibility (deprecated in version 3.0)\n      sysexend: 0xF7,         // 247 (never actually received - simply ends a sysex)\n\n      // System real-time messages\n      clock: 0xF8,            // 248\n      start: 0xFA,            // 250\n      continue: 0xFB,         // 251\n      stop: 0xFC,             // 252\n      activesensing: 0xFE,    // 254\n      reset: 0xFF,            // 255\n\n      // Custom WebMidi.js messages\n      midimessage: 0,\n      unknownsystemmessage: -1\n\n    };\n\n  }\n\n  /**\n   * Array of standard note names\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  get NOTES() {\n    return [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n  }\n\n}\n\n// Export singleton instance of WebMidi class. The 'constructor' is nulled so that it cannot be used\n// to instantiate a new WebMidi object or extend it. However, it is not freezed so it remains\n// extensible (properties can be added at will).\nconst wm = new WebMidi();\nwm.constructor = null;\nexport {wm as WebMidi};\n\nexport {Note} from \"./Note.js\";\n"],"names":["e","[object Object]","this","eventMap","eventsSuspended","n","r","i","length","String","ANY_EVENT","TypeError","s","t","prepend","unshift","push","remaining","addListener","Symbol","for","Object","entries","some","filter","callback","eventNames","keys","getListeners","forEach","suspended","concat","Array","isArray","arguments","apply","context","count","remove","duration","parseInt","isNaN","Promise","clearTimeout","setTimeout","eventCount","ReferenceError","assign","event","target","removeListener","InputChannel","EventEmitter","input","number","super","_nrpnBuffer","nrpnEventsEnabled","dataBytes","data","WebMidi","MIDI_SYSTEM_MESSAGES","sysex","slice","midiMessageEvent","statusByte","timestamp","timeStamp","type","emit","_parseEventForNrpnMessage","_parseEventForStandardMessages","data1","data2","command","undefined","MIDI_CHANNEL_VOICE_MESSAGES","noteoff","noteon","note","name","NOTES","octave","getOctave","release","rawRelease","attack","rawVAttack","keyaftertouch","value","rawValue","controlchange","controller","getCcNameByNumber","channelmode","getChannelModeByNumber","programchange","channelaftertouch","pitchbend","Math","floor","status","cm","MIDI_CHANNEL_MODE_MESSAGES","hasOwnProperty","channel","MIDI_NRPN_MESSAGES","increment","parammsb","entrymsb","entrylsb","ccEvent","nullactiveparameter","paramlsb","decrement","rawData","ev","nrpnNumber","nrpnValue","nrpnControllerType","NRPN_TYPES","Error","nrpnEvent","_nrpnEventsEnabled","enabled","Input","midiInput","_midiInput","channels","onstatechange","_onStateChange","bind","onmidimessage","_onMidiMessage","ch","destroy","close","time","port","connection","state","id","manufacturer","console","warn","_parseEvent","timecode","songposition","songselect","song","tunerequest","clock","start","continue","stop","activesensing","reset","open","resolve","err","reject","cc","MIDI_CONTROL_CHANGE_MESSAGES","listener","options","listeners","sanitizeChannels","every","hasListener","OutputChannel","output","send","pressure","parseFloat","useRawValue","RangeError","getValidNoteArray","round","convertToTimestamp","parameter","sendControlChange","MIDI_REGISTERED_PARAMETER","_selectRegisteredParameter","_deselectRegisteredParameter","sendNoteOn","isFinite","trim","NaN","noteOffOptions","sendNoteOff","rawVelocity","velocity","nVelocity","o","rawAttack","sendChannelMode","coarse","fine","msb","lsb","setRegisteredParameter","semitones","cents","_selectNonRegisteredParameter","_setCurrentRegisteredParameter","nLevel","program","mode","Output","midiOutput","_midiOutput","sysexend","clear","setSongPosition","setSong","sendTuneRequest","setKeyAftertouch","setPitchBendRange","setChannelAftertouch","setPitchBend","bend","setProgram","setModulationRange","setMasterTuning","setTuningProgram","setTuningBank","turnSoundOff","turnNotesOff","resetAllControllers","setPolyphonicMode","setLocalControl","setOmniMode","setNonRegisteredParameter","incrementRegisteredParameter","decrementRegisteredParameter","stopNote","playNote","Note","Number","isInteger","_number","guessNoteNumber","_duration","max","Infinity","_channels","_rawAttack","min","_rawRelease","wm","interface","_inputs","_outputs","_stateChangeQueue","_octaveOffset","isNode","global","performance","require","navigator","supported","intervalID","setInterval","clearInterval","error","requestMIDIAccess","software","_onInterfaceStateChange","ports","_updateInputsAndOutputs","inputs","outputs","_destroyInputsAndOutputs","then","toString","indexOf","matches","match","semitone","C","D","E","F","G","A","B","toUpperCase","result","octaveOffset","toLowerCase","getNoteNumberByName","map","notes","parsed","substring","now","promises","all","getOutputById","getInputById","_updateInputs","_updateOutputs","updated","values","next","done","splice","nInput","add","j","nOutput","prototype","call","process","sysexEnabled","nrpn","MIDI_CHANNEL_MESSAGES","allsoundoff","resetallcontrollers","localcontrol","allnotesoff","omnimodeoff","omnimodeon","monomodeon","polymodeon","bankselectcoarse","modulationwheelcoarse","breathcontrollercoarse","footcontrollercoarse","portamentotimecoarse","dataentrycoarse","volumecoarse","balancecoarse","pancoarse","expressioncoarse","effectcontrol1coarse","effectcontrol2coarse","generalpurposeslider1","generalpurposeslider2","generalpurposeslider3","generalpurposeslider4","bankselectfine","modulationwheelfine","breathcontrollerfine","footcontrollerfine","portamentotimefine","dataentryfine","volumefine","balancefine","panfine","expressionfine","effectcontrol1fine","effectcontrol2fine","holdpedal","portamento","sustenutopedal","softpedal","legatopedal","hold2pedal","soundvariation","resonance","soundreleasetime","soundattacktime","brightness","soundcontrol6","soundcontrol7","soundcontrol8","soundcontrol9","soundcontrol10","generalpurposebutton1","generalpurposebutton2","generalpurposebutton3","generalpurposebutton4","reverblevel","tremololevel","choruslevel","celestelevel","phaserlevel","databuttonincrement","databuttondecrement","nonregisteredparametercoarse","nonregisteredparameterfine","registeredparametercoarse","registeredparameterfine","MIDI_INTERFACE_EVENTS","pitchbendrange","channelfinetuning","channelcoarsetuning","tuningprogram","tuningbank","modulationrange","azimuthangle","elevationangle","gain","distanceratio","maximumdistance","maximumdistancegain","referencedistanceratio","panspreadangle","rollangle","tuningrequest","midimessage","unknownsystemmessage","constructor"],"mappings":"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"}